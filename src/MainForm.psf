<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAKEwSURBVHhe7P13jCTbtt6JXQlyGGAA6V/9IQgj
DSBgZGYgDvk4JDUcjkjxkZd8fI/P3HfNu/d416e9d+W99z7Le++99957773NSlemP60VmdldXSer
TrtTXZ21vsIPGRVmx46IHXt9EbFjx69EIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQS
iUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJ
RCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolE
IpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFI
JBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgk
EolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQS
iUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpHoVw//
6//6/5rt7OKeHRAYnu3rFywIgiAIwidIcGhU9vWbN7P/i//d/zbbFOPP1v/lv/qvyhPT89E/s43+
2W30TW8KgiAIgvAJMjDHcXwd9x8+gSnMny2+8ucFanumUN01gZquSUEQBEEQzqL7LbnAZTiONw0t
oqlr5OcNQHBIePbI4h4ZgGnU9/6U1t4ltPUtWJwmCIIgCFeJhr4ZY6DtnPhZqog6XqZ/BrUUoKs7
x2lZvtA+G56ntnuKlplFHcVlTsNS2qfhPHHeOI+Ngwto6R3/eQMQEBhCBkBNC86ikVbIv2Za+heR
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	# Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		# Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	# Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
        Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
            SelectBackColor = selectBackColor;
        } 
        public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	# Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	# Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	# Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		# Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		# Set the text color
		if ($target.Tag -ne "DangerZone")
		{
			$target.ForeColor = $ForeColor
		}
		else
		{
			$target.ForeColor = [System.Drawing.Color]::Red
		}
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			# Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			# Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			# Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Get the service principals based on the ServiceType
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			# Log
			Write-Log -Level INFO -Message "Retrieving access scopes for '$ServiceType'..."
			
			# Get the specific service principal
			$filteredServicePrincipal = Get-MgServicePrincipal -Filter "DisplayName eq '$ServiceType'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "Service principal access scopes retrieved for service: '$ServiceType'."
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Retrieving access scopes for all service principals..."
			
			# Get all service principals
			$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "All service principals access scopes retrieved."
		}
		
		# Check if returned data (exclude if "All services")
		if ($null -eq $filteredServicePrincipal -and $ServiceType -ne "All services")
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Store the filtered service principal data in the global hashtable
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
		}
		else
		{
			$global:ServicePrincipalData = @{ }
			foreach ($sp in $filteredServicePrincipal)
			{
				$global:ServicePrincipalData[$sp.DisplayName] = $sp
			}
		}
		
		# Create a list of roles
		$roles = $filteredServicePrincipal | ForEach-Object {
			foreach ($r in $_.AppRoles)
			{
				[PSCustomObject]@{
					AppId	    = $_.Id
					DisplayName = $_.DisplayName
					Id		    = $r.Id
					RoleName    = $r.DisplayName
					Value	    = $r.Value
				}
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals retrieved - filtered and sorted data."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list..."
		
		# Loop all roles for adding to table
		foreach ($role in $roles)
		{
			$roleDetails = "'$($role.DisplayName)', description: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		# Log
		Write-Log -Level INFO -Message "Added assignable permission scopes to permission list."
		
		# Define the most used items in the desired order
		$mostUsedItems = @("All services", "Microsoft Graph", "Office 365 Exchange Online", "Office 365 Information Protection", "Office 365 SharePoint Online", "WindowsDefenderATP", "Microsoft Cloud App Security")
		
		# Populate the ComboBox with service names only if they have assignable roles
		if ($ServiceComboBox.Items.Count -eq 0)
		{
			# Sort the service principals
			$sortedServicePrincipals = $filteredServicePrincipal | Sort-Object {
				if ($mostUsedItems -contains $_.DisplayName)
				{
					[Array]::IndexOf($mostUsedItems, $_.DisplayName)
				}
				else
				{
					[Int32]::MaxValue
				}
			}
			
			# Populate the ComboBox
			$ServiceComboBox.Items.Add("All services")
			$sortedServicePrincipals | ForEach-Object {
				if ($_.AppRoles.Count -gt 0)
				{
					$ServiceComboBox.Items.Add($_.DisplayName)
				}
			}
		}
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered Managed Identities from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	# Services to add to dropdown list (more to add soon when tested..)
	#$ServiceComboBox.Items.Add("Microsoft Graph")
	#$ServiceComboBox.Items.Add("Exchange Online")
	#$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Populate the ComboBox with service names
				Get-AssignableApiPermissionScopes -ServiceType $null
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}	
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "ObjectID"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			[System.Windows.Forms.MessageBox]::Show("The following fields are required: $missingFieldsString", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "ObjectID"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			[System.Windows.Forms.MessageBox]::Show("The following fields are required: $missingFieldsString", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	$ObjectName = $textboxselectedIdentityName.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	# Get the selected service type
	$selectedServiceType = $ServiceComboBox.Text
	
	# Get data and get permissions
	Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
	
	# Get data and get permissions
	#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	#Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click = {
	
	# Initialize selected scopes array
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			#Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Check if any scopes are selected
	if ($selectedScopes.Count -gt 0)
	{
		# Log
		Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
		
		# Format data
		$PermissionsTextBox.Text = $selectedScopes -join ", "
		
		# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No access scopes selected to add"
		[System.Windows.Forms.MessageBox]::Show("No access scopes selected to add.", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
	}
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get data fo filter function
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	$filteredItems = @()
	
	# Filter elements
	if ($filterText -eq "" -or $null)
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process "https://buymeacoffee.com/sonnes"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$currentSelectedManagedIdentityToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$exportAssignedPermissionsToolStripMenuItem_Click={
	
	$timestamp = Get-Date -Format "dd-MM-yyyy"
	
	# Get data needed for the export
	$ManagedIdentityID = $textboxselectedIdentityID.Text
	$ManagedIdentityName = $textboxselectedIdentityName.Text
	
	$selectedManagedIdentities = @()
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($checkedlistboxListOfManagedIdentity.GetItemChecked($i))
		{
			$selectedManagedIdentities += $checkedlistboxListOfManagedIdentity.Items[$i]
		}
	}
	
	# For export for selected Managed Identity (permissions)
	if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID) -or $selectedManagedIdentities.Count -gt 0)
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for selected Managed Identity '$ManagedIdentityName'"
		$saveFileDialog.FileName = "${ManagedIdentityName}_permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID))
			{
				# Call function to save data
				Export-ManagedIdentityPermissions -ManagedIdentityID $ManagedIdentityID -ManagedIdentityName $ManagedIdentityName -ExportFilePath $ExportFilePath
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for the selected Managed Identity '$ManagedIdentityName' (ID: $ManagedIdentityID) exported successfully." -Icon Information -BoxType OK
			}
			else
			{
				$exportedNames = @()
				foreach ($identity in $selectedManagedIdentities)
				{
					Export-ManagedIdentityPermissions -ManagedIdentityID $identity.Id -ManagedIdentityName $identity.Name -ExportFilePath $ExportFilePath
					$exportedNames += "$($identity.Name) (ID: $($identity.Id))"
				}
				$exportedNamesString = $exportedNames -join ", "
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for all selected Managed Identities '$exportedNamesString' exported successfully." -Icon Information -BoxType OK
			}
		}
	}	
	# For export for all Managed Identity (permissions)
	else
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for all Managed Identity´s"
		$saveFileDialog.FileName = "Managed Identity Permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			# Call function to save data
			Export-AllManagedIdentityPermissions -ExportFilePath $ExportFilePath
			
			Show-MsgBox -Title "Export" -Prompt "Permissions for all Managed Identities exported successfully." -Icon Information -BoxType OK
		}
	}
}

$microsoftGraphToolStripMenuItem_Click = {
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the Microsoft Graph permissions reference"
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process "https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
}

$buttonDefaultServiceToManage_Click={
	
	# Set default service in combobox
	$ServiceComboBox.SelectedIndex = 1
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>