<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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</Preview>
  <Form>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
OAFRCnyhJ/rVEnl2cshZH/qX/wdiKPe6TTcAAA==</Form>
  <Code><![CDATA[
$formManagedIdentityPermi_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formManagedIdentityPermi -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$buttonConnectMicrosoftGraph_Click = {
	
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			Disconnect-MgGraph
			$ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			Update-Log -Message "Disconnected from Microsoft Graph."
		}
		catch
		{
			Update-Log -Message "Error disconnecting from Microsoft Graph: $_"
		}
	}
	else
	{
		try
		{
			Update-Log -Message "Starting check for needed PowerShell Modules..."
			
			Check-Modules
			
			Update-Log -Message "Check for needed PowerShell Modules complete"
			
			Update-Log -Message "Starting to connect to Microsoft Graph..."
			
			ConnectToGraph
			
			if ($ConnectedState = $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				$ConnectedState = $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			Update-Log -Message "Error connecting to Microsoft Graph: $_"
		}
	}	
}

function Get-ManagedIdentities
{
	# Get managed identities
	$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'"
	
	# Populate the ComboBox with managed identities
	foreach ($identity in $managedIdentities)
	{
		$comboBox.Items.Add($identity.DisplayName)
	}
}

$combobox_SelectedIndexChanged={
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:managedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $textboxselectedIdentityID.Text
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textBox.Text = "$roleDetails"
}

$SubmitButton_Click={
	#TODO: Place custom script here
	if ($radiobuttonAdd.Checked = $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Update-Log -Message  "ObjectID: $ObjectID"
		Update-Log -Message  "Service: $Service"
		Update-Log -Message  "Permissions: $Permissions"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Update-Log -Message "All fields are required."
			#[System.Windows.MessageBox]::Show("All fields are required.", "Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
			return
		}
		
		$Perms = $Permissions.Split(",")
		[psobject[]]$roleName = $Perms
		
		switch ($Service)
		{
			"MicrosoftGraph" {
				Add-MicrosoftGraphPermission -ObjectID $ObjectID -roleName $roleName
			}
			"ExchangeOnline" {
				Add-ExchangeOnlinePermission -ObjectID $ObjectID -roleName $roleName
			}
			"SharePoint" {
				Add-SharePointPermission -ObjectID $ObjectID -roleName $roleName
			}
		}
		
		#[System.Windows.MessageBox]::Show("Permissions assigned successfully.", "Success", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
		Update-Log -Message "Permissions assigned successfully."
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>