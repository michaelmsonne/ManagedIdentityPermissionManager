<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
AsaOh7XBOnhrm63XRv7blQrWnjlrt823sPCFxyEQd4xc26zN3r9i9q4WCNxn23npAsBbYkT/8lff
UV5pmd78m7/QH337T/T2z7dr/fuh+se//GslFNdo25s/UMTu/fr+D76nmP2R+qd1b+utdd/V5oid
+o+3fqi3161XaFiI3vznf1P41ki99cO/03e++/fal1usw+Hv6E+//cfaEBKt6MiN+ts31un9kHf0
/X/4kVo6h70WrNS2LwsFACHkVYqdr9ZYATDjXcJmo/aD/9zn6ZMn3gh7G+1vI+yfPbP7bfT+ku53
3tXoxJw7eX/mXRXw7Nlnevp0Tvc67mpybvH5CH8bkR+4EsCbx/WyNrJ+aWlODRWn1HT9rtdhLNl8
3jwLGhsaUteNdp2tadK869EWXWcaXIftj73Ct6sAbN4l1zbz8M5NtTTf8jpA79JD1+naiP2FyVF1
dt7Xku2Xa49Nt7epP75Qp5tdQxr/tM29Uo7W1DOp8liiMsqavPV5bXftfGaX9LlOfc511rb/dtmf
XfZor/a9/XDHx7vKYWHRrdb2qVoDE7P6qK5OrXceuTU908XKavUNzrj7//vF8bDP1qdGBtXljlXf
vR51dd3X7OKSK0oWvYJpZOR3KQDG9Maf/5ne3bJTJ8oqda4iX/tjE5RbXq28lFRdutWjyswjOt/Y
osysdLU01ivRl+l+PqzisgrFxkZr/96DOn4iV3F7dioj44QyMpNUU1OpuA92Kz4tVUW5x1Rc2qDG
2jLFJmUoPTleYZt36c7jSd4BIIS89rHz1ZopAKanXUMnhlR6PFOpvpPq7urVqdwsHS+s0LWLDSo8
UewNisvMOKq87GxVnGtU580ONV2oUVqiT+2tbcr22ef4l/Sr9g5d/6hFKQmp+rD1hupKi5SemavW
623KTD6kC66jfjY/oE0/Xq+ckirl+NLVeKVNtSVFami9q7vXzurnP96giO1RSsnKU8e9+yp3bTma
U6yRyVk9utuupPiDam3rUPPZCvkyctVQVaXKknrVVZUoPeukOj/5lXKPZivnaJI2bdyr+ov1Sk7w
6XZnt+rPFGnzhhA13/ZrordF//6vb+jC1VvaHfK2ogtq1dpcobS0ArcfN3QiPU0ny2vV03tbGalJ
arl8R7evNurQwUQ1f3hDtacK3b7Z8epWSU6StoSEa2D2ic5l56i85pKqio8qLDRCTZc+UnpCohpa
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
tXzrW/8DMLgFhwUsGvEAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	# Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		# Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	# Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
        Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
            SelectBackColor = selectBackColor;
        } 
        public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	# Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	# Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	# Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		# Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		# Set the text color
		if ($target.Tag -ne "DangerZone")
		{
			$target.ForeColor = $ForeColor
		}
		else
		{
			$target.ForeColor = [System.Drawing.Color]::Red
		}
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			# Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			# Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			# Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	# Clear list for existing ithems
	$checkedlistboxPermissionsToAssign.Items.Clear()
	
	# Get all service principals
	$allServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
	
	# Filter service principals based on the selected service type
	$filteredServicePrincipal = $allServicePrincipal | Where-Object { $_.DisplayName -eq $ServiceType }
	
	# Store the filtered service principal data in the global hashtable
	$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
	
	# Create a list of roles
	$roles = $filteredServicePrincipal | ForEach-Object {
		foreach ($r in $_.AppRoles)
		{
			[PSCustomObject]@{
				AppId	    = $_.Id
				DisplayName = $_.DisplayName
				Id		    = $r.Id
				RoleName    = $r.DisplayName
				Value	    = $r.Value
			}
		}
	}
	
	# Populate the CheckedListBox with roles
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($role in $roles)
	{
		$roleDetails = "'$($role.DisplayName)', discription: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
		$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		
		#$checkedlistboxPermissionsToAssign.Items.Add("$($role.DisplayName) - $($role.RoleName) ($($role.Value))")
	}
	
	# Populate the ComboBox with service names only if they have assignable roles
	$ServiceComboBox.Items.Clear()
	$allServicePrincipal | ForEach-Object {
		if ($_.AppRoles.Count -gt 0)
		{
			$ServiceComboBox.Items.Add($_.DisplayName)
		}
	}
}

<#
function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing ithems
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Determine the AppId based on the ServiceType
		switch ($ServiceType)
		{
			"Microsoft Graph" {
				$appId = '00000003-0000-0000-c000-000000000000'
			}
			"Exchange Online" {
				$appId = '00000002-0000-0ff1-ce00-000000000000'
			}
			"SharePoint" {
				$appId = '00000003-0000-0ff1-ce00-000000000000'
			}
			default {
				# Log
				Write-Log -Level INFO -Message "Invalid ServiceType specified. Valid values are 'Microsoft Graph', 'Exchange Online', 'SharePoint'."
				return
			}
		}
		
		# Get the service principal for the specified AppId
		Write-Log -Level INFO -Message "Retrieving service principal for AppId: '$appId'"
		
		# Get needed data
		$servicePrincipal = Get-MgServicePrincipal -Filter "AppId eq '$appId'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		# Check if returned data
		if ($null -eq $servicePrincipal)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found with AppId '$appId', Service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principal retrieved: AppId '$appId', '$($servicePrincipal.DisplayName)'"
		
		# Extract the permission scopes (AppRoles and Oauth2PermissionScopes)
		$appRoles = $servicePrincipal.AppRoles
		$oauth2PermissionScopes = $servicePrincipal.Oauth2PermissionScopes
		
		# Check if scopes assigned
		if ($appRoles.Count -eq 0 -and $oauth2PermissionScopes.Count -eq 0)
		{
			# Log
			Write-Log -Level INFO -Message "No assignable permission scopes found for service principal with AppId '$appId' service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Assignable permission scopes retrieved for AppId '$appId' service '$($servicePrincipal.DisplayName)'."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)'..."
		
		foreach ($role in $appRoles)
		{
			$roleDetails = "Role details: '$($role.DisplayName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		Write-Log -Level INFO -Message "Added all assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)' to the list for management."
		
		<#
		foreach ($scope in $oauth2PermissionScopes)
		{
			$scopeDetails = "Scope details: $($scope.AdminConsentDisplayName), ScopeValue: $($scope.Value), ScopeId: $($scope.Id)"
			$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)
		}
		#>
<#
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}
#>

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered Managed Identities from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	# Services to add to dropdown list (more to add soon when tested..)
	#$ServiceComboBox.Items.Add("Microsoft Graph")
	#$ServiceComboBox.Items.Add("Exchange Online")
	#$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Populate the ComboBox with service names
				Get-AssignableApiPermissionScopes -ServiceType $null
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}	
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			# Log
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	$ObjectName = $textboxselectedIdentityName.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	# Get the selected service type
	$selectedServiceType = $ServiceComboBox.Text
	
	# Get data and get permissions
	Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
	
	# Get data and get permissions
	#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	#Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click = {
	
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Log
	Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
	
	# Format data
	$PermissionsTextBox.Text = $selectedScopes -join ", "
	
	# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	
	# $PermissionsTextBox
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get data fo filter function
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	$filteredItems = @()
	
	# Filter elements
	if ($filterText -eq "" -or $null)
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process "https://buymeacoffee.com/sonnes"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$currentSelectedManagedIdentityToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$exportAssignedPermissionsToolStripMenuItem_Click={
	
	$timestamp = Get-Date -Format "dd-MM-yyyy"
	
	# Get data needed for the export
	$ManagedIdentityID = $textboxselectedIdentityID.Text
	$ManagedIdentityName = $textboxselectedIdentityName.Text
	
	$selectedManagedIdentities = @()
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($checkedlistboxListOfManagedIdentity.GetItemChecked($i))
		{
			$selectedManagedIdentities += $checkedlistboxListOfManagedIdentity.Items[$i]
		}
	}
	
	# For export for selected Managed Identity (permissions)
	if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID) -or $selectedManagedIdentities.Count -gt 0)
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for selected Managed Identity '$ManagedIdentityName'"
		$saveFileDialog.FileName = "${ManagedIdentityName}_permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID))
			{
				# Call function to save data
				Export-ManagedIdentityPermissions -ManagedIdentityID $ManagedIdentityID -ManagedIdentityName $ManagedIdentityName -ExportFilePath $ExportFilePath
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for the selected Managed Identity '$ManagedIdentityName' (ID: $ManagedIdentityID) exported successfully." -Icon Information -BoxType OK
			}
			else
			{
				$exportedNames = @()
				foreach ($identity in $selectedManagedIdentities)
				{
					Export-ManagedIdentityPermissions -ManagedIdentityID $identity.Id -ManagedIdentityName $identity.Name -ExportFilePath $ExportFilePath
					$exportedNames += "$($identity.Name) (ID: $($identity.Id))"
				}
				$exportedNamesString = $exportedNames -join ", "
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for all selected Managed Identities '$exportedNamesString' exported successfully." -Icon Information -BoxType OK
			}
		}
	}	
	# For export for all Managed Identity (permissions)
	else
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for all Managed Identity´s"
		$saveFileDialog.FileName = "Managed Identity Permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			# Call function to save data
			Export-AllManagedIdentityPermissions -ExportFilePath $ExportFilePath
			
			Show-MsgBox -Title "Export" -Prompt "Permissions for all Managed Identities exported successfully." -Icon Information -BoxType OK
		}
	}
}

$microsoftGraphToolStripMenuItem_Click = {
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the Microsoft Graph permissions reference"
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process "https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>