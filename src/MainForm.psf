<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAKeSSURBVHhe7P1nkBxZl54Jfjt/dmzN1vb/2v4a
YTazM7Y7tCU55DZnh7Njw2GTvWR3s9nN7k/WV1VfKVRBaySQidRaa6211lprrbXWWkSGSIV3z7kR
ASSyAlkoAJVIRJ7X7Mn0cHH9uvv1e153v379VyKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFI
JBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgk
EolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQS
iUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJ
RCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolE
IpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SPSrB//1f/1fZTs5u2X7B4Rl+/gGCYIgCILwCRIUEpn9w40b2f+n//z/mG2K8W/Wf/lf/Bflien5
6J/ZRv/sNvqmNwVBEARB+AQZmOM4vo57Dx7DFObfLL7y5wVqe6ZQ3TWBmq5JQRAEQRDeRPfP5AKX
4TjeNLSIpq6RnzYAQcFh2SOLe2QAplHf+2Nae5fQ1rdgcZogCIIgXCUa+maMgbZz4iepIup4mf4Z
1FKAru4cp2X5QvvN8Dy13VO0zCzqKC5zGpbSPgvnifPGeWwcXEBL7/hPGwD/gGAyABpacBaNtEL+
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
4NcXAERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
dLL85Cf/Dyoar+qKVbGGAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	# Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		# Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	# Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
        Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
            SelectBackColor = selectBackColor;
        } 
        public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	# Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	# Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	# Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		# Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		# Set the text color
		if ($target.Tag -ne "DangerZone")
		{
			$target.ForeColor = $ForeColor
		}
		else
		{
			$target.ForeColor = [System.Drawing.Color]::Red
		}
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			# Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			# Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			# Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing ithems
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Determine the AppId based on the ServiceType
		switch ($ServiceType)
		{
			"Microsoft Graph" {
				$appId = '00000003-0000-0000-c000-000000000000'
			}
			"Exchange Online" {
				$appId = '00000002-0000-0ff1-ce00-000000000000'
			}
			"SharePoint" {
				$appId = '00000003-0000-0ff1-ce00-000000000000'
			}
			default {
				# Log
				Write-Log -Level INFO -Message "Invalid ServiceType specified. Valid values are 'Microsoft Graph', 'Exchange Online', 'SharePoint'."
				return
			}
		}
		
		# Get the service principal for the specified AppId
		Write-Log -Level INFO -Message "Retrieving service principal for AppId: '$appId'"
		
		# Get needed data
		$servicePrincipal = Get-MgServicePrincipal -Filter "AppId eq '$appId'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		# Check if returned data
		if ($null -eq $servicePrincipal)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found with AppId '$appId', Service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principal retrieved: AppId '$appId', '$($servicePrincipal.DisplayName)'"
		
		# Extract the permission scopes (AppRoles and Oauth2PermissionScopes)
		$appRoles = $servicePrincipal.AppRoles
		$oauth2PermissionScopes = $servicePrincipal.Oauth2PermissionScopes
		
		# Check if scopes assigned
		if ($appRoles.Count -eq 0 -and $oauth2PermissionScopes.Count -eq 0)
		{
			# Log
			Write-Log -Level INFO -Message "No assignable permission scopes found for service principal with AppId '$appId' service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Assignable permission scopes retrieved for AppId '$appId' service '$($servicePrincipal.DisplayName)'."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)'..."
		
		foreach ($role in $appRoles)
		{
			$roleDetails = "Role details: '$($role.DisplayName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		Write-Log -Level INFO -Message "Added all assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)' to the list for management."
		
		<#
		foreach ($scope in $oauth2PermissionScopes)
		{
			$scopeDetails = "Scope details: $($scope.AdminConsentDisplayName), ScopeValue: $($scope.Value), ScopeId: $($scope.Id)"
			$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)
		}
		#>
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered Managed Identities from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	# Services to add to dropdown list (more to add soon when tested..)
	$ServiceComboBox.Items.Add("Microsoft Graph")
	$ServiceComboBox.Items.Add("Exchange Online")
	$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}	
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			# Log
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	$ObjectName = $textboxselectedIdentityName.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	# Get data and get permissions
	Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click = {
	
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Log
	Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
	
	# Format data
	$PermissionsTextBox.Text = $selectedScopes -join ", "
	
	# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	
	# $PermissionsTextBox
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get data fo filter function
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	$filteredItems = @()
	
	# Filter elements
	if ($filterText -eq "" -or $null)
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}
$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process "https://buymeacoffee.com/sonnes"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}
$currentSelectedManagedIdentityToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$exportAssignedPermissionsToolStripMenuItem_Click={
	
	$timestamp = Get-Date -Format "dd-MM-yyyy"
	
	# Get data needed for the export
	$ManagedIdentityID = $textboxselectedIdentityID.Text
	$ManagedIdentityName = $textboxselectedIdentityName.Text
	
	$selectedManagedIdentities = @()
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($checkedlistboxListOfManagedIdentity.GetItemChecked($i))
		{
			$selectedManagedIdentities += $checkedlistboxListOfManagedIdentity.Items[$i]
		}
	}
	
	# For export for selected Managed Identity (permissions)
	if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID) -or $selectedManagedIdentities.Count -gt 0)
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for selected Managed Identity '$ManagedIdentityName'"
		$saveFileDialog.FileName = "${ManagedIdentityName}_permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID))
			{
				# Call function to save data
				Export-ManagedIdentityPermissions -ManagedIdentityID $ManagedIdentityID -ManagedIdentityName $ManagedIdentityName -ExportFilePath $ExportFilePath
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for the selected Managed Identity '$ManagedIdentityName' (ID: $ManagedIdentityID) exported successfully." -Icon Information -BoxType OK
			}
			else
			{
				$exportedNames = @()
				foreach ($identity in $selectedManagedIdentities)
				{
					Export-ManagedIdentityPermissions -ManagedIdentityID $identity.Id -ManagedIdentityName $identity.Name -ExportFilePath $ExportFilePath
					$exportedNames += "$($identity.Name) (ID: $($identity.Id))"
				}
				$exportedNamesString = $exportedNames -join ", "
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for all selected Managed Identities '$exportedNamesString' exported successfully." -Icon Information -BoxType OK
			}
		}
	}	
	# For export for all Managed Identity (permissions)
	else
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for all Managed Identity´s"
		$saveFileDialog.FileName = "Managed Identity Permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			# Call function to save data
			Export-AllManagedIdentityPermissions -ExportFilePath $ExportFilePath
			
			Show-MsgBox -Title "Export" -Prompt "Permissions for all Managed Identities exported successfully." -Icon Information -BoxType OK
		}
	}
}

$microsoftGraphToolStripMenuItem_Click = {
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the Microsoft Graph permissions reference"
}


$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process "https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>