<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJzBSURBVHhe7P1XjCRZvqeJNQUIkAR2FuQjH/jE
FxIkluAugVnqvZxZcObemdk7V7S63V1dXV1apdYqMkNrrbXWGVprrbXWWgvXHuojjnl4ZqRnVlZk
VaXy/H/Ah/BwNzc3dzez8/NjR/zqV4IgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIgCIIg
CIIgCIIgCIIgCIIgCIIgCD8Hl//yv/xXpV9++VWpt29gqYeHb6m7KIqiKIrvlR5evqW+vv6l//2/
+f+W/upXv1K+nH/1r/6LRk+fADrHlhie32VwblsURVEUxffMobkdhhZ2aewc4u/+7j/gWN4/x+ef
f1XaNbZM0+ACtd1T1PaIoiiKovi+2jW1RX5J9Y8HAD//oNLxZR11vdM09M2IoiiK4odt/yzNg/M0
D72aTQNz2vMbB+ZoGpx/Ne3PVa/9gnX/mOp59u1vGVmmqXPoxwOAl7efFgDUk9UGnLVxwHZfZ/86
vYPrdAwuvXA5URRFUXQWVTlX3DBIQW0fhXX951ItW9k+RsvQAtUdY5Q29lHW1H8uS5v6KW8d0l67
vmf6uXX/mAW1/dR1T9E8aNv+9rFV6lv7zhcAJlb0NA3M2xLPMy7QPrhM2FAWf+3wJ62nh86hZe0x
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
VwAcPSZmAEQ68iNTAsUMAPH434ro4BcDmtsjZg1Eu9wjF8mJ/oxYjvSz0rIirxN9zePnv7UOYjnR
QfKd5R09Ll5LzCYQDYFi/aLPl35Ouv9oudL6HK3H8XMi1zwQj0Ve781rH2+TmPlwtC3H94vni/UX
Uxyt1sjMhaOZEtK6vvVevbOso/WIPv72top1i75nYkBzOJzSbAWX692qkQUACwCGYU5OogWAuL25
uYnl5WWsrKxgbW1N2q+J/dknWQAwv53o4P7+/R8babm/cL8YBMXgeJqJ4sZoNB6/DywAGIY5qYkW
AOIT/8zMDNRqtZTBwcGjD3weFgDMh0X8fkQBEDny8ObIymmJ2CaLxSId5RD/FtvMAoBhmJOaaAEg
9ltigO/u7oZOp4PBYDg+UswCgPmgRH8/29vbWF9fx8bGxqmK2CbxP8bb28wCgGGYk5poARDtARD7
N7GvE4O/ePyTKgBO46fK0xjxxyP+mE5j3u81+dACINpTwjAM86lEjKniTLHRWQDRffebxz+BAiD6
3bJ4cYb5lBJtCPxbBYA4HfXikxXpWg6ieZJhGOZTSWSQ90r7r/cfE7HbHdL+6z9WAEQrE3EUQKwA
w3xKEX+Xv14AePB8fRNPllalIwEMwzCfVp5h9Wf3RbK0tIrnzyNfCYj93X+sAHj/MDPDfCr5tQJA
KgKOLlQVuRgVwzDMSUlk3yX2a/+RAoBhTkLEzIC3CwDx7/d/hmEY5iRG7NuiM7z+bQWAiDgCwDAn
IfzbZRjmNOf9fdy/vABgGIZhGObTDAsAhmEYhvkvDAsAhmEYhvkvzD+lABALYRiGYRjm5MTnccFk
/4gCYG3XA5PNzTAMwzDMCYrZ7saO2Y2Vf6QAWDV6pIjqgWEYhmGYkxUx+Itx/IMLgEJFyajrENIT
GIZhGIY52dn1AXPLG79dACSlpN1afr6Ne3OrUsXAMAzDMMzJzdzSBkbHbv12AUBERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERE9Mb/A2M5h/VqYN0rAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing ithems
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Determine the AppId based on the ServiceType
		switch ($ServiceType)
		{
			"Microsoft Graph" {
				$appId = '00000003-0000-0000-c000-000000000000'
			}
			"Exchange Online" {
				$appId = '00000002-0000-0ff1-ce00-000000000000'
			}
			"SharePoint" {
				$appId = '00000003-0000-0ff1-ce00-000000000000'
			}
			default {
				Write-Log -Level INFO -Message "Invalid ServiceType specified. Valid values are 'Microsoft Graph', 'Exchange Online', 'SharePoint'."
				return
			}
		}
		
		# Get the service principal for the specified AppId
		Write-Log -Level INFO -Message "Retrieving service principal for AppId: '$appId'"
		
		$servicePrincipal = Get-MgServicePrincipal -Filter "AppId eq '$appId'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		if ($null -eq $servicePrincipal)
		{
			Write-Log -Level INFO -Message "No service principal found with AppId '$appId', Service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		Write-Log -Level INFO -Message "Service principal retrieved: AppId '$appId', '$($servicePrincipal.DisplayName)'"
		
		# Extract the permission scopes (AppRoles and Oauth2PermissionScopes)
		$appRoles = $servicePrincipal.AppRoles
		$oauth2PermissionScopes = $servicePrincipal.Oauth2PermissionScopes
		
		if ($appRoles.Count -eq 0 -and $oauth2PermissionScopes.Count -eq 0)
		{
			Write-Log -Level INFO -Message "No assignable permission scopes found for service principal with AppId '$appId' service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		Write-Log -Level INFO -Message "Assignable permission scopes retrieved for AppId '$appId' service '$($servicePrincipal.DisplayName)'."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)'..."
		
		foreach ($role in $appRoles)
		{
			$roleDetails = "Role details: '$($role.DisplayName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		Write-Log -Level INFO -Message "Added all assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)' to the list for management."
		
		<#
		foreach ($scope in $oauth2PermissionScopes)
		{
			$scopeDetails = "Scope details: $($scope.AdminConsentDisplayName), ScopeValue: $($scope.Value), ScopeId: $($scope.Id)"
			$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)
		}
		#>
	}
	catch
	{
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

function Get-ManagedIdentities
{
	# Get all managed identities
	
	$comboBox.Items.Clear()
	
	# If connected
	if ($ConnectedState = $true)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		# Get all data
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'"
		
		# Log
		Write-Log -Level INFO -Message "Loaded list Managed Identity from tenant."
		
		# Populate the ComboBox with managed identities
		foreach ($identity in $managedIdentities)
		{
			$comboBox.Items.Add($identity.DisplayName)
		}
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	if ($ConnectedState = $false)
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

$formManagedIdentityPermi_Load={
	#TODO: Initialize Form Controls here
	
	CheckLogPath
	
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	$global:darkModeStateUI = Is-WindowsInDarkMode
	
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	$ConnectedState = $false
	$clearExistingPermissions = $true
	#$darkModeSateUI = $true
	
	#$formServiceAccountsVXxxC.Text = "Service Accounts v. $FormVersion - Created by: $Author - Company: $AuthorCompany"
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	#$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	$ServiceComboBox.Items.Add("Microsoft Graph")
	$ServiceComboBox.Items.Add("Exchange Online")
	$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check installed/loaded modules
			Check-Modules
			
			# Connect
			ConnectToGraph
			
			# If connected, set states
			if ($ConnectedState = $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$ConnectedState = $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}	
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:managedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $textboxselectedIdentityID.Text
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			# Log
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	#TODO: Place custom script here
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	#TODO: Place custom script here
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$microsoftGraphToolStripMenuItem_Click={
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}	
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	#TODO: Place custom script here
	Show-ChangelogForm_psf
}

$aboutToolStripMenuItem_Click={

	#SHOW ABOUT

	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$openLogFolderToolStripMenuItem_Click={
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	Write-Log -Level INFO -Message "User opened log folder: $LogPath"
}

$openLogForTodayToolStripMenuItem_Click={
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: $LogPath"
	
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	if (Test-Path $logFilePath)
	{
		Start-Process $logFilePath
		Write-Log -Level INFO -Message "User opened log file for today: $logFilePath"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at $logFilePath." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		Write-Log -Level INFO -Message "Log file not found at $logFilePath - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click={
	#OPEN WEBSITE
	Start-Process "https://sonnes.cloud"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"	
}

$myBlogToolStripMenuItem_Click={
	#OPEN WEBSITE
	Start-Process "https://blog.sonnes.cloud"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	#SHOW ABOUT	
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
	
	# ServiceComboBox
}

#region Control Helper Functions
function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]
		$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]
		$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember) 
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

$buttonAddSelectedAccessSco_Click={
	$selectedScopes = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
	$PermissionsTextBox.Text = $selectedScopes -join ", "
	
	# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	
	# $PermissionsTextBox
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	$filterText = $textboxSccessScopeToAssignFilter.Text
	$filteredItems = @()
	
	if ($filterText -eq "")
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>