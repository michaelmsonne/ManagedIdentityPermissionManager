<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJ0+SURBVHhe7P1VkCTp3qeJHYHJTJLZzpp0qQtd
6UYyyVamXZnNinc0s6aZb2C/+eDw6T59+pxmKMYsTGZmZmZmZmZm5uBIemSvR2ZVVlR1dVZ3F0X9
H7PHMjLCw8Mjwt3fX7z+wq9+JQiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiC8HN49F/+l/+i9Msvvyr18gkodXf3KXUTRVEURfG90t3Tp9THx6/0v//X/9/S
X/3qV8qX8y/+xX/R6OHtT+fYEsPzuwzObYuiKIqi+J45NLfD0MIujZ1D/Pt//x+wL++f4/PPvyrt
GlumaXCB2u4pantEURRFUXxf7ZraIq+k+scDgK9fYOn4so663mka+mZEURRF8cO2f5bmwXmah17N
poE57fmNA3M0Dc6/mmfPVa/9gnX/mOp5Z9vfMrJMU+fQjwcATy9fLQCoJ6sNOG/jgO2+zv51egfX
6RhceuFyoiiKougoqnKuuGGQgto+Cuv6L6RatrJ9jJahBao7xiht7KOsqf9Cljb1U946pL12fc/0
c+v+MQtq+6nrnqJ50Lb97WOr1Lf2XSwATKzoaRqYtyWeZ1ygfXCZ0KFM/trhR2pPD51Dy9pj6k0+
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
9XU6HVbXvnvLyZbV7Oexjo3vcLqt+5mBcHNzw+rmd245rW+V5pC51iF+neb8AKYxEOv+5mfT4W86
9N3b29Z1u39Ex5b7zYyBdW8ToNvDa9Pdv+mwHtP8rlkm55bHTEi3uvFd2zvsmC7/N4cMdrl32HFv
WQe5MfvFd6x5+S+tQxpbz717OOEtJx5rX7ZZBu85DBzm0MIe07gHW+ur3K+4SWVTFy8dbussd27n
JpsO7+Z187cyy2gey8wMMFPqzXOZmRRmWc1hkc0MC3MIYpfLjcfj8c6x39mitaGGoV85WZIKABUA
iqLsnfy8ADDN4rtjp7lsbv8ACwDvNDUzRc+csOft+yhvsm6zih5TTFgFy9u3/4Mxf3tTrJjB38zG
+PltKgBUACiKsneyWwCYy5OTkwwNDTE8PMzY2Ji1XvsgCwDlw4wZBM3guJ+Z4mZ2dtZ6vSoAFEXZ
y9ktAMw3/qamJtLS0qxUVVVZ6zJzuwoA5b1i3h9TACwvL1sfGPPzfop5TUtL5pgI89bP5jWrAFAU
Za9mtwAw6y0zwN+4cYOCggJmZmbY2PCewVYFgPJe2X1/nj9/zvj4OBMTE/sq5jWZ/xg/f80qABRF
2at5uwfArN/Mus4M/ub2D6oA2I/fKvdjzIfHfJj2Y3ar4t28bwGwvv7u51tRFOX3jBlTnU7nj7MA
dtfdP93+ARQAu/uWzZMryoeU3YbA/60AMI2q/QPDrKyssrZmCgVFUZQPI95BfsNaf719m8nq6pq1
/vrdCoDdysRsBTALoCgfUszn8q8XADaejk8yMDhibQlQFEX5sDLKyDvXeTM4OMLTp95dAmZ997sV
AG9vZlaUDyV/rQCwioCNjTexKYqi7KF4111mvfa7FACKshdiZgb8vAAwP7/9O4qiKHsxZt22O8Pr
/6wAMDFbABRlL0SfXUVR9nPeXsf9ywsARVEURVE+zKgAUBRFUZT/h1EBoCiKoij/D/NPKQDMgyiK
oiiKsndit71icfU3FABjczYWV9YVRVEURdlDebG6zvSLdYb/kQJgZNZmxVQPiqIoiqLsrZjB34zj
710ARETF3X3lwbqDoiiKoih7O3N26Bma+NsFwDn/Cw1DT5/T3jNiVQyKoiiKouzd9AxOcLem4W8X
ACIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiP/kfMZ2GeUoRwJkAAAAASUVO
RK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing ithems
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Determine the AppId based on the ServiceType
		switch ($ServiceType)
		{
			"Microsoft Graph" {
				$appId = '00000003-0000-0000-c000-000000000000'
			}
			"Exchange Online" {
				$appId = '00000002-0000-0ff1-ce00-000000000000'
			}
			"SharePoint" {
				$appId = '00000003-0000-0ff1-ce00-000000000000'
			}
			default {
				# Log
				Write-Log -Level INFO -Message "Invalid ServiceType specified. Valid values are 'Microsoft Graph', 'Exchange Online', 'SharePoint'."
				return
			}
		}
		
		# Get the service principal for the specified AppId
		Write-Log -Level INFO -Message "Retrieving service principal for AppId: '$appId'"
		
		# Get needed data
		$servicePrincipal = Get-MgServicePrincipal -Filter "AppId eq '$appId'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		# Check if returned data
		if ($null -eq $servicePrincipal)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found with AppId '$appId', Service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principal retrieved: AppId '$appId', '$($servicePrincipal.DisplayName)'"
		
		# Extract the permission scopes (AppRoles and Oauth2PermissionScopes)
		$appRoles = $servicePrincipal.AppRoles
		$oauth2PermissionScopes = $servicePrincipal.Oauth2PermissionScopes
		
		# Check if scopes assigned
		if ($appRoles.Count -eq 0 -and $oauth2PermissionScopes.Count -eq 0)
		{
			# Log
			Write-Log -Level INFO -Message "No assignable permission scopes found for service principal with AppId '$appId' service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Assignable permission scopes retrieved for AppId '$appId' service '$($servicePrincipal.DisplayName)'."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)'..."
		
		foreach ($role in $appRoles)
		{
			$roleDetails = "Role details: '$($role.DisplayName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		Write-Log -Level INFO -Message "Added all assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)' to the list for management."
		
		<#
		foreach ($scope in $oauth2PermissionScopes)
		{
			$scopeDetails = "Scope details: $($scope.AdminConsentDisplayName), ScopeValue: $($scope.Value), ScopeId: $($scope.Id)"
			$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)
		}
		#>
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

function Get-ManagedIdentities
{
	# Get all managed identities
	
	# Ckecl current data in list to not keep old
	$comboBox.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		# Get all data
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'"
		
		# Log
		Write-Log -Level INFO -Message "Loaded list Managed Identity from tenant."
		
		# Populate the ComboBox with managed identities
		foreach ($identity in $managedIdentities)
		{
			$comboBox.Items.Add($identity.DisplayName)
		}
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

$formManagedIdentityPermi_Load={
	#TODO: Initialize Form Controls here
	
	CheckLogPath
	
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	$global:darkModeStateUI = Is-WindowsInDarkMode
	
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	$ConnectedState = $false
	$clearExistingPermissions = $true
	#$darkModeSateUI = $true
	
	#$formServiceAccountsVXxxC.Text = "Service Accounts v. $FormVersion - Created by: $Author - Company: $AuthorCompany"
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	#$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	# Services to add to dropdown list
	$ServiceComboBox.Items.Add("Microsoft Graph")
	$ServiceComboBox.Items.Add("Exchange Online")
	$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check installed/loaded modules
			Check-Modules
			
			# Connect
			ConnectToGraph
			
			# If connected, set states
			if ($global:ConnectedState = $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState = $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}	
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:managedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $textboxselectedIdentityID.Text
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			# Log
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	#TODO: Place custom script here
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	#TODO: Place custom script here
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$microsoftGraphToolStripMenuItem_Click={
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}	
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	#TODO: Place custom script here
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	Write-Log -Level INFO -Message "User opened log folder: $LogPath"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: $LogPath"
	
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	if (Test-Path $logFilePath)
	{
		Start-Process $logFilePath
		Write-Log -Level INFO -Message "User opened log file for today: $logFilePath"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at $logFilePath." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		Write-Log -Level INFO -Message "Log file not found at $logFilePath - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"	
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click={
	$selectedScopes = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
	$PermissionsTextBox.Text = $selectedScopes -join ", "
	
	# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	
	# $PermissionsTextBox
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	$filterText = $textboxSccessScopeToAssignFilter.Text
	$filteredItems = @()
	
	if ($filterText -eq "" -or $null)
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>