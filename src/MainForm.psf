<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAADLwSURBVHhe7d13U9x3gufxfQ57z2Kv7qp29nZr
7+ruUVxtzT9XdbWhdq5mJ9ie8XgcZUu2JMvKORsFJJRQBJFzzqHJqaHJuaGhiZ+r77f5yegnbCON
aBDf97vqVZIIDYiG34fupvuv/oqIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIKNYH//AP/3D3xOlzd0+fu3T35JmLAADg
HXPu4tW7e/ftv/uf/vqv7/oP9Bv2i7/9RerTrGI19k6rvmdC9d3jAADgXROcVFNoWkdOnJX/WL9h
J0+fv9sUCiu3pku5NZ0AAGAT8mq6VFDfvSl5tV3Kq+lUfl33pngvX1D36mltxLy8eZ8KGnpV2RTc
3AA4f/Hq3eZQWPm13fYNFdYHrYLGARU0DquwcVAF9T2xdwIAAKiwvkf5tV1KLQootTAQ+/NHpBQ0
Kqey3b5eRmngZ6WXNCq3ut0el5+vO33z9/XWn352Zbt9n4oa+1Te2L25AXDm/KW7Lf0zKmwIqqgh
qMLqFhVWt6qwNF8F+c+UX5ynovpue6IlTSEVNwRVbP4eCNmXfx3m9Yobe1XU2Bv70zwtYJ7mf9nY
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
MAAAABYDwC0MAACAxQBwCwMAAGAxANzCAAAAWAwAtzAAAAAWA8AtDAAAgMUAcAsDAABgMQDcwgAA
AFgMALcwAAAAFgPALQwAAIDFAHALAwAAYDEA3MIAAABYDAC3MAAAABYDwC0MAACAxQBwCwMAAGAx
ANzCAAAAWAwAtzAAAAAWA8AtDAAAgMUAcAsDAABgMQDcwgAAAFgMALcwAAAAFgPALQwAAIDFAHAL
AwAAYDEA3MIAAABYDAC3MAAAABYDwC0MAACAxQBwCwMAAGAxANzCAAAAWAwAtzAAAAAWA8AtDAAA
gMUAcAsDAABgMQDcwgAAAFgMALcwAAAAFgPALQwAAIDFAHALAwAAYDEA3MIAAABYDAC3MAAAABYD
wC0MAACAxQBwCwMAAGAxANzCAAAAWAwAtzAAAAAWA8At6weA+bzPz89b5mkMAABwCAPALd4AMAf9
vr4+FRUVqbCwUB0dHXYUMAAAwBEMALesHwCDg4O6fv26zp8/r87OTkUicwwAAHAFA8At668CMNrb
29XQ0PDiKgEGAAA4Yv0ACIdn7MEBu1c4HNbc3Jy9BCAcNrcBmFM0GrsNgBkBnV09L84XDAAA2MXs
N/pwWC2t7eoJ9qkv1I9dLtQ/qP7+wVee3tsXUnNLmx2EDAAA2OW8ATA6NqZQaED9/djdzMF/o78P
KBTq18jIqD0/MAAAYJcbGhqy3+xHR0c0NjaqsVE4a2xUo6Oj9vxgzhfh6SkGAADsZuaGYcB65nzB
AAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAA
AMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADA
QQwAAAAcxAAAAMBBDAAAABzEAAAAwEEMAAAAHMQAAADAQQwAAAAcxAAAAMBBDAAAABzEAAAAwEEM
AAAAHMQAAADAQX/xAJiYnNJMOHZCAADg3TAbnlL/mw6A5lBYweFpuyD6AADAO8McuzsHw2odeo0B
cPFSwt2xRaltaF6tg/N2PQAAgHeLOfh3jS2rpXdicwPg8JGTKQOTc2rqGgYAAO+w1t4JNbT2bm4A
EBERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
EREREREREREREREREZET/X+XZP6hUk4GpgAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formManagedIdentityPermi_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formManagedIdentityPermi -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$buttonConnectToMicrosoftGr_Click={
	#TODO: Place custom script here
	
	Update-Log -Message "Starting check for needed PowerShell Modules..."
	
	Check-Modules
	
	Update-Log -Message "Check for needed PowerShell Modules complete"
	
	Update-Log -Message "Starting to connect to Microsoft Graph..."
	
	ConnectToGraph
	
	if ($ConnectedState = $true)
	{
		$labelConnectionStatus.Text = "Connected"
		$labelConnectionStatus.ForeColor = 'Green'
		
		Get-managedIdentities
	}
	else
	{
		$labelConnectionStatus.Text = "Not connected"
		$labelConnectionStatus.ForeColor = 'Red'
	}
}

function Get-ManagedIdentities
{
	# Get managed identities
	$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'"
	
	# Populate the ComboBox with managed identities
	foreach ($identity in $managedIdentities)
	{
		$comboBox.Items.Add($identity.DisplayName)
	}
}

#region Control Helper Functions
function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}


#endregion

$combobox_SelectedIndexChanged={
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:managedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $textboxselectedIdentityID.Text
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textBox.Text = "Assigned Roles: $roleDetails"
}

$SubmitButton_Click={
	#TODO: Place custom script here
	if ($radiobuttonAdd.Checked = $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Update-Log -Message  "ObjectID: $ObjectID"
		Update-Log -Message  "Service: $Service"
		Update-Log -Message  "Permissions: $Permissions"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Update-Log -Message "All fields are required."
			#[System.Windows.MessageBox]::Show("All fields are required.", "Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
			return
		}
		
		$Perms = $Permissions.Split(",")
		[psobject[]]$roleName = $Perms
		
		switch ($Service)
		{
			"MicrosoftGraph" {
				Add-MicrosoftGraphPermission -ObjectID $ObjectID -roleName $roleName
			}
			"ExchangeOnline" {
				Add-ExchangeOnlinePermission -ObjectID $ObjectID -roleName $roleName
			}
			"SharePoint" {
				Add-SharePointPermission -ObjectID $ObjectID -roleName $roleName
			}
		}
		
		#[System.Windows.MessageBox]::Show("Permissions assigned successfully.", "Success", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
		Update-Log -Message "Permissions assigned successfully."
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>