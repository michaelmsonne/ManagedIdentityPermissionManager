<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
u8XFBYypFZSvA9YG8anHyO0yjQx+kxXTvkZ4yYzx0VHtq3Tlfq0tat7yxTEyuE4eJ5+vm0yTWltk
gJ0M5JtU81lckgF3JoyOTWif0ZvVsuZmpzE6PqV9Pj81rjqUOdnosn6zaoOPa9/8N6vWa2raMi/L
oEf55sJVLJrntcF7s9NTGJ+Y0p44GRyotVO1bVytz9LqClrrC+AfEIXee9NYWlTz1Za3otZNLU9r
s2UdZLzB9KTaxjPyzYmLlg5uVr0grNtDbSM5m0K+9GhxbhwlxXkYHFbbUi1LniN5rr5JRtXrQP6j
yLZhAcAwzG6O7K+kAJBxX8PDwygpUQe8xcWoqanR+s8x1W/trEGAMjJfdZzS6Vmn1xq0OY9nGqfd
Z7lN5mW539KxWaax3G6Z5unjt05jubROt7ks7bHWaf/039pjNm+3nplgne5J+7fMd+t02z3myfUt
9z+5XV1abrMsUwYhytcOy2A9rf2b01mXZ32MdtuW9d1+e0gs0y+r4kSKA7lPXjzyopEXhTxnez1S
HEms24QFAMMwuznWAkDOFpO/KyoqoNPp0N7erh0cygHpzioAmB0Tea5MJhMePXr0jcjIyMgz684C
gGGY3RxrAaC9k6z6WznA6erq0u6T23fURwDMzow8T9+UWNf56xYAg0N3YFb/kbabF8MwzD8yss+S
77GR09XlXV4pBOQddmtRMD6+Az4CkKNMuZ1hdkqsr82vKgDk7+6efoyMjGqVNMMwzE7KiMqY6uSl
o5frW+8bGxvH0NBd3L5z7x9bAMjAK1kww+ykyOtSXrNfVQA8ejSi/gPd1apohmGYnZY7Wu5te7vs
u+Sr4qUv/ocUAHKbLJhhdlqks9/a6f/hdXntWt9KkwqaYRhmd8UyNkD2Z/JO/N+tAJDBCLLA7Xa8
DLOTIsWq9ewAKQDknYHtpmMYhtmNsXb+Ww9u/iYFgMR6FGV9q5VhdnLktSpFq/U/hhQEfP0yDLOX
Ivs0KQb+5gWANlO1EIbZTeFrl2GYvZ6t/bS2v1P5qxcADMMwDMPs7LAAYBiGYZhvYFgAMAzDMMw3
MH9xAbCgCgCZCcMwDMMwuyfzKi9UAPQ9Ug8ansdt9WCZAcMwDMMwuyv9qh8f/LoFQEysvmh6DRhS
D5AHSeXAMAzDMMzui/Tj92Yeo+fO+PMLAD//oKp7ozNatcAwDMMwzO5Oz50xtHT2Pr8AICIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiKiveVb3/p/p25l
EHPVJS4AAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	# Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		# Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	# Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
        Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
            SelectBackColor = selectBackColor;
        } 
        public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	# Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	# Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	# Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		# Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		# Set the text color
		if ($target.Tag -ne "DangerZone")
		{
			$target.ForeColor = $ForeColor
		}
		else
		{
			$target.ForeColor = [System.Drawing.Color]::Red
		}
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			# Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			# Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			# Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

# Function to update the label text
function Update-ItemCountLabel
{
	$labelAccessScopeItemCount.Text = "Access scopes: " + $checkedlistboxPermissionsToAssign.Items.Count
}

# Function to get assignable access scopes for services principals
function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType = "Microsoft Graph"
	)
	
	try
	{
		# Clear list for existing items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Log
		Write-Log -Level INFO -Message "Retrieving service principals..."
		
		# Get the service principals based on the ServiceType
		if ($ServiceType -ne "All services")
		{
			# Get the specific service principal
			$filteredServicePrincipal = Get-MgServicePrincipal -Filter "DisplayName eq '$ServiceType'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "Service principal retrieved for ServiceType: '$ServiceType'."
		}
		else
		{
			# Get all service principals
			$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "All service principals retrieved."
		}
		
		# Check if returned data
		if ($null -eq $filteredServicePrincipal)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Store the filtered service principal data in the global hashtable
		if ($ServiceType -ne "All services")
		{
			$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
		}
		else
		{
			$global:ServicePrincipalData = @{ }
			foreach ($sp in $filteredServicePrincipal)
			{
				$global:ServicePrincipalData[$sp.DisplayName] = $sp
			}
		}
		
		# Create a list of roles
		$roles = $filteredServicePrincipal | ForEach-Object {
			foreach ($r in $_.AppRoles)
			{
				[PSCustomObject]@{
					AppId	    = $_.Id
					DisplayName = $_.DisplayName
					Id		    = $r.Id
					RoleName    = $r.DisplayName
					Value	    = $r.Value
				}
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals retrieved - filtered and sorted data."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list..."
		
		# Store the master items globally
		$global:masterItems = @()
		
		# Loop all roles for adding to table
		foreach ($role in $roles)
		{
			$roleDetails = "'$($role.DisplayName)', description: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
			$global:masterItems += $roleDetails
			
			# Log
			#Write-Log -Level INFO -Message "Added assignable permission scope: $roleDetails"
		}
		
		# Update the label with the current item count
		Update-ItemCountLabel
		
		# Log
		Write-Log -Level INFO -Message "Added assignable permission scopes to permission list."
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered Managed Identities from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfManagedIdentity.Items.Clear()
			Update-ItemCountLabel
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				Initialize-MasterItems

				# Populate the ServiceComboBox with service principals
				Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

function Populate-ServiceComboBox
{
	try
	{
		# Log
		Write-Log -Level INFO -Message "Retrieving service principals..."
		
		# Get all service principals
		$allServicePrincipals = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		# Check if returned data
		if ($null -eq $allServicePrincipals)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Define the most used items in the desired order
		$mostUsedItems = @("Microsoft Graph", "Office 365 Exchange Online", "Office 365 Information Protection", "Office 365 SharePoint Online", "WindowsDefenderATP", "Microsoft Cloud App Security")
		
		# Populate the ComboBox with service names only if they have assignable roles
		$ServiceComboBox.Items.Clear()
		$ServiceComboBox.Items.Add("All services") # Add "All services" option
		
		# Sort the service principals
		$sortedServicePrincipals = $allServicePrincipals | Sort-Object {
			if ($mostUsedItems -contains $_.DisplayName)
			{
				[Array]::IndexOf($mostUsedItems, $_.DisplayName)
			}
			else
			{
				[Int32]::MaxValue
			}
		}
		
		# Populate the ComboBox
		$sortedServicePrincipals | ForEach-Object {
			if ($_.AppRoles.Count -gt 0)
			{
				$ServiceComboBox.Items.Add($_.DisplayName)
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals found in tenant is added to list of services to manage."
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving service principals: $_"
	}
}

function Filter-AssignableApiPermissionScopes
{
	param (
		[string]$filterText
	)
	
	try
	{
		# Clear the current items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Filter elements
		$filteredItems = @()
		if ($filterText -eq "" -or $null)
		{
			# If the filter text is empty, reset to all items
			$filteredItems = $global:masterItems
		}
		else
		{
			# Filter items based on the filter text
			foreach ($item in $global:masterItems)
			{
				if ($item -like "*$filterText*")
				{
					$filteredItems += $item
				}
			}
		}
		
		# Populate the CheckedListBox with the filtered items
		foreach ($filteredItem in $filteredItems)
		{
			$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
		}
		
		# Log
		#Write-Log -Level INFO -Message "Filtered assignable permission scopes with filter text: '$filterText'"
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error filtering permission scopes: $_"
	}
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "Managed Identity"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			[System.Windows.Forms.MessageBox]::Show("The following fields are required: $missingFieldsString", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "ObjectID"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			[System.Windows.Forms.MessageBox]::Show("The following fields are required: $missingFieldsString", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	$ObjectName = $textboxselectedIdentityName.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	# Get the selected service type
	$selectedServiceType = $ServiceComboBox.Text
	
	# Get data and get permissions
	Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
	
	# Get data and get permissions
	#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	#Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click = {
	
	# Initialize selected scopes array
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			#Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Check if any scopes are selected
	if ($selectedScopes.Count -gt 0)
	{
		# Log
		Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
		
		# Format data
		$PermissionsTextBox.Text = $selectedScopes -join ", "
		
		# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No access scopes selected to add"
		[System.Windows.Forms.MessageBox]::Show("No access scopes selected to add.", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
	}
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get the filter text
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	# Filter the assignable permission scopes
	Filter-AssignableApiPermissionScopes -filterText $filterText
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process "https://buymeacoffee.com/sonnes"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$currentSelectedManagedIdentityToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$exportAssignedPermissionsToolStripMenuItem_Click={
	
	$timestamp = Get-Date -Format "dd-MM-yyyy"
	
	# Get data needed for the export
	$ManagedIdentityID = $textboxselectedIdentityID.Text
	$ManagedIdentityName = $textboxselectedIdentityName.Text
	
	$selectedManagedIdentities = @()
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($checkedlistboxListOfManagedIdentity.GetItemChecked($i))
		{
			$selectedManagedIdentities += $checkedlistboxListOfManagedIdentity.Items[$i]
		}
	}
	
	# For export for selected Managed Identity (permissions)
	if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID) -or $selectedManagedIdentities.Count -gt 0)
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for selected Managed Identity '$ManagedIdentityName'"
		$saveFileDialog.FileName = "${ManagedIdentityName}_permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID))
			{
				# Call function to save data
				Export-ManagedIdentityPermissions -ManagedIdentityID $ManagedIdentityID -ManagedIdentityName $ManagedIdentityName -ExportFilePath $ExportFilePath
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for the selected Managed Identity '$ManagedIdentityName' (ID: $ManagedIdentityID) exported successfully." -Icon Information -BoxType OK
			}
			else
			{
				$exportedNames = @()
				foreach ($identity in $selectedManagedIdentities)
				{
					Export-ManagedIdentityPermissions -ManagedIdentityID $identity.Id -ManagedIdentityName $identity.Name -ExportFilePath $ExportFilePath
					$exportedNames += "$($identity.Name) (ID: $($identity.Id))"
				}
				$exportedNamesString = $exportedNames -join ", "
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for all selected Managed Identities '$exportedNamesString' exported successfully." -Icon Information -BoxType OK
			}
		}
	}	
	# For export for all Managed Identity (permissions)
	else
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for all Managed Identity´s"
		$saveFileDialog.FileName = "Managed Identity Permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			# Call function to save data
			Export-AllManagedIdentityPermissions -ExportFilePath $ExportFilePath
			
			Show-MsgBox -Title "Export" -Prompt "Permissions for all Managed Identities exported successfully." -Icon Information -BoxType OK
		}
	}
}

$microsoftGraphToolStripMenuItem_Click = {
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the Microsoft Graph permissions reference"
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process "https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
}

$buttonDefaultServiceToManage_Click={
	
	# Set default service in combobox
	$ServiceComboBox.SelectedIndex = 1
}

$buttonGetAllAccessScopes_Click={
	
	# Get data and get permissions
	Get-AssignableApiPermissionScopes -ServiceType $null
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
	
}]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>