<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
m+0b5jQ969ndaG93YFxyJjkysw0uLC7Zn/arjf1mObPy268ldk5r1q745mY16/XJv7ygiSnzP5nX
nG9By0sLmpn12kl2AhN5Bd+Hh23gRYwAQHQ8cgHgvNg4+zPbK3JALyTmThgaHlFPb7+dMcyZbAUP
3bEJdXR028HoTQPADEDmcPPRkX0smcfU7vn2Ps7slu72Z+C0rz4uAtonw8CAnS7anP6oaXYFDHxl
8t4AsIPxnttu74v9DMyWuPvzxf2y5/6yP+3lBYLg5RkWncN/3PAv+D48bAkAxJc9cgFwmJobOTEx
iUfI8YlJZyvzff5Xrw+At69ZtrlMs9+92eXOfP5+VDQzV5owCTyBXw6Aw9H8Pw5bs3vk3utEACC+
LAGwx8C7Gjx6Bv+vDjoAjGb55klhvjfC/DwqBq6PuY7mSbxfAJjrbjYWNDMHmtMHH/82NRshejwe
OwCbn4dh4LLNdQlcLwIA8WWPWADMa3HZr/W11VcmcPm5F3ezqtd8/mj2PV7f2NydSMj5VrfAccHL
RPd6GAHgBvcLgEDYmu9VKCkpsd+tEAiGwMRJZgps+/wze+OsmA0hF7X6C0Mh8Hw2/5ujQuD+CKzB
IQAQf/RIBYB58fFODKu2sU3+tU07MYmZGdDMYmaKfmVtw07qYr7Xe2N9zW7MZSYKMrs7rSzNa2Bg
RH7/kupKC5SWlqrWnnFtbe9oeX5WPX1D2th0ZhdcW1+3P80sZgexiyG+fQmA/d0vAMwTvKKiQjU1
NXY7ARMBZjdCsyZgaWVNk92NupeYrpXn0tzEoCrMBEobSyoprpDXfE3yPpezn4Hns/ndYPZUOEwN
5joFHicEAOLLHqkAWF3fUHdNgU5djNTgyKga6lrU39Otuqoa1de3qL2lWsU1jWpprFV5dYu8sxOq
bWySd35OeY/v6Mrdp9ra8OnahctKSIzVnbuP1d7ZrPKKfCU/ylJvf7u6h8fU3tSorp4hjQ2Pam6B
QcONEgD7GxwAzt4twyouLraDotmrwnwMkJuba1eRb2xuqqH4qY6d/EFNLXW6cfFbXbh1X08Sv9fn
Z6M0v7ZBACC+ox6pADDTkqbEXtVnn3+ly5fO6q+fH9cP587o4w+/0qmT5xUbH62rl87pi2/O625U
tL768C/6/Z/f1/HTF3T3znXdSMjS1uaCrpw9qx8uXNCly9eUGB+pS9e+16nvTupf//m/6Mvj5/X1
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAQKv8/qV0Y+r0tI1cAAAAASUVORK5CYII=</Preview>
  <Form>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
BCQsBDlCT3SUSO4dH3LWb/2r/wBTgybL0TkAAA==</Form>
  <Code><![CDATA[
$formManagedIdentityPermi_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formManagedIdentityPermi -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
}


#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

function Get-ManagedIdentities
{
	# Get managed identities
	$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'"
	
	# Populate the ComboBox with managed identities
	foreach ($identity in $managedIdentities)
	{
		$comboBox.Items.Add($identity.DisplayName)
	}
}

$buttonConnectMicrosoftGraph_Click = {
	
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			Disconnect-MgGraph
			$ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			Update-Log -Message "Disconnected from Microsoft Graph."
			
			$combobox.Items.Clear()
		}
		catch
		{
			Update-Log -Message "Error disconnecting from Microsoft Graph: $_"
		}
	}
	else
	{
		try
		{			
			Check-Modules
					
			ConnectToGraph
			
			if ($ConnectedState = $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				$ConnectedState = $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			Update-Log -Message "Error connecting to Microsoft Graph: $_"
		}
	}	
}

$combobox_SelectedIndexChanged={
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:managedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $textboxselectedIdentityID.Text
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textBox.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAdd.Checked = $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Update-Log -Message "Managed Identity ObjectID: '$ObjectID'"
		Update-Log -Message "Service: '$Service'"
		Update-Log -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Update-Log -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service
		
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>