<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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</Preview>
  <Form>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
KHt5bOqmsXmeqFeH5OOfzb//Px4J16VHGgMA</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	# Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		# Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	# Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
        Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
            SelectBackColor = selectBackColor;
        } 
        public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	# Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	# Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	# Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		# Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		# Set the text color
		if ($target.Tag -ne "DangerZone")
		{
			$target.ForeColor = $ForeColor
		}
		else
		{
			$target.ForeColor = [System.Drawing.Color]::Red
		}
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			# Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			# Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			# Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

# Function to update the label text
function Update-ItemCountLabel
{
	$labelAccessScopeItemCount.Text = "Access scopes found: " + $checkedlistboxPermissionsToAssign.Items.Count
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Managed Identityes found: " + $checkedlistboxListOfManagedIdentity.Items.Count
}

# Function to get assignable access scopes for services principals
function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType = "Microsoft Graph"
	)
	
	try
	{
		# Clear list for existing items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Log
		Write-Log -Level INFO -Message "Retrieving service principals..."
		
		# Get the service principals based on the ServiceType
		if ($ServiceType -ne "All services")
		{
			# Get the specific service principal
			$filteredServicePrincipal = Get-MgServicePrincipal -Filter "DisplayName eq '$ServiceType'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "Service principal retrieved for ServiceType: '$ServiceType'."
		}
		else
		{
			# Get all service principals
			$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "All service principals retrieved."
		}
		
		# Check if returned data
		if ($null -eq $filteredServicePrincipal)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Store the filtered service principal data in the global hashtable
		if ($ServiceType -ne "All services")
		{
			$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
		}
		else
		{
			$global:ServicePrincipalData = @{ }
			foreach ($sp in $filteredServicePrincipal)
			{
				$global:ServicePrincipalData[$sp.DisplayName] = $sp
			}
		}
		
		# Create a list of roles
		$roles = $filteredServicePrincipal | ForEach-Object {
			foreach ($r in $_.AppRoles)
			{
				[PSCustomObject]@{
					AppId	    = $_.Id
					DisplayName = $_.DisplayName
					Id		    = $r.Id
					RoleName    = $r.DisplayName
					Value	    = $r.Value
				}
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals retrieved - filtered and sorted data."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list..."
		
		# Store the master items globally
		$global:masterItems = @()
		
		# Loop all roles for adding to table
		foreach ($role in $roles)
		{
			$roleDetails = "'$($role.DisplayName)', description: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
			$global:masterItems += $roleDetails
			
			# Log
			#Write-Log -Level INFO -Message "Added assignable permission scope: $roleDetails"
		}
		
		# Update the label with the current item count
		Update-ItemCountLabel
		
		# Log
		Write-Log -Level INFO -Message "Added assignable permission scopes to permission list."
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered Managed Identities from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Populate-ServiceComboBox
{
	try
	{
		# Log
		Write-Log -Level INFO -Message "Retrieving service principals..."
		
		# Get all service principals
		$allServicePrincipals = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		# Check if returned data
		if ($null -eq $allServicePrincipals)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Define the most used items in the desired order
		$mostUsedItems = @("Microsoft Graph", "Office 365 Exchange Online", "Office 365 Information Protection", "Office 365 SharePoint Online", "WindowsDefenderATP", "Microsoft Cloud App Security")
		
		# Populate the ComboBox with service names only if they have assignable roles
		$ServiceComboBox.Items.Clear()
		$ServiceComboBox.Items.Add("All services") # Add "All services" option
		
		# Sort the service principals
		$sortedServicePrincipals = $allServicePrincipals | Sort-Object {
			if ($mostUsedItems -contains $_.DisplayName)
			{
				[Array]::IndexOf($mostUsedItems, $_.DisplayName)
			}
			else
			{
				[Int32]::MaxValue
			}
		}
		
		# Populate the ComboBox
		$sortedServicePrincipals | ForEach-Object {
			if ($_.AppRoles.Count -gt 0)
			{
				$ServiceComboBox.Items.Add($_.DisplayName)
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals found in tenant is added to list of services to manage."
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving service principals: $_"
	}
}

function Filter-AssignableApiPermissionScopes
{
	param (
		[string]$filterText
	)
	
	try
	{
		# Clear the current items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Filter elements
		$filteredItems = @()
		if ($filterText -eq "" -or $null)
		{
			# If the filter text is empty, reset to all items
			$filteredItems = $global:masterItems
		}
		else
		{
			# Filter items based on the filter text
			foreach ($item in $global:masterItems)
			{
				if ($item -like "*$filterText*")
				{
					$filteredItems += $item
				}
			}
		}
		
		# Populate the CheckedListBox with the filtered items
		foreach ($filteredItem in $filteredItems)
		{
			$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
		}
		
		# Log
		#Write-Log -Level INFO -Message "Filtered assignable permission scopes with filter text: '$filterText'"
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error filtering permission scopes: $_"
	}
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfManagedIdentity.Items.Clear()
			Update-ItemCountLabel
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				Initialize-MasterItems

				# Populate the ServiceComboBox with service principals
				Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "Managed Identity"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			
			Show-MsgBox -Title "Input Validation" -Prompt "The following fields are required: $missingFieldsString" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "ObjectID"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			
			Show-MsgBox -Title "Input Validation" -Prompt "The following fields are required: $missingFieldsString" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedRoles.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedRoles.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}	
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingScopes_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingScopes.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingScopes.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingScopes.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	# If connected
	if ($global:ConnectedState)
	{
		#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
		
		# Get the selected service type
		$selectedServiceType = $ServiceComboBox.Text
		
		# Get data and get permissions
		Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
		
		# Call this function once to initialize the master list
		Initialize-MasterItems
		
		# Get data and get permissions
		#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
		
		# Call this function once to initialize the master list
		#Initialize-MasterItems
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes"
	}
}

$buttonAddSelectedAccessSco_Click = {
	
	# Initialize selected scopes array
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			#Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Check if any scopes are selected
	if ($selectedScopes.Count -gt 0)
	{
		# Log
		Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
		
		# Format data
		$PermissionsTextBox.Text = $selectedScopes -join ", "
		
		# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No access scopes selected to add"
		
		Show-MsgBox -Title "Input Validation" -Prompt "No access scopes selected to add." -Icon Exclamation -BoxType OKOnly
	}
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get the filter text
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	# Filter the assignable permission scopes
	Filter-AssignableApiPermissionScopes -filterText $filterText
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process "https://buymeacoffee.com/sonnes"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$currentSelectedManagedIdentityToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$exportAssignedPermissionsToolStripMenuItem_Click={
	
	$timestamp = Get-Date -Format "dd-MM-yyyy"
	
	# Get data needed for the export
	$ManagedIdentityID = $textboxselectedIdentityID.Text
	$ManagedIdentityName = $textboxselectedIdentityName.Text
	
	$selectedManagedIdentities = @()
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($checkedlistboxListOfManagedIdentity.GetItemChecked($i))
		{
			$selectedManagedIdentities += $checkedlistboxListOfManagedIdentity.Items[$i]
		}
	}
	
	# For export for selected Managed Identity (permissions)
	if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID) -or $selectedManagedIdentities.Count -gt 0)
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for selected Managed Identity '$ManagedIdentityName'"
		$saveFileDialog.FileName = "${ManagedIdentityName}_permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID))
			{
				# Call function to save data
				Export-ManagedIdentityPermissions -ManagedIdentityID $ManagedIdentityID -ManagedIdentityName $ManagedIdentityName -ExportFilePath $ExportFilePath
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for the selected Managed Identity '$ManagedIdentityName' (ID: $ManagedIdentityID) exported successfully." -Icon Information -BoxType OK
			}
			else
			{
				$exportedNames = @()
				foreach ($identity in $selectedManagedIdentities)
				{
					Export-ManagedIdentityPermissions -ManagedIdentityID $identity.Id -ManagedIdentityName $identity.Name -ExportFilePath $ExportFilePath
					$exportedNames += "$($identity.Name) (ID: $($identity.Id))"
				}
				$exportedNamesString = $exportedNames -join ", "
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for all selected Managed Identities '$exportedNamesString' exported successfully." -Icon Information -BoxType OK
			}
		}
	}	
	# For export for all Managed Identity (permissions)
	else
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for all Managed Identity´s"
		$saveFileDialog.FileName = "Managed Identity Permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			# Call function to save data
			Export-AllManagedIdentityPermissions -ExportFilePath $ExportFilePath
			
			Show-MsgBox -Title "Export" -Prompt "Permissions for all Managed Identities exported successfully." -Icon Information -BoxType OK
		}
	}
}

$microsoftGraphToolStripMenuItem_Click = {
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the Microsoft Graph permissions reference"
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process "https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
}

$buttonDefaultServiceToManage_Click={
	
	# Set default service in combobox
	$ServiceComboBox.SelectedIndex = 1
}

$buttonGetAllAccessScopes_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data and get permissions
		Get-AssignableApiPermissionScopes -ServiceType "All services"
		
		# Call this function once to initialize the master list
		Initialize-MasterItems
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes"
	}
}

$ServiceComboBox_SelectedIndexChanged={
	
	# If connected
	if ($global:ConnectedState)
	{
		#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
		
		# Get the selected service type
		$selectedServiceType = $ServiceComboBox.Text
		
		# Get data and get permissions
		Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
		
		# Call this function once to initialize the master list
		Initialize-MasterItems
		
		# Get data and get permissions
		#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
		
		# Call this function once to initialize the master list
		#Initialize-MasterItems
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes"
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>