<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
f0XBwIomf+8A6JkIyDfrtwtinIiIiN6bzLF7aDqgvpnfMAASrialL2xJ/TMb6pvesOuBiIiI3q/M
wX94YUe9Y0t7GwAn4+Kzp5bX1T08S0RERO9xfWNL6ugb29sAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Ir/
HzT/ozYuHNAGAAAAAElFTkSuQmCC</Preview>
  <Form>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
PF/oif7TG7l3cshZv/Wu/g/ikurejDkAAA==</Form>
  <Code><![CDATA[
$formManagedIdentityPermi_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formManagedIdentityPermi -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
}

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

$buttonConnectMicrosoftGraph_Click = {
	
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			Disconnect-MgGraph
			$ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			Update-Log -Message "Disconnected from Microsoft Graph."
		}
		catch
		{
			Update-Log -Message "Error disconnecting from Microsoft Graph: $_"
		}
	}
	else
	{
		try
		{
			Update-Log -Message "Starting check for needed PowerShell Modules..."
			
			Check-Modules
			
			Update-Log -Message "Check for needed PowerShell Modules complete"
			
			Update-Log -Message "Starting to connect to Microsoft Graph..."
			
			ConnectToGraph
			
			if ($ConnectedState = $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				$ConnectedState = $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			Update-Log -Message "Error connecting to Microsoft Graph: $_"
		}
	}	
}

function Get-ManagedIdentities
{
	# Get managed identities
	$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'"
	
	# Populate the ComboBox with managed identities
	foreach ($identity in $managedIdentities)
	{
		$comboBox.Items.Add($identity.DisplayName)
	}
}

$combobox_SelectedIndexChanged={
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:managedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $textboxselectedIdentityID.Text
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textBox.Text = "$roleDetails"
}

$SubmitButton_Click={
	#TODO: Place custom script here
	if ($radiobuttonAdd.Checked = $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Update-Log -Message  "ObjectID: $ObjectID"
		Update-Log -Message  "Service: $Service"
		Update-Log -Message  "Permissions: $Permissions"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Update-Log -Message "All fields are required."
			#[System.Windows.MessageBox]::Show("All fields are required.", "Error", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Error)
			return
		}
		
		$Perms = $Permissions.Split(",")
		[psobject[]]$roleName = $Perms
		
		Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Scope $roleName -ServiceType $Service
		
		<#
		switch ($Service)
		{
			"MicrosoftGraph" {
				#Add-MicrosoftGraphPermission -ObjectID $ObjectID -roleName $roleName
				
				Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Scope $roleName -ServiceType $Service
			}
			"ExchangeOnline" {
				Add-ExchangeOnlinePermission -ObjectID $ObjectID -roleName $roleName
			}
			"SharePoint" {
				Add-SharePointPermission -ObjectID $ObjectID -roleName $roleName
			}
		}
		#>
		
		#[System.Windows.MessageBox]::Show("Permissions assigned successfully.", "Success", [System.Windows.MessageBoxButton]::OK, [System.Windows.MessageBoxImage]::Information)
		Update-Log -Message "Permissions assigned successfully."
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>