<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
OtF1Vs3VjTrf16P9MbuUU1Cs8vxynenrV1tlmVISknXu8l31dNcpfE+kYiPjVFJfr7DoMB08VKPd
8ZFKys1QU+lhd/ZfosTondqxNU5HOi7oQmebslKzlbA3TmUV1SrNL3brjFWCr1rz90eUnpqklubD
ik/Yo6Kio7Lz66XJm8rPLNWYO3v+JgqAL5/n9MZf6CP1nD+leatmfsdHuuCmzT132m8LvHPwVUMB
QAh5kWLHq1VVAFhm/Pbf56bdrV9Tbtr0tM0/Lf/0pG5cv65Jf+AAbfPNuPvTNq/buKnJ4H92c8tz
65yydcwtaGz4tq5evx2Y15bnptsy7SuER+4M6erQXe9rhKen/N7tjetXdOfDCa99s/4pXR0c1PDo
hFu/a5dbh39m1hs/cPPqoO6OTml8xC3/xq2ny3Vtduu1rzAe+fCWrg/debpev7fu8bF7ujcy7v0j
oxtXr+ju8LgmxoY1dPMD3X8wE9g+N68NdjzVUqKNv47QmUu33C/xvlv+lDcY8tbQVd3+cFKL910h
MjCg0QnbD1Oadu2ysQ1Tk+Man5j0PlKxcQyTrs02sHD5Pv6i2P79ugWAdaSffLIgX3S4dkTvUH51
k9uWQ9oeGa3knDJVZKcqMjZOibujtSV0i8IjwhXh5mvoPKPaynxVVZZ6n9uXNLervDBdYeFROn6u
T1VleTpxolWJcdGuSMrTsaYahb0TrqjENDW6wi0yNFR7sso0vfTEa8Pz2vZ5oQAghLxIsePVqisA
rOPyRvc/u33gzWu3wZH/3rK8x2yeT28DCRyovcfdfN4VA24D7z9d5rNbt7yH3hUCgRH3Nr/dzrvO
e96tZ9FG/bvYFQRzc25Z7nnBZXrz2eO2Pm/584HnLNoo/0D7bL22Y236w4eLgTa6X4bXPtch2yDB
pUWbHvhs+4Gbbh+lP/bmnZXfFTizbv4FV5QE22u31j5rjxUwtj+sDdbBW9tsuTby365UsPbMW7tt
vsXFz/weAnH7yLXN2uz9K2bvaoHANFvP1y4AvGdM6D//7gcqrq7RT/7hb/Rn3/8LvfrWFq15e73+
7W//XomVzQr7yY+1LXK3fvTjf1bs7ij9+8uv6pWXf6iN2yL081d+qldfXqP1oSH6yX/8t8I3R+mV
n/6TfvDDf9Guokolhb+mv/z+n2ttSIxiotbpH196WW+HvKYf/evP1D045rXgeW37vFAAEEJepNjx
apUVAA+8S9hs1H7wn/s8fvTIG2Fvo/1thP2TJzbdRu8/1M3Ba5r0z7uD98feVQFPnnysx4/ndX3g
mmbml56O8LcR+YErAbx5XC9rI+sfPpxXe90hdV685nUYD20+b55FTY2O6sq7fTrS3KkF16Mtuc40
uAzbHjvDt6sAbN6Hrm3mzuVL6u7q9zpA79JD1+naiP3FmUkNDt7UQ9su1x573N6mvnC8VZeujGr6
g153phyj2SdSfX6ysms6veV5bXftfGKX9LlOfd511rb9dtmfXfZoZ/vedrj9413lsLjkFmvb1KRh
/5zOt7aq5/Jdt6QnOlHfpFsjD9z0j57tD/tsfXZiRFfcvrp1/YauXLmpuaWHrihZ8gqmiYk/pACY
0kt//Vd6Y1OEDtbU62hdiXbHJaqotknFaek62X9D9blZauvoVm5epro7jinZl+vuJ6mypk5xcTHa
vXOfDhwsUvyOCGVnH1R2boqam+sVvydSCRnpqijKV2V1uzpaahSXkq3M1ASFbtyuyx/O8A4AIeQ7
HzterZoC4P5911D/qKoP5CrdV6qrV4Z0qChPB8rrdO5Eu8oPVnqD4nKzc1RcUKC6ox0avDSgzuPN
ykj2qa+nVwU++xz/pH7TN6CL57uVlpiu0z3vqrW6Qpm5Req52Kvc1P067jrqJwvD2vCLNSqsalSh
L1MdZ3rVUlWh9p5runbuiN76xVpt2xKttLxiDVy/qVrXlpzCSk3MzOnutT6lJOxTT++Auo7UyZdd
pPbGRtVXHVNrY5Uy80o1+P5vVJRToMKcFG1Yt1PHThxTaqJP7w1e1bHDFdq4NkRd743LP9St//mv
l3T8bL8iQ15VTFmLerrqlJFR5rbjXR3MzFBpbYtuDL2n7PQUdZ+6rPfOdmj/vmR1nX5XLYfK3bbZ
/rqqqsIUbQoJ1/DcIx0tKFRt80k1VuYodP02dZ48r8zEZLV3n1ZbbY3bllLVFGRpvWtb79kuvfHy
z1TQeFID/b3qH7zjfieBjy3M8zrM3xvXkX7y8Zway6t12x/4op8/tee26wtCAUAIeZFix6vVUwA8
WNDsh5cVE+06qZbD2rD2f/Wr1zcoeud2RW+JVVVZlfbHp6isME+FB0p0IDNducklrljI0IbN4cpM
82lb9HYlJqWpNLVQ22L2qvNElxKiNihql09VFcWK37VP4VFbtT+lWEuP53QgPkHrI1zn3HFKvr1h
2rw+RgPuTPnuu6e0LypWyRl5OlRVrvD1m7Rm7XqFb35HfTenNOAKhJBNoUqK2ePaGKLobaFKSy9U
wd4Evbb2Te2I2Kot26JUe6zXFQhVSoiM1Rvr3lbUtq0KC9us3OoWlaSmqv3iPY1e6VZ6UqzCf71V
cQmpyqusVXFxmtb9co2iNu9UVmGxitLTlV1wUJFbN2j9L9/2Pus+1tSkbes26Ff/F+Ktb9OWSNUe
bVdGzH7dmV1SV0W5QrdEqbL5uMpTk/XmmyHauHGr9sZGaffudFVVl2rn+iilp+aqzJevpLgU7UuK
U9iOeF27514sNq7g6xQAXryneYKPfZWz8uXz/u7zvvrZ/ZcJBQAh5EWKHa+WFwB2rAoer1ZkATA3
ek3hIZu0Ny1H7cfalZ+ZquKKOjVWN+vs2R61NJ1Qf2+f+nr71dlcr4bKNh1pa9GO2O0qP2xn4klK
OeBTe1O3GutdxxuToMrKajU3n9L7F8/pUGWDkjPjlFpc4n2zX1tNoxrc8xJdsVBWUaWa8mYNP3gk
/53LriPdpZKaTl1+97wOldYqPydNeYVVGvU/0O0bl7QzLlL5FaWqKC5UZs5BdR7r0vHDbTp4INP7
L4Qnj3UoMT5ZVQ2HVOTLdGfc+crw5aqzvUtFGRmK2hGr3htTGrt+Ts1Hj6r3wgWdOX1GlXW1yihM
0974fcrLKNGZ3vfU03ZEvvxcxSTEepcJlh0oVujaECWmHFR5SZ63vs7W48rcl6Bd8Rkan3+knpYW
1VTWKzclSfH7faqrr1fy/iQdbW5R0+EuvX+pV4cKipSdnub2VZuqy0vk2+/2TV6dXJf4tccArNZQ
ABBCXqTY8Wp5AWB9rsWOWSuvALg/p5mxu2ptatfd6Vk9evRY/ukJjU8GRsUHG223wfs2qM7+w9/k
xKT3ufiUbcCDwOC7hYU5jbkNtK8D9gbxuefY4zaPDX6zDfO+RnhxXuOjo95X6dp0ry1u2fbFMTa4
zp5nn6/7/ZNeW2yAnQ3km3TLWVi0AXd+jY5NeJ/Rz7t13Z+d1uj4lPf5/NS461Du20637Zt1O3zc
++a/WbddU9OBZQUGPdo3Fz7SwvwDb/De7PSUxiemvF+cDQ702unaNu62Z/HRQ13oqlVcfLoGb09r
ccEt11vfQ7dtbn1emwPbYOMNpifdPp6xb05cCHRws+4FEdwfbh/Z1RT2pUcL98fV2FCjG8NuX7p1
2e/IflffJaPudWB/KLZvKAAIIas5dryyAsDGfQ0PD6ux0Z3wNjSoo6PD6z/HXL+1sgYB2sh813Fa
pxec32vQ02V8pnHetMBjtqzA9EDHFpgn8Hhgnk+fv3yewG1wvqfr8p4bnPf3/+w95+njwSsTgvM9
a/+y5S6f73nPeXZ/2fRnj7vbwGOBddogRPvaYRus57X/6XzB9QWf4z22bHufvz8sgfmXXHFixYFN
sxePvWjsRWG/sxc9VhxZgvuEAoAQspoTLADsajH7ubW1VT6fT319fd7JoZ2QrqwCgKyY2O/K7/fr
3r1734mMjIx8ZtspAAghqznBAsB7J9n1t3aC09/f702zx1fURwBkZcZ+T9+VBLf5yxYAN4Zuad79
IT1vWYQQ8m3Gjln2PTZ2ubq9y2uFgL3DHiwKxsdXwEcAdpZpjxOyUhJ8bX5eAWA/Xx64qpGRUa+S
JoSQlZQRlzHXyVtHb/eXTxsbG9fQ0Ae6eev2t1sA2MArWzEhKyn2urTX7OcVAPfujbg/oA+8KpoQ
QlZabnm5/dzH7dhlXxVvffG3UgDYY7ZiQlZarLNf3un/9n177QbfSrMKmhBCVlcCYwPseGbvxP/J
CgAbjGArfN6Bl5CVFCtWg1cHWAFg7ww8bz5CCFmNCXb+y09u/igFgCV4FhV8q5WQlRx7rVrRGvzD
sIKA1y8h5EWKHdOsGPijFwDeQt1KCFlN4bVLCHnRs7yf9o53Lt94AUAIIYSQlR0KAEIIIeQ7GAoA
Qggh5DuYP7gAmHMFgC2EEEIIIasnD1y+VgFw5Z570vAD3XRPtgUQQgghZHXlquvHb3zZAiAzK7d+
+rE05J5gT7LKgRBCCCGrL9aP3575RAO3xr+4AIiNSzh2e3TGqxYIIYQQsrozcGtMPZcGv7gAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPBi+d73/h8p2Aqjir1acwAAAABJ
RU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	# Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		# Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	# Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
        Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
            SelectBackColor = selectBackColor;
        } 
        public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	# Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	# Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	# Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		# Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		# Set the text color
		if ($target.Tag -ne "DangerZone")
		{
			$target.ForeColor = $ForeColor
		}
		else
		{
			$target.ForeColor = [System.Drawing.Color]::Red
		}
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			# Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			# Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			# Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

# Function to update the label text
function Update-ItemCountLabel
{
	$labelAccessScopeItemCount.Text = "Access scopes: " + $checkedlistboxPermissionsToAssign.Items.Count
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Get the service principals based on the ServiceType
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			# Log
			Write-Log -Level INFO -Message "Retrieving access scopes for '$ServiceType'..."
			
			# Get the specific service principal
			$filteredServicePrincipal = Get-MgServicePrincipal -Filter "DisplayName eq '$ServiceType'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "Service principal access scopes retrieved for service: '$ServiceType'."
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Retrieving access scopes for all service principals..."
			
			# Get all service principals
			$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "All service principals access scopes retrieved."
		}
		
		# Check if returned data (exclude if "All services")
		if ($null -eq $filteredServicePrincipal -and $ServiceType -ne "All services")
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Store the filtered service principal data in the global hashtable
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
		}
		else
		{
			$global:ServicePrincipalData = @{ }
			foreach ($sp in $filteredServicePrincipal)
			{
				$global:ServicePrincipalData[$sp.DisplayName] = $sp
			}
		}
		
		# Create a list of roles
		$roles = $filteredServicePrincipal | ForEach-Object {
			foreach ($r in $_.AppRoles)
			{
				[PSCustomObject]@{
					AppId	    = $_.Id
					DisplayName = $_.DisplayName
					Id		    = $r.Id
					RoleName    = $r.DisplayName
					Value	    = $r.Value
				}
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals retrieved - filtered and sorted data."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list..."
		
		# Loop all roles for adding to table
		foreach ($role in $roles)
		{
			$roleDetails = "'$($role.DisplayName)', description: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		# Update the label with the current item count
		Update-ItemCountLabel
		
		# Log
		Write-Log -Level INFO -Message "Added assignable permission scopes to permission list."
		
		# Define the most used items in the desired order
		$mostUsedItems = @("All services", "Microsoft Graph", "Office 365 Exchange Online", "Office 365 Information Protection", "Office 365 SharePoint Online", "WindowsDefenderATP", "Microsoft Cloud App Security")
		
		# Populate the ComboBox with service names only if they have assignable roles
		if ($ServiceComboBox.Items.Count -eq 0)
		{
			# Sort the service principals
			$sortedServicePrincipals = $filteredServicePrincipal | Sort-Object {
				if ($mostUsedItems -contains $_.DisplayName)
				{
					[Array]::IndexOf($mostUsedItems, $_.DisplayName)
				}
				else
				{
					[Int32]::MaxValue
				}
			}
			
			# Populate the ComboBox
			$ServiceComboBox.Items.Add("All services")
			$sortedServicePrincipals | ForEach-Object {
				if ($_.AppRoles.Count -gt 0)
				{
					$ServiceComboBox.Items.Add($_.DisplayName)
				}
			}
		}
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

<#
function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Log
		Write-Log -Level INFO -Message "Retrieving service principals..."
		
		# TODO Better code... If you know to make it better, let me know!
		
		# Get the service principals based on the ServiceType
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			# Get the specific service principal
			$filteredServicePrincipal = Get-MgServicePrincipal -Filter "DisplayName eq '$ServiceType'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "Service principal retrieved for ServiceType: '$ServiceType'."
		}
		else
		{
			# Get all service principals
			$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "All service principals retrieved."
		}
		
		# Check if returned data (exclude if "All services")
		if ($null -eq $filteredServicePrincipal -and $ServiceType -ne "All services")
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Store the filtered service principal data in the global hashtable
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
		}
		else
		{
			$global:ServicePrincipalData = @{ }
			foreach ($sp in $filteredServicePrincipal)
			{
				$global:ServicePrincipalData[$sp.DisplayName] = $sp
			}
		}
		
		# Create a list of roles
		$roles = $filteredServicePrincipal | ForEach-Object {
			foreach ($r in $_.AppRoles)
			{
				[PSCustomObject]@{
					AppId	    = $_.Id
					DisplayName = $_.DisplayName
					Id		    = $r.Id
					RoleName    = $r.DisplayName
					Value	    = $r.Value
				}
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals retrieved - filtered and sorted data."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list..."
		
		# Loop all roles for adding to table
		foreach ($role in $roles)
		{
			$roleDetails = "'$($role.DisplayName)', description: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		# Log
		Write-Log -Level INFO -Message "Added assignable permission scopes to permission list."
		
		# Define the most used items in the desired order
		$mostUsedItems = @("All services", "Microsoft Graph", "Office 365 Exchange Online", "Office 365 Information Protection", "Office 365 SharePoint Online", "WindowsDefenderATP", "Microsoft Cloud App Security")
		
		# Populate the ComboBox with service names only if they have assignable roles
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			# Ensure the ComboBox retains all service principals
			if ($ServiceComboBox.Items.Count -eq 0)
			{
				$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
				
				# Sort the service principals
				$sortedServicePrincipals = $filteredServicePrincipal | Sort-Object {
					if ($mostUsedItems -contains $_.DisplayName)
					{
						[Array]::IndexOf($mostUsedItems, $_.DisplayName)
					}
					else
					{
						[Int32]::MaxValue
					}
				}
				
				# Populate the ComboBox
				$ServiceComboBox.Items.Add("All services")
				$sortedServicePrincipals | ForEach-Object {
					if ($_.AppRoles.Count -gt 0)
					{
						$ServiceComboBox.Items.Add($_.DisplayName)
					}
				}
			}
		}
		else
		{
			# Add all service principals
			$ServiceComboBox.Items.Clear()
			
			# Sort the service principals
			$sortedServicePrincipals = $filteredServicePrincipal | Sort-Object {
				if ($mostUsedItems -contains $_.DisplayName)
				{
					[Array]::IndexOf($mostUsedItems, $_.DisplayName)
				}
				else
				{
					[Int32]::MaxValue
				}
			}
			
			# Populate the ComboBox
			$ServiceComboBox.Items.Add("All services")
			$sortedServicePrincipals | ForEach-Object {
				if ($_.AppRoles.Count -gt 0)
				{
					$ServiceComboBox.Items.Add($_.DisplayName)
				}
			}
		}
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}
#>

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered Managed Identities from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	# Services to add to dropdown list (more to add soon when tested..)
	#$ServiceComboBox.Items.Add("Microsoft Graph")
	#$ServiceComboBox.Items.Add("Exchange Online")
	#$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				Initialize-MasterItems
				
				# Populate the ComboBox with service names
				Get-AssignableApiPermissionScopes -ServiceType "All services"
				
				# Set default service in combobox
				$ServiceComboBox.SelectedIndex = 1
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "Managed Identity"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			[System.Windows.Forms.MessageBox]::Show("The following fields are required: $missingFieldsString", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "ObjectID"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			[System.Windows.Forms.MessageBox]::Show("The following fields are required: $missingFieldsString", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	$ObjectName = $textboxselectedIdentityName.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	# Get the selected service type
	$selectedServiceType = $ServiceComboBox.Text
	
	# Get data and get permissions
	Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
	
	# Get data and get permissions
	#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	#Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click = {
	
	# Initialize selected scopes array
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			#Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Check if any scopes are selected
	if ($selectedScopes.Count -gt 0)
	{
		# Log
		Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
		
		# Format data
		$PermissionsTextBox.Text = $selectedScopes -join ", "
		
		# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No access scopes selected to add"
		[System.Windows.Forms.MessageBox]::Show("No access scopes selected to add.", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
	}
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get data fo filter function
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	$filteredItems = @()
	
	# Filter elements
	if ($filterText -eq "" -or $null)
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process "https://buymeacoffee.com/sonnes"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$currentSelectedManagedIdentityToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$exportAssignedPermissionsToolStripMenuItem_Click={
	
	$timestamp = Get-Date -Format "dd-MM-yyyy"
	
	# Get data needed for the export
	$ManagedIdentityID = $textboxselectedIdentityID.Text
	$ManagedIdentityName = $textboxselectedIdentityName.Text
	
	$selectedManagedIdentities = @()
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($checkedlistboxListOfManagedIdentity.GetItemChecked($i))
		{
			$selectedManagedIdentities += $checkedlistboxListOfManagedIdentity.Items[$i]
		}
	}
	
	# For export for selected Managed Identity (permissions)
	if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID) -or $selectedManagedIdentities.Count -gt 0)
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for selected Managed Identity '$ManagedIdentityName'"
		$saveFileDialog.FileName = "${ManagedIdentityName}_permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID))
			{
				# Call function to save data
				Export-ManagedIdentityPermissions -ManagedIdentityID $ManagedIdentityID -ManagedIdentityName $ManagedIdentityName -ExportFilePath $ExportFilePath
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for the selected Managed Identity '$ManagedIdentityName' (ID: $ManagedIdentityID) exported successfully." -Icon Information -BoxType OK
			}
			else
			{
				$exportedNames = @()
				foreach ($identity in $selectedManagedIdentities)
				{
					Export-ManagedIdentityPermissions -ManagedIdentityID $identity.Id -ManagedIdentityName $identity.Name -ExportFilePath $ExportFilePath
					$exportedNames += "$($identity.Name) (ID: $($identity.Id))"
				}
				$exportedNamesString = $exportedNames -join ", "
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for all selected Managed Identities '$exportedNamesString' exported successfully." -Icon Information -BoxType OK
			}
		}
	}	
	# For export for all Managed Identity (permissions)
	else
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for all Managed Identity´s"
		$saveFileDialog.FileName = "Managed Identity Permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			# Call function to save data
			Export-AllManagedIdentityPermissions -ExportFilePath $ExportFilePath
			
			Show-MsgBox -Title "Export" -Prompt "Permissions for all Managed Identities exported successfully." -Icon Information -BoxType OK
		}
	}
}

$microsoftGraphToolStripMenuItem_Click = {
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the Microsoft Graph permissions reference"
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process "https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
}

$buttonDefaultServiceToManage_Click={
	
	# Set default service in combobox
	$ServiceComboBox.SelectedIndex = 1
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>