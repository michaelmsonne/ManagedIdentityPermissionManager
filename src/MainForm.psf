<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
O2uvvhjpqtOBvft1+HC2mjq65PP7NTjUr8qqKtU2Nqqto1P19Y1qbmqVz9enPn+36mvq1drWodaW
WvUMD6u1vkaNbT328Ndgj08dvgGN9PtUXtmgsdF+1TTUKzAyqCdPKhSam1Vfd4v8w2M2nCYvJ7rT
xHpDAECva34PiQBg2q1VVVVZ/X6/bYT+XgOAmZlpAGiuAhgfn1R0flznj6fr+507tGtPqm5fvWh7
3jId7hw9nKpLFwuUsXub/vS3bTqfl6PM41n66pOP9OfPvtThY6lKSzusc3drtDQ3opQ9u3X6bJb2
HTikzz7+oz757HNt/W6/stOO6eOPv1ZmZqr++retyjl9WsfSs9Xm79fdvGx9+fVuZR7Zr4/+vE1n
z59R7ulM7dy1S1u/2qqvt36nHd/vUd6VGzp9ZLf+zf/9D9p1IE2ZaWnKPZWplGP79f2ugzqSYjoE
GtP87LS9DDC5W0X8dZr1JbH+mP9tN5Uz8xr112vrlq26cq9QKTu/0p8//Zu2bv1e336zXV9v+167
9xzUvoNp2v/9Nu3YkaL932/X11v2av+BQzp7Llu79+7Svr2HlJp2WmMz87qYvluff75LxzOzVXjr
vnIzjynnTKa2btunEyfP6kjKXv3ln/6Dth7K1WRkUZOvWFZ0n2b9MdsdU/jN/wQA9KqJAJAYBTMx
lo09BfC+2wCYmZkuBuN9DEcUmx/T9ctXdOXiRZ06n6fD2w7om8+/0l+3H5Ovu1OZ+w9rz5ad+ts3
O3Tu/EkdPnRQO77ZqmPZucrJOaGUg7t1pbBGi3OjSjt0UCey03TI9JS39Tsdy0hXzoU7amuq1A87
ftTxrEzt3p+l0pJr+nrPfi0/e6orJ44p9fQdNVUWas/hXBXezdfx7DTtOZimy1dv6erlfN28cUO5
aRna/80P+vjzb3QsI1vHjqYq92SmDqcc1KVbZXpcXKiqln4txiKbPnD8dSaKvllxN96OLCxqsLNe
Fwsemc4kdObQDzpw9Jiycs7r+o27unTpugouX9SPuw8p99gx7dyxR8dTUvTF599oz/4UnTl7XHv2
HtCDx7UqvHNH/eOzKs7L0ZdffqPUtEzdKbijU9lpyj19Qtu37lLa8ZPKOHZEP27fptMFRZpdiI/P
kLy86C4TOx1mu0MAQK+7MQBsPDpmdDgAzNvz5qbjm+jikmamJhXo71dTU7MGAkH7mPGxkDpbW+xo
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
dD8wGbZpAREREX/bmuLf2Nbz+gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAADvmP8frEGF0dHh+VYAAAAASUVORK5CYII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formManagedIdentityPermi_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formManagedIdentityPermi -Theme Dark
	
	$ConnectedState = $false
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
}


#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

function Get-ManagedIdentities
{
	# Get managed identities
	
	$comboBox.Items.Clear()
	
	if ($ConnectedState = $true)
	{
		Update-Log -Message "Loading list of Managed Identity from tenant..."
		
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'"
		
		Update-Log -Message "Loaded list Managed Identity from tenant."
		
		# Populate the ComboBox with managed identities
		foreach ($identity in $managedIdentities)
		{
			$comboBox.Items.Add($identity.DisplayName)
		}
		Update-Log -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	if ($ConnectedState = $false)
	{
		Update-Log -Message "Not connected - can´t load list of Managed Identity´s"
	}
	
}

$buttonConnectMicrosoftGraph_Click = {
	
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			Disconnect-MgGraph
			$ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			Update-Log -Message "Disconnected from Microsoft Graph."
			
			$combobox.Items.Clear()
		}
		catch
		{
			Update-Log -Message "Error disconnecting from Microsoft Graph: $_"
		}
	}
	else
	{
		try
		{			
			Check-Modules
					
			ConnectToGraph
			
			if ($ConnectedState = $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				$ConnectedState = $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			Update-Log -Message "Error connecting to Microsoft Graph: $_"
		}
	}	
}

$combobox_SelectedIndexChanged={
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:managedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $textboxselectedIdentityID.Text
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAdd.Checked = $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Update-Log -Message "Managed Identity ObjectID: '$ObjectID'"
		Update-Log -Message "Service: '$Service'"
		Update-Log -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Update-Log -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service
		
	}
}

$buttonGetCurrentPermission_Click={
	#TODO: Place custom script here
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	#TODO: Place custom script here
	Get-managedIdentities
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>