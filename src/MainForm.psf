<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
PS6t1dOiCj0sqrYv8MHj53pW3qQXFfV6UlKtZy9rdLegUM8qGlT4sloPC6vUMDiu0upmFVY26mlx
pR6X1Ohx4UvlF1boSXGVHtq/ZSp4UamSulbdf/RCD19UqaS+U8U1rarv9+nFyyobJoqqW/TwSaEK
iqv0uMg8X60ePn+pRy8q9Li4Ws8rm1VYVqcnpbW2SePJyzqV1rXr+cs6u+6LqkY9LalWwdNSFdcP
qLnfqYLHL2xVzPOX5XryslnFVbXKf15uX0vBs5cqrutRYWmZCorM8zfrcXGVnpXVKf/hMz1+WWP3
v6p7VE0DfjX2mw8UERE/BZsHx2wVvCncTQFc0jikKzfzVVFZo8qqOuXnP9Htx1Wq6/GpqsOt0sZB
PXzZan9wNg9OqHVkWvkv6pWXl6+TZ67o2vVc3cl7aLfTNDBu1zE/oM1jSur77Y/Jmu5R5T6r0dVr
uerr6dHFK7d1v6hBtd2jtqnaNE08Kmu3ZU7L8KQau0Y+LgA4p1fUPDSuNndAZS9e6u43n+vCtef6
7PqC0u70qq27X23OaVU1t6uosllPSipVXNem5yU1KnhapEfFFSqu7VJ5Y4eeFFcr/8kLPSmtsQX1
87IaPXpRrofFtSqpalRheZ0eF9eoaWRK5bXm/joVvqzV09IqW2gX1rSqsLzB9kF4XlqtF9UtKq4x
z1mtsqYBFZVV6HlNtzrd03pRWqmShiE19w0r/9ELFdW1qbCiWWX1HSqt71RJTZvKm7r0uKhSRdVt
KiyrVlGtKdSr9bSsTs9KqlRY0aTimkYbWMobOlRU3aXmQZdeVDTp+csqFVY3q6i8Tk+KTBgpi6zX
1KNnxVV6VFiiR8WVelFt9rlOT4orVPCsTCW1zSqsaFWrY8YeKC1D44iI+InYNjKppxWdkT5inR7b
af7ijQe6m/9U9wqe6/L1u8ovalRdr1/VnR5bU/CkvF3V7cNqHZqyAcB03Dt/JVd37j7SrdyHung9
39ZA24AwNKWajmH7mJdNQ6rr9alxYEJXcp/r3KVbyrp8V+cu5uj6/WI1DU6opmtUtV1uPSnvUOvw
hL2sv7nH+csB4HRmdp579pV9QW2OKTV0j6hl2KW7xa36OqNVZ+/Uqq1nwG6wZdCn5oExtdhCza+m
vlHVtA+podej5gG/mgf9aux122XNgz7bZJD/rEKNg2OqaR9UU79XNe39qu12q90xZR/TMmCaBfoi
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
jTAFTF9fX/z5A9aZ6EyKa+np6bHNAe8EgNlZLS8t6PndGzp85Kgu33iqiZkx+SYm5XaNqKu3VwND
w3KMDKq9vVsjDqf85le806H2tk4Njwyrf3BAU9MT6urskm98Ss6REfvL36436lNwxq/Mw/tUXNus
Qzu3qqLD7MeUvM4eXbyUK1PktxQ90OlTF9Te51UoOKXwyqpmJ3zyT4ak1bAe591SeavDvpaSvOu6
9axey8vLdvKqV8vzaip7qstX7+jeg6eqralSUUW7XXfM59bCKyk8Oyanb9Iuayx+oIs5d3U++7pc
3gk7doFeLWvMN27vn3S06MK1AhtUlsZHdCb7sl4WP9O+w2c1Hc0rKYTpIzI0RABAjHdTBYCFuQnd
OH9WGaeydfn6PeWeP6E//+V7HTh4WDt279OJM5d0ZOd3+qevf1B5Q4+8oz4FXv+yS1QCwObB/Kpu
aWmxB6YZlMJ06jOfywcDwPKCnt66qN0HjivvTo5+/OYzfbN1l/bs2K0tW7dp575DOnQsQ2dOn9P2
H35U1umL+mnLDzp+/ILOnzut7Eunte/gER05eFznM8/ph6++Vf7Tentlgcfn19TEqB7evKq04+k6
cixT5cWF2v7d9zp8/LTSM3NsQTvl6tS93Pt6+PCxdvztC23bc0gnT2Tq4vlrysu9pkPHjqmk029e
nc4d36+9Bw6q4GWLBntadOFcti5eytS2nbv11fd79eJlueo6PApODOri+RO6dDtH+XkXdPzcTZnf
8K2lD5R+yjzmqi5kHNFfvvtBFZVV2v/jFh3Puqy8m6d05Pw9+1521TzR3j27der0SR1Ku0gAIAAg
vnFTBYD5gFe5dwpU+vyePvunL3Vy9xH913/6TIdPXVT+/XxdOntWX//pM+07lqH6tgFNjk9QA/CJ
4vF49PjxYw0ODtoagZ+vAQjpcV6Oylqd8vZU6/u/fqWDR9KUdfaq7ufl6U7efZ05eUI/7Tquo7t+
0oGD6Tr801Z98/02HU47rus3zuv7rUfU2NyiS6dOa+d33+r87eeanp6Vx+vTlN+h4idPdPPSZV2+
eVtZB05p5w/b9fk3P+hY5k1NTgfV3dWkvIJc7dq2U3t37VX6iZN6Wt6ihtICHUnL0IULZ1XaMKCB
5nLduvdID25m6rsf03T7+nUdOnxCd3OvaNu2HTp68oqqK0p04XKunj2+oxs3r+jMmdO6n5+ny1du
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
BmQO4PDCotoqn+ngoaM6mXFNA44R9Q875BgeUE19vZrb2tTT26vGxha1d3RpYMChof4+NdY3qau7
R21tjXL6RtVSX6euAZeCgaBGh/vU3jWoqQmfWhrrdOfGVeXcL9TQUL9a2prk8Y+qoaZW/SNmtjkT
AqY3lfHHgvlr3seN1uzben/nCQCIsRIAPnHN+2p+RZt55N+yrKGBAc3Mhdcs27yYKn3zGsxJ+30B
IFpbMBucU0fVM23Zvl8Pnj7S7u8+01++/k47d+zR1q3btX3XPu0/mKZjaWe0d/sWHdifqX3bt+in
nceVlp6uK9eytXvvHh09dFSZ2bc0NTev6vuX9J//yxc6ejxTj+/la/+2HTqeeUkZx9N06Vq2duza
rWOHjurClXxNh+bl9/li2uk3WvO+RQtb836Njo6+s85GaD4v83c9v/cEAMRYN18AmA0o/Jsua5q1
O23afaO/cE0Vb6QdOHKf6eT37uM+baMBwLwf9vrx1SVVP8nT9Ru5qmzt1cqrVS0sB1VdUaWJ0Iot
cKenJhReXNarV6v2MeH5kKZNFfjighaWTJBY1cz0rLpbm9Ta67KPCcxMKbxkHr+q+SXz2BU7Rn/Q
TFs7Py+Py63pQEgLi8taWVrU5JhfPv+UrX43jwoFZjQ3v6yV5UXNzy/p1eqqVl9rwsvP1QBED87w
woKaK1/owYsmad6vtO0/KC3jlM5evK4HDx7qzp0HunnlsnbtSVP2sSPateeITh8+pG+/36ZDR9J0
9do57dxzWBW1jcq/VyDf1JiuHzymz7/eqp37j+rRvQJdycrSqdNndezYUV2+elY/7U1TXWOT7uY9
0HggvKmOsegX17xv5rYp/E0ziCE6nsBGaTD7Ft+M80dKAECMdXMFAOOEX739g5qdCyscjly/bf6a
HQwEQ6/bdOfsMrPzkTbZgJ30ZdQzascNGOnrUElxsdr7nLZdNzwXkNPp0mwwrPCc6eUfmUs9MknM
u2/Kp+TaAGBYmBpR7t0izU66lZt3T5dOH9Tftv2gP3/1kzyzy3J0Vuvq+Uu6eiFHnYNOFeXf1v7d
+7R3f5pOHt2j7fv36kRGtrIzz+rrz75S3stOhScdOpWWoZxHBbqefUw/7tmrzFNZ2rVrr/YdSVNG
5nldu5mnM8ePKPPMLZ1LP6pjaZd15/Yt3biZrfPXrigz/aRu3LinzLRDyrpSqKVXehMCPjYA2ONp
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
AoDR/Oo3lw2aQt8EAfPr3zzOLJ+anNT4xKTtWzI1Mabuzg75xiflGOzV4IhLs7OfTkGQaAD4IzUQ
ABA3VgIAJAW/JgAYo4P+mALGHOBvT/CRDpH2QA4GFQqF7cBBZoAfO5T0e74kySoBIFYCAGKsBABI
Cn5tAIhqjrH4Zani+wLAZhoKmACAuLESACAp+KUAYI4ljNW8T2sDgHn/FhcX49/aDWPtZ7gemveA
AID4VgIAJAU/FwCiU8viu5pf/ebLbb5r5te2GRDK6HK5NlQzuJOdwnkda2gIAIixEgAgKfi5AGA0
BzC+69ovtfm+me9atOp9o40/Gf3REgAQYyUAQFLwSwEA8ZckACDGSgCApIAAgIlKAECMlQAASQEB
ABOVAIAYKwEAkgICACYqAQAxVgIAJAUEAExUAgBirAQASAoIAJioBADEWAkAkBQQADBRCQCIsRIA
ICkgAGCiEgAQYyUAQFJAAMBEJQAgxkoAgKSAAICJSgBAjJUAAEkBAQATlQCAGCsBAJICAgAmKgEA
MVYCACQFBABMVAIAYqwEAEgKCACYqAQAxFgJAJAUEAAwUQkAiLESACApIABgohIAEGMlAEBSQADA
RCUAIMZKAICkgACAiUoAQIyVAABJAQEAE5UAgBgrAQCSAgIAJioBADFWAgAkBQQATFQCAGKsBABI
CggAmKgEAMRYCQCQFBAAMFEJAIixEgAgKSAAYKISABBjJQBAUkAAwEQlACDGSgCApIAAgIlKAECM
lQAASQEBABOVAIAYKwEAkgICACYqAQAxVgIAJAUEAExUAgBirAQASAoIAJioBADEWAkAkBQQADBR
CQCIsRIAICkgAGCiEgAQYyUAQFJAAMBEJQAgxkoAgKSAAICJSgBAjJUAAEkBAQATlQCAGCsBAJIC
AgAmKgEAMVYCACQFBABMVAIAYqwEAEgKCACYqAQAxFgJAJAUEAAwUQkAiLESACApIABgohIAEGMl
AEBSQADARCUAIMZKAICkgACAiUoAQIyVAABJAQEAE5UAgBgrAQCSAgIAJioBADFWAgAkBQQATFQC
AGKsBABICggAmKgEAMRYCQCQFBAAMFEJAIixEgAgKSAAYKISABBjJQBAUkAAwEQlACDGSgCApIAA
gIlKAECMlQAASQEBABOVAIAYKwEAkgICACYqAQAxVgIAJAUEAExUAgBirAQASAoIAJioBADEWAkA
kBQQADBRCQCIsRIAICkgAGCiEgAQYyUAQFJAAMBEJQAgxkoAgKSAAICJSgBAjJUAAEkBAQATlQCA
GCsBAJICAgAmKgEAMVYCACQFBABMVAIAYqwEAEgKCACYqAQAxFgJAJAUEAAwUQkAiLESACApIABg
ohIAEGMlAEBSQADARCUAIMZKAICkgACAiUoAQIyVAABJAQEAE5UAgBgrAQCSAgIAJioBADFWAgAk
BQQATFQCAGKsBABICggAmKgEAMRYCQCQFBAAMFEJAIixEgAgKSAAYKISABBjJQBAUkAAwEQlACDG
SgCApIAAgIlKAECMlQAASQEBABOVAIAYKwEAkgICACYqAQAxVgIAJAUEAExUAgBirAQASAoIAJio
BADEWAkAkBQQADBRCQCIsRIAICkgAGCiEgAQYyUAQFJAAMBEJQAgxkoAgKSAAICJSgBAjJUAAEkB
AQATlQCAGCsBAJICAgAmKgEAMVYCACQFBABMVAIAYqwEAEgKCACYqAQAxFgJAJAUEAAwUQkAiLES
ACApIABgohIAEGMlAEBSQADARCUAIMZKAICkgACAiUoAQIyVAABJAQEAE5UAgBgrAQCSAgIAJioB
ADFWAgAkBQQATFQCAGKsBABICggAmKgEAMRYCQCQFBAAMFEJAIixEgAgKSAAYKISABBjJQBAUkAA
wEQlACDGSgCApIAAgIlKAECMlQAASQEBABOVAIAYKwEAkgICACYqAQAxVgIAJAUEAExUAgBirAQA
SAoIAJioBADEWAkAkBQQADBRCQCIsRIAICkgAGCiEgAQYyUAQFJAAMBEJQAgxkoAgKSAAICJSgBA
jJUAAEkBAQATlQCAGCsBAJICAgAmKgEAMVYCACQFBABMVAIAYqwEAEgKCACYqAQAxFgJAJAUEAAw
UQkAiLESACApIABgohIAEGMlAEBSQADARCUAIMZKAICkgACAiUoAQIyVAABJAQEAE5UAgBgrAQCS
AgIAJioBADFWAgAkBQQATFQCAGKsBABICggAmKgEAMRYCQCQFBAAMFEJAIixEgAgKSAAYKISABBj
JQBAUkAAwEQlACDGSgCApIAAgIlKAECMlQAASQEBABOVAIAYKwEAkgICACYqAQAxVgIAJAUEAExU
AgBirAQASAoIAJioBADEWAkAkBQQADBRCQCIsRIAICkgAGCiEgAQYyUAQFJAAMBEJQAgxkoAgKSA
AICJSgBAjJUAAEkBAQATlQCAGCsBAJICAgAmKgEAMVYCACQFBABMVAIAYqwEAEgKCACYqAQAxFgJ
AJAUEAAwUQkAiLESACApIABgohIAEGMlAEBSQADARCUAIMZKAICkgACAiUoAQIyVAABJAQEAE5UA
gBgrAQCSAgIAJioBADFWAgAkBQQATFQCAGKsBABICggAmKgEAMRYCQCQFBAAMFEJAIixEgAgKSAA
YKISABBjJQBAUkAAwEQlACDGSgCApIAAgIlKAECMddMEALfbI79/LP68D2Bxu01A9BAA8DdLAECM
ddMEAK/Xp66uPnk8PnlGEdfo8aqzq1c+n48AgL9ZAgBirJsiAJgTudkREwLcnlHbHIAY1RwTPr/f
nrRNwU8AwN8iAQAx1g0PABMTE/J6vfaEbsIA4oeMHicEAPwtEgAQY93QABDVfBkRP0ZzvJgD0gQA
87+5jfgxmpMdAQDxrZsiACD+Gs0BaQJAtE8A4sdqriQhACBGJABgUmoOWNN8hPhrjDYbEQAQCQCY
xMZX8SJ+jObYIQAgEgAQMQUlACASABAxBSUAIBIAEDEFJQAgEgAQMQUlACASABAxBSUAIBIAEDEF
JQAgEgAQMQUlACASABAxBSUAIBIAEDEFJQAgEgAQMQUlACASABAxBSUAIBIAEDEFJQAgEgAQMQUl
ACASABAxBSUAIBIAEDEFJQAgEgAQMQUlACASABAxBSUAIBIAEDEFJQAgEgAQMQUlACASABAxBSUA
IBIAEDEFJQAgEgAQMQUlACASABAxBSUAIBIAEDEFJQAgEgAQMQUlACASABAxBSUAIBIAEDEFJQAg
EgAQMQUlACASABAxBSUAIBIAEDEFJQAgEgAQMQUlACASABAxBSUAIBIAEDEFJQAgEgAQMQUlACAS
ABAxBSUAIBIAEDEFJQAgxgYAczsqAQARP1kJAIhvA8Dk5KT9PoyNjVkJAIj4yUoAQIwEgPn5eY2O
jur27du6dOmSiouL7TInAQARP0UJAIiRABAKhRQMBlVdXa0rV67I4XDYAEANACJ+khIAEN82AZjb
5jthagLoA4CIn7TxASAcDmkuGERMKc2vf/NrP1ITMKf5cNgun58Py+nyyO0ZJQAg4qdlNACYE193
d5/6+4c0MDiMmHIOvmeZsaOjW37/GAEAET8tTQDw+Xz25GYugRofn9D4BGIKOj6hifcsm5ycivmu
RL87BABETGpNoW9OauaXDSJ+2Oj3JPrdIQAgYtJrfv3HL0PEd137XSEAICIipqAJBYCxqVnNBSIb
QURExOTRlN+O3xIAutwBDXoDcvhnbYJARETE5NGU332egPr8HxkAMrPP500sSf3+BfX5FmxyQERE
xOTTFP7DU6/UPTL+ywHg4OFjT13jAZsWEBERMbk1hX9Te/8vBwAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPid+f8BAVP5Mhnyv48AAAAASUVORK5C
YII=</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formManagedIdentityPermi_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formManagedIdentityPermi -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
}


#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

function Get-ManagedIdentities
{
	# Get managed identities
	$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'"
	
	# Populate the ComboBox with managed identities
	foreach ($identity in $managedIdentities)
	{
		$comboBox.Items.Add($identity.DisplayName)
	}
}

$buttonConnectMicrosoftGraph_Click = {
	
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			Disconnect-MgGraph
			$ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			Update-Log -Message "Disconnected from Microsoft Graph."
			
			$combobox.Items.Clear()
		}
		catch
		{
			Update-Log -Message "Error disconnecting from Microsoft Graph: $_"
		}
	}
	else
	{
		try
		{			
			Check-Modules
					
			ConnectToGraph
			
			if ($ConnectedState = $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				$ConnectedState = $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			Update-Log -Message "Error connecting to Microsoft Graph: $_"
		}
	}	
}

$combobox_SelectedIndexChanged={
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:managedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $textboxselectedIdentityID.Text
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAdd.Checked = $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Update-Log -Message "Managed Identity ObjectID: '$ObjectID'"
		Update-Log -Message "Service: '$Service'"
		Update-Log -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Update-Log -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service
		
	}
}

$buttonGetCurrentPermission_Click={
	#TODO: Place custom script here
	$ObjectID = $textboxselectedIdentityID.Text
	
	Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>