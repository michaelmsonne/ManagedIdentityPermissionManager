<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
AF4tX/nK/wN7FhRS0uPlQgAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	# Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		# Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	# Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
        Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
            SelectBackColor = selectBackColor;
        } 
        public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	# Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	# Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	# Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		# Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		# Set the text color
		if ($target.Tag -ne "DangerZone")
		{
			$target.ForeColor = $ForeColor
		}
		else
		{
			$target.ForeColor = [System.Drawing.Color]::Red
		}
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			# Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			# Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			# Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

# Function to update the label text
function Update-ItemCountLabel
{
	$labelAccessScopeItemCount.Text = "Access scopes: " + $checkedlistboxPermissionsToAssign.Items.Count
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Get the service principals based on the ServiceType
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			# Log
			Write-Log -Level INFO -Message "Retrieving access scopes for '$ServiceType'..."
			
			# Get the specific service principal
			$filteredServicePrincipal = Get-MgServicePrincipal -Filter "DisplayName eq '$ServiceType'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "Service principal access scopes retrieved for service: '$ServiceType'."
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Retrieving access scopes for all service principals..."
			
			# Get all service principals
			$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "All service principals access scopes retrieved."
		}
		
		# Check if returned data (exclude if "All services")
		if ($null -eq $filteredServicePrincipal -and $ServiceType -ne "All services")
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Store the filtered service principal data in the global hashtable
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
		}
		else
		{
			$global:ServicePrincipalData = @{ }
			foreach ($sp in $filteredServicePrincipal)
			{
				$global:ServicePrincipalData[$sp.DisplayName] = $sp
			}
		}
		
		# Create a list of roles
		$roles = $filteredServicePrincipal | ForEach-Object {
			foreach ($r in $_.AppRoles)
			{
				[PSCustomObject]@{
					AppId	    = $_.Id
					DisplayName = $_.DisplayName
					Id		    = $r.Id
					RoleName    = $r.DisplayName
					Value	    = $r.Value
				}
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals retrieved - filtered and sorted data."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list..."
		
		# Loop all roles for adding to table
		foreach ($role in $roles)
		{
			$roleDetails = "'$($role.DisplayName)', description: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		# Update the label with the current item count
		Update-ItemCountLabel
		
		# Log
		Write-Log -Level INFO -Message "Added assignable permission scopes to permission list."
		
		# Define the most used items in the desired order
		$mostUsedItems = @("All services", "Microsoft Graph", "Office 365 Exchange Online", "Office 365 Information Protection", "Office 365 SharePoint Online", "WindowsDefenderATP", "Microsoft Cloud App Security")
		
		# Populate the ComboBox with service names only if they have assignable roles
		if ($ServiceComboBox.Items.Count -eq 0)
		{
			# Sort the service principals
			$sortedServicePrincipals = $filteredServicePrincipal | Sort-Object {
				if ($mostUsedItems -contains $_.DisplayName)
				{
					[Array]::IndexOf($mostUsedItems, $_.DisplayName)
				}
				else
				{
					[Int32]::MaxValue
				}
			}
			
			# Populate the ComboBox
			$ServiceComboBox.Items.Add("All services")
			$sortedServicePrincipals | ForEach-Object {
				if ($_.AppRoles.Count -gt 0)
				{
					$ServiceComboBox.Items.Add($_.DisplayName)
				}
			}
		}
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

<#
function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Log
		Write-Log -Level INFO -Message "Retrieving service principals..."
		
		# TODO Better code... If you know to make it better, let me know!
		
		# Get the service principals based on the ServiceType
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			# Get the specific service principal
			$filteredServicePrincipal = Get-MgServicePrincipal -Filter "DisplayName eq '$ServiceType'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "Service principal retrieved for ServiceType: '$ServiceType'."
		}
		else
		{
			# Get all service principals
			$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "All service principals retrieved."
		}
		
		# Check if returned data (exclude if "All services")
		if ($null -eq $filteredServicePrincipal -and $ServiceType -ne "All services")
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Store the filtered service principal data in the global hashtable
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
		}
		else
		{
			$global:ServicePrincipalData = @{ }
			foreach ($sp in $filteredServicePrincipal)
			{
				$global:ServicePrincipalData[$sp.DisplayName] = $sp
			}
		}
		
		# Create a list of roles
		$roles = $filteredServicePrincipal | ForEach-Object {
			foreach ($r in $_.AppRoles)
			{
				[PSCustomObject]@{
					AppId	    = $_.Id
					DisplayName = $_.DisplayName
					Id		    = $r.Id
					RoleName    = $r.DisplayName
					Value	    = $r.Value
				}
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals retrieved - filtered and sorted data."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list..."
		
		# Loop all roles for adding to table
		foreach ($role in $roles)
		{
			$roleDetails = "'$($role.DisplayName)', description: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		# Log
		Write-Log -Level INFO -Message "Added assignable permission scopes to permission list."
		
		# Define the most used items in the desired order
		$mostUsedItems = @("All services", "Microsoft Graph", "Office 365 Exchange Online", "Office 365 Information Protection", "Office 365 SharePoint Online", "WindowsDefenderATP", "Microsoft Cloud App Security")
		
		# Populate the ComboBox with service names only if they have assignable roles
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			# Ensure the ComboBox retains all service principals
			if ($ServiceComboBox.Items.Count -eq 0)
			{
				$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
				
				# Sort the service principals
				$sortedServicePrincipals = $filteredServicePrincipal | Sort-Object {
					if ($mostUsedItems -contains $_.DisplayName)
					{
						[Array]::IndexOf($mostUsedItems, $_.DisplayName)
					}
					else
					{
						[Int32]::MaxValue
					}
				}
				
				# Populate the ComboBox
				$ServiceComboBox.Items.Add("All services")
				$sortedServicePrincipals | ForEach-Object {
					if ($_.AppRoles.Count -gt 0)
					{
						$ServiceComboBox.Items.Add($_.DisplayName)
					}
				}
			}
		}
		else
		{
			# Add all service principals
			$ServiceComboBox.Items.Clear()
			
			# Sort the service principals
			$sortedServicePrincipals = $filteredServicePrincipal | Sort-Object {
				if ($mostUsedItems -contains $_.DisplayName)
				{
					[Array]::IndexOf($mostUsedItems, $_.DisplayName)
				}
				else
				{
					[Int32]::MaxValue
				}
			}
			
			# Populate the ComboBox
			$ServiceComboBox.Items.Add("All services")
			$sortedServicePrincipals | ForEach-Object {
				if ($_.AppRoles.Count -gt 0)
				{
					$ServiceComboBox.Items.Add($_.DisplayName)
				}
			}
		}
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}
#>

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered Managed Identities from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	# Services to add to dropdown list (more to add soon when tested..)
	#$ServiceComboBox.Items.Add("Microsoft Graph")
	#$ServiceComboBox.Items.Add("Exchange Online")
	#$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				Initialize-MasterItems
				
				# Populate the ComboBox with service names
				Get-AssignableApiPermissionScopes -ServiceType "All services"
				
				# Set default service in combobox
				$ServiceComboBox.SelectedIndex = 1
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "Managed Identity"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			[System.Windows.Forms.MessageBox]::Show("The following fields are required: $missingFieldsString", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "ObjectID"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			[System.Windows.Forms.MessageBox]::Show("The following fields are required: $missingFieldsString", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	$ObjectName = $textboxselectedIdentityName.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	# Get the selected service type
	$selectedServiceType = $ServiceComboBox.Text
	
	# Get data and get permissions
	Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
	
	# Get data and get permissions
	#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	#Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click = {
	
	# Initialize selected scopes array
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			#Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Check if any scopes are selected
	if ($selectedScopes.Count -gt 0)
	{
		# Log
		Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
		
		# Format data
		$PermissionsTextBox.Text = $selectedScopes -join ", "
		
		# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No access scopes selected to add"
		[System.Windows.Forms.MessageBox]::Show("No access scopes selected to add.", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
	}
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get data fo filter function
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	$filteredItems = @()
	
	# Filter elements
	if ($filterText -eq "" -or $null)
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process "https://buymeacoffee.com/sonnes"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$currentSelectedManagedIdentityToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$exportAssignedPermissionsToolStripMenuItem_Click={
	
	$timestamp = Get-Date -Format "dd-MM-yyyy"
	
	# Get data needed for the export
	$ManagedIdentityID = $textboxselectedIdentityID.Text
	$ManagedIdentityName = $textboxselectedIdentityName.Text
	
	$selectedManagedIdentities = @()
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($checkedlistboxListOfManagedIdentity.GetItemChecked($i))
		{
			$selectedManagedIdentities += $checkedlistboxListOfManagedIdentity.Items[$i]
		}
	}
	
	# For export for selected Managed Identity (permissions)
	if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID) -or $selectedManagedIdentities.Count -gt 0)
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for selected Managed Identity '$ManagedIdentityName'"
		$saveFileDialog.FileName = "${ManagedIdentityName}_permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID))
			{
				# Call function to save data
				Export-ManagedIdentityPermissions -ManagedIdentityID $ManagedIdentityID -ManagedIdentityName $ManagedIdentityName -ExportFilePath $ExportFilePath
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for the selected Managed Identity '$ManagedIdentityName' (ID: $ManagedIdentityID) exported successfully." -Icon Information -BoxType OK
			}
			else
			{
				$exportedNames = @()
				foreach ($identity in $selectedManagedIdentities)
				{
					Export-ManagedIdentityPermissions -ManagedIdentityID $identity.Id -ManagedIdentityName $identity.Name -ExportFilePath $ExportFilePath
					$exportedNames += "$($identity.Name) (ID: $($identity.Id))"
				}
				$exportedNamesString = $exportedNames -join ", "
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for all selected Managed Identities '$exportedNamesString' exported successfully." -Icon Information -BoxType OK
			}
		}
	}	
	# For export for all Managed Identity (permissions)
	else
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for all Managed Identity´s"
		$saveFileDialog.FileName = "Managed Identity Permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			# Call function to save data
			Export-AllManagedIdentityPermissions -ExportFilePath $ExportFilePath
			
			Show-MsgBox -Title "Export" -Prompt "Permissions for all Managed Identities exported successfully." -Icon Information -BoxType OK
		}
	}
}

$microsoftGraphToolStripMenuItem_Click = {
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the Microsoft Graph permissions reference"
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process "https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
}

$buttonDefaultServiceToManage_Click={
	
	# Set default service in combobox
	$ServiceComboBox.SelectedIndex = 1
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>