<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
m7p6s1YT4+O6XXZTPcOvZZtu05d/2qDGvkE9qCxVfXefutqadb+pR11NZdq9+6DiT59RatYldQzO
6NXzpyq/V6OJebv1H3N3S51u3W3R/Oy4qqur1PK4TqnpJRoZ6dCt6nrN2e16dL9MFRVl2rd1m8qb
BzTSVat7LT2yLb3Ugxtp+nZHrIbn/Vp43qK//vH/V0NHm7Z98Selltaro6FKdY961N/VptKiUj3p
m9R4b6tult/X1OtFtT+8rsKy+5qcMVMfK9Q28lLzU73KTjis75NKrE/Wq68VquRmnZ42lmjz9mN6
1NOn2uo76h59occPq1ReWa285HgdOXNBpTnx2rD1sOp7hvV6ZkL9A4NasrvePF6/PAACyk84rM07
Dup2a5/6Gyp0LidPt2sb1fKoVY9aWtXU3KrW1ie6UnJFtdUNupgQr8Ibd3T7wgUlJqfo5r1mNd3P
V8zpJFXW1Kqjd0xjz7p1/2aV0o7HqKy+S0Hzuf+71/8TJQAQMVIMvwCw2bXsX1B2XKLOpecoIf2c
Dm/9Rv/r73/Xhk07dWjvfu3avU/7Dh7RoWNndOjwSaUmndPmr75QQkKBju7ZoO07jutM/DmdSTit
8/mZ2rd/j44cS1BmaqoSY8/oH3/9XBeutsk5160De2KUX5Ct7OxkJSTHavPG3Sqv69fg49s6djxe
CXHxSklOU8LxeO3d9IX+/bO/KrmkXsGAXWf3bdCmnXFK/H6vPvvbZ/pq8y6dOXNOO7/+TP/xxT91
4MhJZWXm6s6VUn23Zb+KLxVqw2d/0F++/E7HYk+p8GKq9h5P1vC8T69H2hV35LhiY0/o2JFTqrhz
X5nHt+tPn3+jrduPKC0lWWdTitRQWai//OF/ac/hU7pYmKaU9DQd2LFdn33+H/p6+wElnk1QTvY5
HUu7agVAS9UNa4ZEYVGGYhPPat/2LfrL3z7Xxk1btXNfnPKyUvXl3zbqbHa+ju/dpv3HzykrI13p
GRm6VFYnX8D35vH6ZQFgBuP59LipSVOLax9zfGj43y/nvev+P5AAQMRIMSwDIOhb0IWkFJVcu6mz
iae0e8MWnc3K1amTccq/dFmXS6+oqPCySkuvat/23UpKyVXq8YPaf/i0zqcmacfmzdq+57BOxifp
5s3L2vbdDl2paldnc6XOxKXq5J6tOpleJrdrUrnnS3St5IIKi4uUkhij3Ucz9dIlzQw0KiXxrM6m
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</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing ithems
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Determine the AppId based on the ServiceType
		switch ($ServiceType)
		{
			"Microsoft Graph" {
				$appId = '00000003-0000-0000-c000-000000000000'
			}
			"Exchange Online" {
				$appId = '00000002-0000-0ff1-ce00-000000000000'
			}
			"SharePoint" {
				$appId = '00000003-0000-0ff1-ce00-000000000000'
			}
			default {
				# Log
				Write-Log -Level INFO -Message "Invalid ServiceType specified. Valid values are 'Microsoft Graph', 'Exchange Online', 'SharePoint'."
				return
			}
		}
		
		# Get the service principal for the specified AppId
		Write-Log -Level INFO -Message "Retrieving service principal for AppId: '$appId'"
		
		# Get needed data
		$servicePrincipal = Get-MgServicePrincipal -Filter "AppId eq '$appId'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		# Check if returned data
		if ($null -eq $servicePrincipal)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found with AppId '$appId', Service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principal retrieved: AppId '$appId', '$($servicePrincipal.DisplayName)'"
		
		# Extract the permission scopes (AppRoles and Oauth2PermissionScopes)
		$appRoles = $servicePrincipal.AppRoles
		$oauth2PermissionScopes = $servicePrincipal.Oauth2PermissionScopes
		
		# Check if scopes assigned
		if ($appRoles.Count -eq 0 -and $oauth2PermissionScopes.Count -eq 0)
		{
			# Log
			Write-Log -Level INFO -Message "No assignable permission scopes found for service principal with AppId '$appId' service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Assignable permission scopes retrieved for AppId '$appId' service '$($servicePrincipal.DisplayName)'."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)'..."
		
		foreach ($role in $appRoles)
		{
			$roleDetails = "Role details: '$($role.DisplayName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		Write-Log -Level INFO -Message "Added all assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)' to the list for management."
		
		<#
		foreach ($scope in $oauth2PermissionScopes)
		{
			$scopeDetails = "Scope details: $($scope.AdminConsentDisplayName), ScopeValue: $($scope.Value), ScopeId: $($scope.Id)"
			$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)
		}
		#>
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded updated the list of found Managed Identity´s from tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Is-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	# Services to add to dropdown list (more to add soon when tested..)
	$ServiceComboBox.Items.Add("Microsoft Graph")
	$ServiceComboBox.Items.Add("Exchange Online")
	$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Check-ExecutionPolicy
			
			# Check installed/loaded modules
			Check-Modules
			
			# Connect
			ConnectToGraph
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}	
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			# Log
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	$ObjectName = $textboxselectedIdentityName.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$microsoftGraphToolStripMenuItem_Click={
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	# Get data and get permissions
	Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click = {
	
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Log
	Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
	
	# Format data
	$PermissionsTextBox.Text = $selectedScopes -join ", "
	
	# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	
	# $PermissionsTextBox
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get data fo filter function
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	$filteredItems = @()
	
	# Filter elements
	if ($filterText -eq "" -or $null)
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}
$pictureboxSupportMe_Click={
	
	Start-Process "https://buymeacoffee.com/sonnes"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged={
	$searchQuery = $textboxSearch.Text
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click={
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click={
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		#Write-Log -Level INFO -Message "buttonLookupTenantID_Click tenantId: $tenantId"
		if ($tenantId)
		{
			Write-Log -Level INFO -Message "Tenant ID: $tenantId"
		}
		else
		{
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID."
		}
	}
	catch
	{
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>