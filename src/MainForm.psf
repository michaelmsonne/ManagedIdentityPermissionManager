<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAKzRSURBVHhe7P1nk1xZu6aHvV9ESQzpB0gfKTHE
IBXiiCNRjKFITlAKkTMxZ2Y4c8gzx815TffbvgE0TMOjCijvvffee++9995777IqbWUZXIq1sxIo
JEyjHVBd9VwRd2Tm9nvn2nvde5ln/e53giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAId//j//j/nO/m7pUfHBKV
HxAYJhKJRCKR6DeosIjY/G+vX8//D/83/+t8x8z+Nf5P/9F/VJ2aXczwgo7hRR1D87sikUgkEol+
gxpZUvn4NnfuPsAxv38N9eavVmgcmKO+b4aGvlmRSCQSiURvU/+P1AdcR+XjbWOrtPVN/LABCAuP
yp9Y1dM4ME/z4OvqHFyja2jltekikUgkEl01tQwt2DLa3pkfVF3vDE1qneEFGvvVOtM0aC/ab5da
prF/jpbhRZoG5rVtOG73TVLHpI5NHWPr6Aodg9M/bACCQ8LzJ1YNtAwt0jq8qH3a1TG8SsZgM+n9
nXQNr2gnoZb5VTT0E7ftuJ7jb5FIJBKJfgG1jy5T0TpKbkUX+dU976WCml5quyYpa+yloqWf8uZ+
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
EAFAnBnYPw2llHqqrsp/74+bP0sAELp+Re0/5UrpQVTsqyK0uv4xRCDg/ksp9SbFMU2EgT97AHCd
CaDUk+S+Syn1dp+pq/8cAYBSSimlB1sGAEoppfQQygBAKaWUHkJfOgAYxb3nd2dEKaWUUs/Q8KIB
YPyxAVPLBsyqDHIGlFJKKfUsJ5YNmP66ASAlNaNG4wBmVm3yQyI5UEoppdTzFPX4/OYORudW/3QA
CI+IaptXbcq0QCmllFLPdnROjf7hsT8dAAghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCHexv8HK1/GEMv3ZNIAAAAASUVORK5C
YII=</Preview>
  <Form>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
KHt5bOqmsXmeqFeH5OOfzb//Px4J16VHGgMA</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	# Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		# Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	# Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
        Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
            SelectBackColor = selectBackColor;
        } 
        public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	# Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	# Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	# Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		# Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		# Set the text color
		if ($target.Tag -ne "DangerZone")
		{
			$target.ForeColor = $ForeColor
		}
		else
		{
			$target.ForeColor = [System.Drawing.Color]::Red
		}
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			# Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			# Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			# Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

# Function to update the label text
function Update-ItemCountLabel
{
	$labelAccessScopeItemCount.Text = "Access scopes found: " + $checkedlistboxPermissionsToAssign.Items.Count
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Managed Identityes found: " + $checkedlistboxListOfManagedIdentity.Items.Count
}

# Function to get assignable access scopes for services principals
function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType = "Microsoft Graph"
	)
	
	try
	{
		# Clear list for existing items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Log
		Write-Log -Level INFO -Message "Retrieving service principals..."
		
		# Get the service principals based on the ServiceType
		if ($ServiceType -ne "All services")
		{
			# Get the specific service principal
			$filteredServicePrincipal = Get-MgServicePrincipal -Filter "DisplayName eq '$ServiceType'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "Service principal retrieved for ServiceType: '$ServiceType'."
		}
		else
		{
			# Get all service principals
			$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "All service principals retrieved."
		}
		
		# Check if returned data
		if ($null -eq $filteredServicePrincipal)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Store the filtered service principal data in the global hashtable
		if ($ServiceType -ne "All services")
		{
			$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
		}
		else
		{
			$global:ServicePrincipalData = @{ }
			foreach ($sp in $filteredServicePrincipal)
			{
				$global:ServicePrincipalData[$sp.DisplayName] = $sp
			}
		}
		
		# Create a list of roles
		$roles = $filteredServicePrincipal | ForEach-Object {
			foreach ($r in $_.AppRoles)
			{
				[PSCustomObject]@{
					AppId	    = $_.Id
					DisplayName = $_.DisplayName
					Id		    = $r.Id
					RoleName    = $r.DisplayName
					Value	    = $r.Value
				}
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals retrieved - filtered and sorted data."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list..."
		
		# Store the master items globally
		$global:masterItems = @()
		
		# Loop all roles for adding to table
		foreach ($role in $roles)
		{
			$roleDetails = "'$($role.DisplayName)', description: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
			$global:masterItems += $roleDetails
			
			# Log
			#Write-Log -Level INFO -Message "Added assignable permission scope: $roleDetails"
		}
		
		# Update the label with the current item count
		Update-ItemCountLabel
		
		# Log
		Write-Log -Level INFO -Message "Added assignable permission scopes to permission list."
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered Managed Identities from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Populate-ServiceComboBox
{
	try
	{
		# Log
		Write-Log -Level INFO -Message "Retrieving service principals..."
		
		# Get all service principals
		$allServicePrincipals = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		# Check if returned data
		if ($null -eq $allServicePrincipals)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Define the most used items in the desired order
		$mostUsedItems = @("Microsoft Graph", "Office 365 Exchange Online", "Office 365 Information Protection", "Office 365 SharePoint Online", "WindowsDefenderATP", "Microsoft Cloud App Security")
		
		# Populate the ComboBox with service names only if they have assignable roles
		$ServiceComboBox.Items.Clear()
		$ServiceComboBox.Items.Add("All services") # Add "All services" option
		
		# Sort the service principals
		$sortedServicePrincipals = $allServicePrincipals | Sort-Object {
			if ($mostUsedItems -contains $_.DisplayName)
			{
				[Array]::IndexOf($mostUsedItems, $_.DisplayName)
			}
			else
			{
				[Int32]::MaxValue
			}
		}
		
		# Populate the ComboBox
		$sortedServicePrincipals | ForEach-Object {
			if ($_.AppRoles.Count -gt 0)
			{
				$ServiceComboBox.Items.Add($_.DisplayName)
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals found in tenant is added to list of services to manage."
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving service principals: $_"
	}
}

function Filter-AssignableApiPermissionScopes
{
	param (
		[string]$filterText
	)
	
	try
	{
		# Clear the current items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Filter elements
		$filteredItems = @()
		if ($filterText -eq "" -or $null)
		{
			# If the filter text is empty, reset to all items
			$filteredItems = $global:masterItems
		}
		else
		{
			# Filter items based on the filter text
			foreach ($item in $global:masterItems)
			{
				if ($item -like "*$filterText*")
				{
					$filteredItems += $item
				}
			}
		}
		
		# Populate the CheckedListBox with the filtered items
		foreach ($filteredItem in $filteredItems)
		{
			$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
		}
		
		# Log
		#Write-Log -Level INFO -Message "Filtered assignable permission scopes with filter text: '$filterText'"
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error filtering permission scopes: $_"
	}
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Test-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfManagedIdentity.Items.Clear()
			Update-ItemCountLabel
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				Initialize-MasterItems

				# Populate the ServiceComboBox with service principals
				Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "Managed Identity"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			
			Show-MsgBox -Title "Input Validation" -Prompt "The following fields are required: $missingFieldsString" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "ObjectID"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			
			Show-MsgBox -Title "Input Validation" -Prompt "The following fields are required: $missingFieldsString" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedRoles.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedRoles.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}	
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingScopes_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingScopes.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingScopes.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingScopes.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	# If connected
	if ($global:ConnectedState)
	{
		#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
		
		# Get the selected service type
		$selectedServiceType = $ServiceComboBox.Text
		
		# Get data and get permissions
		Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
		
		# Call this function once to initialize the master list
		Initialize-MasterItems
		
		# Get data and get permissions
		#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
		
		# Call this function once to initialize the master list
		#Initialize-MasterItems
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes"
	}
}

$buttonAddSelectedAccessSco_Click = {
	
	# Initialize selected scopes array
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			#Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Check if any scopes are selected
	if ($selectedScopes.Count -gt 0)
	{
		# Log
		Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
		
		# Format data
		$PermissionsTextBox.Text = $selectedScopes -join ", "
		
		# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No access scopes selected to add"
		
		Show-MsgBox -Title "Input Validation" -Prompt "No access scopes selected to add." -Icon Exclamation -BoxType OKOnly
	}
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get the filter text
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	# Filter the assignable permission scopes
	Filter-AssignableApiPermissionScopes -filterText $filterText
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process "https://buymeacoffee.com/sonnes"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$currentSelectedManagedIdentityToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$exportAssignedPermissionsToolStripMenuItem_Click={
	
	$timestamp = Get-Date -Format "dd-MM-yyyy"
	
	# Get data needed for the export
	$ManagedIdentityID = $textboxselectedIdentityID.Text
	$ManagedIdentityName = $textboxselectedIdentityName.Text
	
	$selectedManagedIdentities = @()
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($checkedlistboxListOfManagedIdentity.GetItemChecked($i))
		{
			$selectedManagedIdentities += $checkedlistboxListOfManagedIdentity.Items[$i]
		}
	}
	
	# For export for selected Managed Identity (permissions)
	if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID) -or $selectedManagedIdentities.Count -gt 0)
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for selected Managed Identity '$ManagedIdentityName'"
		$saveFileDialog.FileName = "${ManagedIdentityName}_permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID))
			{
				# Call function to save data
				Export-ManagedIdentityPermissions -ManagedIdentityID $ManagedIdentityID -ManagedIdentityName $ManagedIdentityName -ExportFilePath $ExportFilePath
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for the selected Managed Identity '$ManagedIdentityName' (ID: $ManagedIdentityID) exported successfully." -Icon Information -BoxType OK
			}
			else
			{
				$exportedNames = @()
				foreach ($identity in $selectedManagedIdentities)
				{
					Export-ManagedIdentityPermissions -ManagedIdentityID $identity.Id -ManagedIdentityName $identity.Name -ExportFilePath $ExportFilePath
					$exportedNames += "$($identity.Name) (ID: $($identity.Id))"
				}
				$exportedNamesString = $exportedNames -join ", "
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for all selected Managed Identities '$exportedNamesString' exported successfully." -Icon Information -BoxType OK
			}
		}
	}	
	# For export for all Managed Identity (permissions)
	else
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for all Managed Identity´s"
		$saveFileDialog.FileName = "Managed Identity Permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			# Call function to save data
			Export-AllManagedIdentityPermissions -ExportFilePath $ExportFilePath
			
			Show-MsgBox -Title "Export" -Prompt "Permissions for all Managed Identities exported successfully." -Icon Information -BoxType OK
		}
	}
}

$microsoftGraphToolStripMenuItem_Click = {
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the Microsoft Graph permissions reference"
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process "https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
}

$buttonDefaultServiceToManage_Click={
	
	# Set default service in combobox
	$ServiceComboBox.SelectedIndex = 1
}

$buttonGetAllAccessScopes_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data and get permissions
		Get-AssignableApiPermissionScopes -ServiceType "All services"
		
		# Call this function once to initialize the master list
		Initialize-MasterItems
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes"
	}
}

$ServiceComboBox_SelectedIndexChanged={
	
	# If connected
	if ($global:ConnectedState)
	{
		#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
		
		# Get the selected service type
		$selectedServiceType = $ServiceComboBox.Text
		
		# Get data and get permissions
		Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
		
		# Call this function once to initialize the master list
		Initialize-MasterItems
		
		# Get data and get permissions
		#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
		
		# Call this function once to initialize the master list
		#Initialize-MasterItems
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes"
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>