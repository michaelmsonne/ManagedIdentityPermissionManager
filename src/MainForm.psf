<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
AHj0aEb9Az3QomhKKX3ZHNecOHS6tF3yqHjpi/8oAYBMkxVT+rIpnf3BTv8338uxa/sqTSJoSim1
L61jA6Q9k2/i/2ABgAxGkBUe1vBS+jIpwart7gAJAOSbgcPSUUqpPWrr/A+e3PyvBACi7SzK9lUr
pS+zcqxK0Gr7x5CAgMcvpfQoKW2aBAP/6wGAlqlaCaX2JI9dSulR92A/rbV3ym88AKCUUkrpyy0D
AEoppfRbKAMASiml9Fvo7x0AbKoAQDKhlFJKqf24ofxaAcDgI7XQ9AbG1MKSAaWUUkrtyyHVj4+8
aAAQFa0vXN4BRtUCspBEDpRSSim1P6Ufn1h9gv7x+a8OAHz9AqonZle1aIFSSiml9m3/+Bzaewa+
OgAghBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGE
EEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBC
CCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQggh
hBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQ
QgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEIIIYQQQgghhBBCCCGEEEII
IYQQQgghhBBCCCGEHC3+5E/+B7qL37oj9nPxAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	# Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		# Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	# Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
        Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
            SelectBackColor = selectBackColor;
        } 
        public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	# Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	# Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	# Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		# Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		# Set the text color
		if ($target.Tag -ne "DangerZone")
		{
			$target.ForeColor = $ForeColor
		}
		else
		{
			$target.ForeColor = [System.Drawing.Color]::Red
		}
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			# Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			# Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			# Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

# Function to update the label text
function Update-ItemCountLabel
{
	$labelAccessScopeItemCount.Text = "Access scopes found: " + $checkedlistboxPermissionsToAssign.Items.Count
}

# Function to update the label text
function Update-NumberOfManagedIdentityCountLabel
{
	$labelManagedIdentityesCount.Text = "Managed Identityes found: " + $checkedlistboxListOfManagedIdentity.Items.Count
}

# Function to get assignable access scopes for services principals
function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType = "Microsoft Graph"
	)
	
	try
	{
		# Clear list for existing items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Log
		Write-Log -Level INFO -Message "Retrieving service principals..."
		
		# Get the service principals based on the ServiceType
		if ($ServiceType -ne "All services")
		{
			# Get the specific service principal
			$filteredServicePrincipal = Get-MgServicePrincipal -Filter "DisplayName eq '$ServiceType'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "Service principal retrieved for ServiceType: '$ServiceType'."
		}
		else
		{
			# Get all service principals
			$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "All service principals retrieved."
		}
		
		# Check if returned data
		if ($null -eq $filteredServicePrincipal)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Store the filtered service principal data in the global hashtable
		if ($ServiceType -ne "All services")
		{
			$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
		}
		else
		{
			$global:ServicePrincipalData = @{ }
			foreach ($sp in $filteredServicePrincipal)
			{
				$global:ServicePrincipalData[$sp.DisplayName] = $sp
			}
		}
		
		# Create a list of roles
		$roles = $filteredServicePrincipal | ForEach-Object {
			foreach ($r in $_.AppRoles)
			{
				[PSCustomObject]@{
					AppId	    = $_.Id
					DisplayName = $_.DisplayName
					Id		    = $r.Id
					RoleName    = $r.DisplayName
					Value	    = $r.Value
				}
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals retrieved - filtered and sorted data."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list..."
		
		# Store the master items globally
		$global:masterItems = @()
		
		# Loop all roles for adding to table
		foreach ($role in $roles)
		{
			$roleDetails = "'$($role.DisplayName)', description: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
			$global:masterItems += $roleDetails
			
			# Log
			#Write-Log -Level INFO -Message "Added assignable permission scope: $roleDetails"
		}
		
		# Update the label with the current item count
		Update-ItemCountLabel
		
		# Log
		Write-Log -Level INFO -Message "Added assignable permission scopes to permission list."
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered Managed Identities from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
		
		Update-NumberOfManagedIdentityCountLabel
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

function Populate-ServiceComboBox
{
	try
	{
		# Log
		Write-Log -Level INFO -Message "Retrieving service principals..."
		
		# Get all service principals
		$allServicePrincipals = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		# Check if returned data
		if ($null -eq $allServicePrincipals)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Define the most used items in the desired order
		$mostUsedItems = @("Microsoft Graph", "Office 365 Exchange Online", "Office 365 Information Protection", "Office 365 SharePoint Online", "WindowsDefenderATP", "Microsoft Cloud App Security")
		
		# Populate the ComboBox with service names only if they have assignable roles
		$ServiceComboBox.Items.Clear()
		$ServiceComboBox.Items.Add("All services") # Add "All services" option
		
		# Sort the service principals
		$sortedServicePrincipals = $allServicePrincipals | Sort-Object {
			if ($mostUsedItems -contains $_.DisplayName)
			{
				[Array]::IndexOf($mostUsedItems, $_.DisplayName)
			}
			else
			{
				[Int32]::MaxValue
			}
		}
		
		# Populate the ComboBox
		$sortedServicePrincipals | ForEach-Object {
			if ($_.AppRoles.Count -gt 0)
			{
				$ServiceComboBox.Items.Add($_.DisplayName)
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals found in tenant is added to list of services to manage."
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving service principals: $_"
	}
}

function Filter-AssignableApiPermissionScopes
{
	param (
		[string]$filterText
	)
	
	try
	{
		# Clear the current items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Filter elements
		$filteredItems = @()
		if ($filterText -eq "" -or $null)
		{
			# If the filter text is empty, reset to all items
			$filteredItems = $global:masterItems
		}
		else
		{
			# Filter items based on the filter text
			foreach ($item in $global:masterItems)
			{
				if ($item -like "*$filterText*")
				{
					$filteredItems += $item
				}
			}
		}
		
		# Populate the CheckedListBox with the filtered items
		foreach ($filteredItem in $filteredItems)
		{
			$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
		}
		
		# Log
		#Write-Log -Level INFO -Message "Filtered assignable permission scopes with filter text: '$filterText'"
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error filtering permission scopes: $_"
	}
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear the content in the UI
			$ServiceComboBox.Items.Clear()
			$checkedlistboxPermissionsToAssign.Items.Clear()
			$textboxSccessScopeToAssignFilter.Clear()
			$checkedlistboxListOfManagedIdentity.Items.Clear()
			Update-ItemCountLabel
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				# Update button text
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				Initialize-MasterItems

				# Populate the ServiceComboBox with service principals
				Populate-ServiceComboBox
				
				# Set the default selection to "Microsoft Graph"
				$ServiceComboBox.SelectedItem = "Microsoft Graph"
				
				# Load the default permissions for "Microsoft Graph"
				#Get-AssignableApiPermissionScopes -ServiceType "Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "Managed Identity"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			
			Show-MsgBox -Title "Input Validation" -Prompt "The following fields are required: $missingFieldsString" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "ObjectID"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			
			Show-MsgBox -Title "Input Validation" -Prompt "The following fields are required: $missingFieldsString" -Icon Exclamation -BoxType OKOnly
			
			return
		}
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$ObjectName = $textboxselectedIdentityName.Text
		
		# Clear the TextBox before adding new data
		$textboxAssingedRoles.Clear()
		
		# Call the function and get the result
		$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
		
		# Set the TextBox text to the result
		$textboxAssingedRoles.Text = $result
		
		#Update-Log -Message $result
		
		#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes assigned to a Managed Identity"
	}	
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingScopes_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingScopes.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingScopes.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingScopes.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd-MM-yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	# If connected
	if ($global:ConnectedState)
	{
		#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
		
		# Get the selected service type
		$selectedServiceType = $ServiceComboBox.Text
		
		# Get data and get permissions
		Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
		
		# Call this function once to initialize the master list
		Initialize-MasterItems
		
		# Get data and get permissions
		#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
		
		# Call this function once to initialize the master list
		#Initialize-MasterItems
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes"
	}
}

$buttonAddSelectedAccessSco_Click = {
	
	# Initialize selected scopes array
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			#Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Check if any scopes are selected
	if ($selectedScopes.Count -gt 0)
	{
		# Log
		Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
		
		# Format data
		$PermissionsTextBox.Text = $selectedScopes -join ", "
		
		# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No access scopes selected to add"
		
		Show-MsgBox -Title "Input Validation" -Prompt "No access scopes selected to add." -Icon Exclamation -BoxType OKOnly
	}
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get the filter text
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	# Filter the assignable permission scopes
	Filter-AssignableApiPermissionScopes -filterText $filterText
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process "https://buymeacoffee.com/sonnes"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$currentSelectedManagedIdentityToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$exportAssignedPermissionsToolStripMenuItem_Click={
	
	$timestamp = Get-Date -Format "dd-MM-yyyy"
	
	# Get data needed for the export
	$ManagedIdentityID = $textboxselectedIdentityID.Text
	$ManagedIdentityName = $textboxselectedIdentityName.Text
	
	$selectedManagedIdentities = @()
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($checkedlistboxListOfManagedIdentity.GetItemChecked($i))
		{
			$selectedManagedIdentities += $checkedlistboxListOfManagedIdentity.Items[$i]
		}
	}
	
	# For export for selected Managed Identity (permissions)
	if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID) -or $selectedManagedIdentities.Count -gt 0)
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for selected Managed Identity '$ManagedIdentityName'"
		$saveFileDialog.FileName = "${ManagedIdentityName}_permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID))
			{
				# Call function to save data
				Export-ManagedIdentityPermissions -ManagedIdentityID $ManagedIdentityID -ManagedIdentityName $ManagedIdentityName -ExportFilePath $ExportFilePath
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for the selected Managed Identity '$ManagedIdentityName' (ID: $ManagedIdentityID) exported successfully." -Icon Information -BoxType OK
			}
			else
			{
				$exportedNames = @()
				foreach ($identity in $selectedManagedIdentities)
				{
					Export-ManagedIdentityPermissions -ManagedIdentityID $identity.Id -ManagedIdentityName $identity.Name -ExportFilePath $ExportFilePath
					$exportedNames += "$($identity.Name) (ID: $($identity.Id))"
				}
				$exportedNamesString = $exportedNames -join ", "
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for all selected Managed Identities '$exportedNamesString' exported successfully." -Icon Information -BoxType OK
			}
		}
	}	
	# For export for all Managed Identity (permissions)
	else
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for all Managed Identity´s"
		$saveFileDialog.FileName = "Managed Identity Permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			# Call function to save data
			Export-AllManagedIdentityPermissions -ExportFilePath $ExportFilePath
			
			Show-MsgBox -Title "Export" -Prompt "Permissions for all Managed Identities exported successfully." -Icon Information -BoxType OK
		}
	}
}

$microsoftGraphToolStripMenuItem_Click = {
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the Microsoft Graph permissions reference"
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process "https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
}

$buttonDefaultServiceToManage_Click={
	
	# Set default service in combobox
	$ServiceComboBox.SelectedIndex = 1
}

$buttonGetAllAccessScopes_Click={
	
	# If connected
	if ($global:ConnectedState)
	{
		# Get data and get permissions
		Get-AssignableApiPermissionScopes -ServiceType "All services"
		
		# Call this function once to initialize the master list
		Initialize-MasterItems
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes"
	}
}

$ServiceComboBox_SelectedIndexChanged={
	
	# If connected
	if ($global:ConnectedState)
	{
		#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
		
		# Get the selected service type
		$selectedServiceType = $ServiceComboBox.Text
		
		# Get data and get permissions
		Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
		
		# Call this function once to initialize the master list
		Initialize-MasterItems
		
		# Get data and get permissions
		#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
		
		# Call this function once to initialize the master list
		#Initialize-MasterItems
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load access scopes"
	}
	
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>