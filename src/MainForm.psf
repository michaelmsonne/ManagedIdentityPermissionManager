<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
8tJtAkDatSsAfg6vreNHJAAgrq+uCQCjoyE76Ap4F3Omnt4vXm77N/tHrxkc6mcEAKOp6jfV/qbt
31hbW5taRzSqKbPfzZrHxBUJjajT77ejGfb4OxSKfFgFwa8KAO9RAgDi+koAANdgAoDZJ8yOaM7c
29vbbSH+SwOA3YlNp9L5eXv/y5cCpnbkdG1B3N5n1m86lrpxMJ9fIwHghQQAxBcSAMA1pNvqzZl6
dna2zpw5Y4fuNfvJLw0AaX9suRd0cwBgKGDE9ZMAAK4hXQNgqu07Ojqs6QL+XQNA+jH4wpcDQPpK
G7dgal4IAIjrIwEAXEO6D4DZIU0vfmO6AHtbADCPMQWJ+R9f1Xwu6R+v0fxvBm8y2kmR1sn065vv
LvPA9L4kACC+kAAAriEdADJ9WwBI77jmL77ZzM/UFIJu0Gybk4UuAQDxheb3RwAAV/BLA0B6X0J8
m2YfMs1FBABEAgC4iF8SAMzQvmbHNPsR4ts0Z/9mnzG3CQDodQkA4Bp+bgBI35c+sCO+qy/XIBEA
0KsSAMA1/JIAkK7aRfw5pvcdAgB6WQIAuIZfEgAQf6kEAPS6BABwDQQAdFICAHpdAgC4BgIAOikB
AL0uAQBcAwEAnZQAgF6XAACugQCATkoAQK9LAADXQABAJyUAoNclAIBrIACgkxIA0OsSAMA1EADQ
SQkA6HUJAOAaCADopAQA9LoEAHANBAB0UgIAel0CALgGAgA6KQEAvS4BAFwDAQCdlACAXpcAAK6B
AIBOSgBAr0sAANdAAEAnJQCg1yUAgGsgAKCTEgDQ6xIAwDUQANBJCQDodQkA4BoIAOikBAD0ugQA
cA0EAHRSAgB6XQIAuAYCADopAQC9LgEAXAMBAJ2UAIBelwAAroEAgE5KAECvSwAA10AAQCclAKDX
JQCAayAAoJMSANDrEgDANRAA0EkJAOh1CQDgGggA6KQEAPS6BABwDQQAdFICAHpdAgC4BgIAOikB
AL0uAQBcAwEAnZQAgF6XAACugQCATkoAQK9LAADXQABAJyUAoNclAIBrIACgkxIA0OsSAMA1EADQ
SQkA6HUJAOAaCADopAQA9LoEAHANBAB0UgIAel0CALgGAgA6KQEAvS4BAFwDAQCdlACAXpcAAK6B
AIBOSgBAr0sAANdAAEAnJQCg1yUAgGsgAKCTEgDQ6xIAwDUQANBJCQDodQkA4BoIAOikBAD0ugQA
cA0EAHRSAgB6XQIAuAYCADopAQC9LgEAXAMBAJ2UAIBelwAAroEAgE5KAECvSwAA10AAQCclAKDX
JQCAayAAoJMSANDrEgDANRAA0EkJAOh1CQDgGggA6KQEAPS6BABwDQQAdFICAHpdAgC4BgIAOikB
AL0uAQBcAwEAnZQAgF6XAACugQCATkoAQK9LAADXQABAJyUAoNclAIBrIACgkxIA0OsSAMA1EADQ
SQkA6HUJAOAaCADopAQA9LoEAHANBAB0UgIAel0CALgGAgA6KQEAvS4BAFwDAQCdlACAXpcAAK6B
AIBOSgBAr0sAANdAAEAnJQCg1yUAgGsgAKCTEgDQ6xIAwDUQANBJCQDodQkA4BoIAOikBAD0ugQA
cA0EAHRSAgB6XQIAuAYCADopAQC9LgEAXAMBAJ2UAIBelwAAroEAgE5KAECvSwAA10AAQCclAKDX
JQCAayAAoJMSANDrEgDANRAA0EkJAOh1CQDgGggA6KQEAPS6BABwDQQAdFICAHpdAgC4BgIAOikB
AL0uAQBcAwEAnZQAgF6XAACugQCATkoAQK9LAADXQABAJyUAoNclAIBrIACgkxIA0OsSAMA1EADQ
SQkA6HUJAOAaCADopAQA9LoEAHANBAB0UgIAel0CALgGAgA6KQEAvS4BAFwDAQCdlACAXpcAAK6B
AIBOSgBAr0sAANdAAEAnJQCg1yUAgGsgAKCTEgDQ6xIAwDUQANBJCQDodQkA4BoIAOikBAD0ugQA
cA0EAHRSAgB6XQIAuAYCADopAQC9LgEAXAMBAJ2UAIBelwAAroEAgE5KAECvSwAA10AAQCclAKDX
JQCAayAAoJMSANDrEgDANRAA0EkJAOh1CQDgGggA6KQEAPS6BABwDQQAdFICAHpdAgC4BgIAOikB
AL0uAQBcAwEAnZQAgF6XAACugQCATkoAQK9LAADXQABAJyUAoNclAIBrIACgkxIA0OsSAMA1EADQ
SQkA6HUJAOAaCADopAQA9LoEAHANBAB0UgIAel0CALgGAgA6KQEAvS4BAFwDAQCdlACAXpcAAK6B
AIBOSgBAr0sAANdAAEAnJQCg1yUAgGsgAKCTEgDQ6xIAwDUQANBJCQDodQkA4BoIAOikBAD0ugQA
cA0EAHRSAgB6XQIAuAYCADopAQC9LgEAXAMBAJ2UAIBelwAAroEAgE5KAECvSwAA10AAQCclAKDX
JQCAayAAoJMSANDrEgDANRAA0EkJAOh1CQDgGggA6KQEAPS6BABwDQQAdFICAHpdAgC4BgIAOikB
AL0uAQBcAwEAnZQAgF6XAACugQCATkoAQK9LAADXQABAJyUAoNclAIBrIACgkxIA0OsSAMA1EADQ
SQkA6HUJAOAaCADopAQA9LoEAHANBAB0UgIAel0CALgGAgA6KQEAvS4BAFwDAQCdlACAXpcAAK6B
AIBOSgBAr0sAANdAAEAnJQCg1yUAgGsgAKCTEgDQ6xIAwDUQANBJCQDodQkA4BoIAOikBAD0ugQA
cA0EAHRSAgB6XQIAuAYCADopAQC9LgEAXAMBAJ2UAIBelwAAroEAgE5KAECvSwAA10AAQCclAKDX
JQCAayAAoJMSANDrEgDANRAA0EkJAOh1CQDgGggA6KQEAPS6BABwDQQAdFICAHpdAgC4BgIAOikB
AL0uAQBcAwEAnZQAgF6XAACugQCATkoAQK9LAADXQABAJyUAoNclAIBrIACgkxIA0OsSAMA1EADQ
SQkA6HUJAOAaCADopAQA9LoEAHANBAB0UgIAel0CALgGAgA6KQEAvS4BAFwDAQCdlACAXpcAAK6B
AIBOSgBAr0sAANdAAEAnJQCg1yUAgGsgAKCTEgDQ6xIAwDUQANBJCQDodQkA4BoIAOikBAD0ugQA
cA0EAHRSAgB6XQIAuAYCADopAQC9LgEAXAMBAJ2UAIBelwAAroEAgE5KAECvSwAA10AAQCclAKDX
JQCAayAAoJMSANDrEgDANRAA0EkJAOh1CQDgGggA6KQEAPS6BABwDQQAdFICAHpdAgC4BgIAOikB
AL0uAQBcAwEAnZQAgF6XAACugQCATkoAQK9LAADXQABAJyUAoNclAIBrIACgkxIA0OsSAMA1EADQ
SQkA6HUJAOAaCADopAQA9LoEAHANBAB0UgIAel0CALgGAgA6KQEAvS4BAFwDAQCdlACAXpcAAK6B
AIBOSgBAr0sAANdAAEAnJQCg1yUAgGsgAKCTEgDQ6xIAwDWkA4DZGROJhNXsIwQAfB8SANDrEgDA
NZgAYPaJYDCovr4+9fb22p3O7JgEAPytJQCg1yUAgGswAcCc9VdXVys3N1enT59WKBSy+wkBAH9r
CQDodV8OAOZ/81tIH2cJAOAo6RqA6elp3bhxQ83NzTYQ0ASA70MCAHrddAAwTk1N2ULeaG6bZQQA
cIx0HwCzX5gdM30wJgDg+5AAgF43HQAWFxcVCAR09uxZFRQU2JOvpcUl5wLAyMioRkbDWl19ih51
eXn5+Y45P58q7M1tUyPQE+gjAOBvKgEAve7LNQDm/7t37+rKlSu2XDa1rw4FgGlb5eDvDtgzPfSu
fW+wu6dXQ0PDtp2KAIC/lQQA9Lov9wFIl8eRSMT+JhzpA5Buc3ixQTPoaWff6NzcrK0JMLfHxsYI
APirfTkA9A8ManJqOnU2FIshesJYNKqFhQUlk0n7OzBn/ea2CQQLyeT7DQBGs2LzI0wHAcSfMr2v
ZB7MEX+uLwcAU8PU6e+xBzxEL9n/hmVGUyPb2dltT7beWwBI/xARf46ZB3PEn6vZj0x1p6l5Mv+b
ZshJRA9p9/nJlK/t/5NTmplJ1bSmrxAwv5nfPAAgIjqtOZiZg5oJAaYmABHfrGl2Nf0DCACI+MFI
bRLiz5MAgIiI6EF/VQCYmJlXPJpaCSIiIv5+NOV38JcEgK7RqPrHogqOz9sEgYiIiL8fTfkdCEUV
GH/HAJB75Hjh1LLUO76oQGTRJgdERET8/WkK/8GZZ/IPTb49AOzcve/eyGTUpgVERET8fWsK/+b2
3rcHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
+I35/wEz2VXttIakSgAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formManagedIdentityPermi_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formManagedIdentityPermi -Theme Dark
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
}


#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

function Get-ManagedIdentities
{
	# Get managed identities
	$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'"
	
	# Populate the ComboBox with managed identities
	foreach ($identity in $managedIdentities)
	{
		$comboBox.Items.Add($identity.DisplayName)
	}
}

$buttonConnectMicrosoftGraph_Click = {
	
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			Disconnect-MgGraph
			$ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			Update-Log -Message "Disconnected from Microsoft Graph."
			
			$combobox.Items.Clear()
		}
		catch
		{
			Update-Log -Message "Error disconnecting from Microsoft Graph: $_"
		}
	}
	else
	{
		try
		{			
			Check-Modules
					
			ConnectToGraph
			
			if ($ConnectedState = $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				$ConnectedState = $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			Update-Log -Message "Error connecting to Microsoft Graph: $_"
		}
	}	
}

$combobox_SelectedIndexChanged={
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:managedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $textboxselectedIdentityID.Text
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAdd.Checked = $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Update-Log -Message "Managed Identity ObjectID: '$ObjectID'"
		Update-Log -Message "Service: '$Service'"
		Update-Log -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Update-Log -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service
		
	}
}

$buttonGetCurrentPermission_Click={
	#TODO: Place custom script here
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>