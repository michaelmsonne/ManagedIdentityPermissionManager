<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAJzwSURBVHhe7P1ncBzZ3qcH3gjtftoNzXzfD/t9
I3ZD0kobMWulHc1oQ3o10rzvOzPXm+7bnt3NpvckSIIkAAKE995777333nvvPcqjYJ6Nk4Ui0UVz
q3lpi/8n4gkUsrKyMrMy8/wy8+Q5v/qVIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiCIAiC
IAiCIAiCIAiCIAiCIAiCIAjC38O9f/kv/0XJd9+dKXns41/i4eFT8kgURVEUxY9KDy+fEh8f35L/
4d/89yW/+tWvlK/mX/yL/7zB09uPjtFFhuZ2GJjdEkVRFEXxI3NwdpvB+R0aOgb5n//nf4djef8c
33xzpqRzdInGgXlquiap6RZFURRF8WO1c3KT3OKqvx0AnvgGlIwt6ajtmaK+d1oURVEUP237Zmga
mKNp8JfZ2D+rfb6hf5bGgblfpv2z6rtfMO2/pfqcff6bh5do7Bj82wHA6/ETLQCoD6sZOG1Dv21Y
R98aPQNrtA8svnA8URRFUXQVVTlXVD9Afk0vBbV9TqnGrWgbpXlwnqr2UUoaeilt7HPKksY+yloG
te+u6556btp/y/yaPmq7JmkasM1/2+gKdS29zgWA8WU9jf1ztsTzM+dpG1giZDCDL9t9SenupmNw
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
lAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1Q
AoAgCK6GBABRdEIJAIIguBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJ
AIIguBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUA
CILgakgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUACILgakgAEEUnlAAg
CIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1QAoAg
CK6GBABRdEIJAIIguBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIg
uBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUACILg
akgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUACILgakgAEEUnlAAgCIKr
IQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6G
BABRdEIJAIIguBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoS
AETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUACILgakgA
EEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFA
FJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABR
dEIJAIIguBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETR
CSUACILgakgAEEUnlAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUACILgakgAEEUn
lAAgCIKrIQFAFJ1QAoAgCK6GBABRdEIJAIIguBoSAETRCSUACILgakgAEEUnlAAgCIKrIQFAFJ1Q
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
prt/w2E9pvlds0zOTY+ZkG5147u8W2yZLv+3hwx2ubfYcm9aB7kx+8W3rHn5r6xDGlvPvX044U0n
HmtftlkG3zkMHObQwh7TuAebayvcrLtMfcc9Xjnc1lnu3M4NNhy+zevmb2WW0TyWmRlgptSb5zIz
KcyymsMimxkW5hDELpcbj8fjm2O/tUl3WxMjv3KyJBUAKgAURdk5+XkBYJrFt8dOc9nc/hEWAL5p
amaKnjlhz7v3Ud5mzWYVPaaYsAqWd2//B2P+9qZYMYO/mY3x89tUAKgAUBRl52S7ADCXp6enGRkZ
YXR0lImJCWu99lEWAMrHGTMImsFxNzPFzdzcnPV6VQAoirKTs10AmG/8HR0dZGVlWWloaLDWZeZ2
FQDKB8W8P6YAWFpasj4w5ufdFPOaXr40x0RYsH42r1kFgKIoOzXbBYBZb5kBvqamhpKSEmZnZ1lf
953BVgWA8kHZfn+ePn3K5OQkU1NTuyrmNZn/GD9/zSoAFEXZqXm3B8Cs38y6zgz+5vaPqgDYjd8q
d2PMh8d8mHZjtqvi7XxoAbC29v7nW1EU5feMGVOdTuePswC2190/3f4RFADb+5bNkyvKx5TthsD/
rQAwjaqDQ6MsL6+wumoKBUVRlI8jvkF+3Vp/vXubycrKqrX++t0KgO3KxGwFMAugKB9TzOfyrxcA
Nh5PTjM0PGZtCVAURfm4Ms7Ye9f5Mjw8xuPHvl0CZn33uxUA725mVpSPJX+tALCKgPX1t7EpiqLs
oPjWXWa99rsUAIqyE2JmBvy8ADA/v/s7iqIoOzFm3bY9w+v/rAAwMVsAFGUnRJ9dRVF2c95dx/3L
CwBFURRFUT7OqABQFEVRlP+HUQGgKIqiKP8P808pAMyDKIqiKIqyc2K3vWZx5TcUABPzNhaX1xRF
URRF2UF5sbLGsxdrjP4jBcDYnM2KqR4URVEURdlZMYO/Gcc/uACIiUu6/tqDdQdFURRFUXZ25u3Q
PzL1twuA00Fn20YeP+VO/5hVMSiKoiiKsnPTPzzF9aa2v10AiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIj85H8AKLCjowUNiGgAAAAASUVORK5CYII=</Preview>
  <Form>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
Xyad/tR+/R+ADgpcLbsCAA==</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing ithems
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Determine the AppId based on the ServiceType
		switch ($ServiceType)
		{
			"Microsoft Graph" {
				$appId = '00000003-0000-0000-c000-000000000000'
			}
			"Exchange Online" {
				$appId = '00000002-0000-0ff1-ce00-000000000000'
			}
			"SharePoint" {
				$appId = '00000003-0000-0ff1-ce00-000000000000'
			}
			default {
				# Log
				Write-Log -Level INFO -Message "Invalid ServiceType specified. Valid values are 'Microsoft Graph', 'Exchange Online', 'SharePoint'."
				return
			}
		}
		
		# Get the service principal for the specified AppId
		Write-Log -Level INFO -Message "Retrieving service principal for AppId: '$appId'"
		
		# Get needed data
		$servicePrincipal = Get-MgServicePrincipal -Filter "AppId eq '$appId'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		# Check if returned data
		if ($null -eq $servicePrincipal)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found with AppId '$appId', Service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principal retrieved: AppId '$appId', '$($servicePrincipal.DisplayName)'"
		
		# Extract the permission scopes (AppRoles and Oauth2PermissionScopes)
		$appRoles = $servicePrincipal.AppRoles
		$oauth2PermissionScopes = $servicePrincipal.Oauth2PermissionScopes
		
		# Check if scopes assigned
		if ($appRoles.Count -eq 0 -and $oauth2PermissionScopes.Count -eq 0)
		{
			# Log
			Write-Log -Level INFO -Message "No assignable permission scopes found for service principal with AppId '$appId' service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Assignable permission scopes retrieved for AppId '$appId' service '$($servicePrincipal.DisplayName)'."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)'..."
		
		foreach ($role in $appRoles)
		{
			$roleDetails = "Role details: '$($role.DisplayName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		Write-Log -Level INFO -Message "Added all assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)' to the list for management."
		
		<#
		foreach ($scope in $oauth2PermissionScopes)
		{
			$scopeDetails = "Scope details: $($scope.AdminConsentDisplayName), ScopeValue: $($scope.Value), ScopeId: $($scope.Id)"
			$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)
		}
		#>
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

function Get-ManagedIdentities
{
	# Get all managed identities
	
	# Ckecl current data in list to not keep old
	$comboBox.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		# Get all data
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'"
		
		# Log
		Write-Log -Level INFO -Message "Loaded updated the list of found Managed Identity´s from tenant."
		
		# Populate the ComboBox with managed identities
		foreach ($identity in $managedIdentities)
		{
			$comboBox.Items.Add($identity.DisplayName)
		}
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

$formManagedIdentityPermi_Load={
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# Get theme mode
	$global:darkModeStateUI = Is-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	# Services to add to dropdown list (more to add soon when tested..)
	$ServiceComboBox.Items.Add("Microsoft Graph")
	$ServiceComboBox.Items.Add("Exchange Online")
	$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check installed/loaded modules
			Check-Modules
			
			# Connect
			ConnectToGraph
			
			# If connected, set states
			if ($global:ConnectedState = $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState = $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}	
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:managedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $textboxselectedIdentityID.Text
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			# Log
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$microsoftGraphToolStripMenuItem_Click={
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}	
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: $LogPath"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: $LogPath"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: $logFilePath"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at $logFilePath." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at $logFilePath - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"	
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click={
	$selectedScopes = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
	$PermissionsTextBox.Text = $selectedScopes -join ", "
	
	# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	
	# $PermissionsTextBox
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	$filterText = $textboxSccessScopeToAssignFilter.Text
	$filteredItems = @()
	
	if ($filterText -eq "" -or $null)
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>