<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAKeuSURBVHhe7P3nkyTZmt6JXRo/kLb8A2hGfiOW
tmYLkAbuAktgYNgliV3MQMwCcxeYuXMx9965t3V3VXdplSVTa6211lprrbXWKjIyM1KryFAp6uH7
ekRUZWVHZldXVWdlRb5P968i0sXx4x7Hz/sc9+PHfyUSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFI
JBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgk
EolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQS
iUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJ
RCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolE
IpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQi
kUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKRSCQSiUQikUgkEolEIpFIJBKJRCKR
SCQSiUQikUgkEomuoh78N//3/zrP1c0rLyg4Ms8/IFQQBEEQhE+Q0PCYvO9v3Mj7r/6P/4c8S4w/
W//gH/yDqpTsIgzNb2NItY3BuU1BEARBED5Bhhcols+t495DB1jC/Nnilj+v0NA/i7readT3zgiC
IAiCcBZ9P5MLXIfjeOvoElr7xn/aAISGReaNL+2RAZhD08CP6RxYRufgos15giAIgnCVaB6cNwfa
numfpLZ7Co3UuG4ZUqGBAnRdzxStyw3ts+FleNlmWofX5TRspX0azhPnjfPYMrKI9oGpnzYAQcFh
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
Gts7G6grToRvYBzG5tR+UeuftixqgxlnpiaxpNos82gDFbc2YdEek+1cU+uf1D5qceyPdbU+uSJi
fVO1e2oI+arQmFla18YAHC0AvgvkC4imp6e1fc4CgGGYkx45fsvYOOljb926hYqKClRXV8Nisajn
147nIED5trnfdcT2kfv2zv6rI9NJQ7Vb7TH7umQU/NHpJI5pHO3RHlMFg+O+vS1HpnNMc9iW3z1v
v8rAcdWCVpioHJ3OsQx7Dqc7fNxxX5b1cr2vrOvVbZFoVzZot/bfP5CO2r5cx/qkc7ffd8zjeMw+
39H2OJ53PLZ+eGWDfX7p7OSMWG6/C5Ftlc5d9gULAIZhTnrkWKb9Zo7qN9rb2xEdHY3a2trDY9zq
MSwAmGMTx99qcnLyrc/ExIT2WpRtlm1nAcAwzEmPHM/kIwC5L8e0rq4uraOXguD4XQXAHLvI30v+
Tt+FODp/yZsWAKNj41qF7VgGwzDMcYl09PIRgLyLLO/+yrvrcsJif8f4mHwEICuXxxnmuEReq19b
AKjn+weGtG+rlGKAYRjmWGVuHvMLi7C85rnJqRkMDA5pRcKftQCQFctBlWGOSxyvy68qAOR1LP9p
xsbGMTI6htHR5wzDMMcu8jHl6Nj/fXx4eBQzMxZ1XLMfy/4sBYCsWA6qDHPcIq/NP1QASOTtNHvk
EhuGYZiTErkk0DEQffX/twCQlcln/3JAlVuGOW5xvDbl3YCjBcDR1y7DMMxJj/TJ9ksDX+38tT5b
5VsrACSOg+rRt1wZ5rhGXqvymnW87c/XLsMwb1PkmCZFgBzjjvbVkm+9ANAWevgWKsOchPC1yzDM
256jx7mXxzuVb70AYBiGYRjmeIcFAMMwDMN8B8MCgGEYhmG+g/mTC4ANVQDIQhiGYRiGOTlZV/lG
BcDglJppZh0jamZZAMMwDMMwJyfSfz+ZXsezNy0AYuMSSpZswLCaQWaSyoFhGIZhmJMX6cefr7xA
/+jc1xcAusCQ+ueWFa1aYBiGYRjmZKd/dBb3ewa+vgAgIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIqK3y/e+97/2Gh+IwTFfcQAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	# Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		# Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	# Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
        Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
            SelectBackColor = selectBackColor;
        } 
        public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	# Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	# Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	# Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		# Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		# Set the text color
		if ($target.Tag -ne "DangerZone")
		{
			$target.ForeColor = $ForeColor
		}
		else
		{
			$target.ForeColor = [System.Drawing.Color]::Red
		}
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			# Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			# Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			# Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing ithems
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Determine the AppId based on the ServiceType
		switch ($ServiceType)
		{
			"Microsoft Graph" {
				$appId = '00000003-0000-0000-c000-000000000000'
			}
			"Exchange Online" {
				$appId = '00000002-0000-0ff1-ce00-000000000000'
			}
			"SharePoint" {
				$appId = '00000003-0000-0ff1-ce00-000000000000'
			}
			default {
				# Log
				Write-Log -Level INFO -Message "Invalid ServiceType specified. Valid values are 'Microsoft Graph', 'Exchange Online', 'SharePoint'."
				return
			}
		}
		
		# Get the service principal for the specified AppId
		Write-Log -Level INFO -Message "Retrieving service principal for AppId: '$appId'"
		
		# Get needed data
		$servicePrincipal = Get-MgServicePrincipal -Filter "AppId eq '$appId'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		# Check if returned data
		if ($null -eq $servicePrincipal)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found with AppId '$appId', Service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principal retrieved: AppId '$appId', '$($servicePrincipal.DisplayName)'"
		
		# Extract the permission scopes (AppRoles and Oauth2PermissionScopes)
		$appRoles = $servicePrincipal.AppRoles
		$oauth2PermissionScopes = $servicePrincipal.Oauth2PermissionScopes
		
		# Check if scopes assigned
		if ($appRoles.Count -eq 0 -and $oauth2PermissionScopes.Count -eq 0)
		{
			# Log
			Write-Log -Level INFO -Message "No assignable permission scopes found for service principal with AppId '$appId' service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Assignable permission scopes retrieved for AppId '$appId' service '$($servicePrincipal.DisplayName)'."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)'..."
		
		foreach ($role in $appRoles)
		{
			$roleDetails = "Role details: '$($role.DisplayName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		Write-Log -Level INFO -Message "Added all assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)' to the list for management."
		
		<#
		foreach ($scope in $oauth2PermissionScopes)
		{
			$scopeDetails = "Scope details: $($scope.AdminConsentDisplayName), ScopeValue: $($scope.Value), ScopeId: $($scope.Id)"
			$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)
		}
		#>
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered Managed Identities from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	# Services to add to dropdown list (more to add soon when tested..)
	$ServiceComboBox.Items.Add("Microsoft Graph")
	$ServiceComboBox.Items.Add("Exchange Online")
	$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}	
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			# Log
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	$ObjectName = $textboxselectedIdentityName.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	# Get data and get permissions
	Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click = {
	
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Log
	Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
	
	# Format data
	$PermissionsTextBox.Text = $selectedScopes -join ", "
	
	# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	
	# $PermissionsTextBox
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get data fo filter function
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	$filteredItems = @()
	
	# Filter elements
	if ($filterText -eq "" -or $null)
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}
$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process "https://buymeacoffee.com/sonnes"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}
$currentSelectedManagedIdentityToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$exportAssignedPermissionsToolStripMenuItem_Click={
	
	$timestamp = Get-Date -Format "dd-MM-yyyy"
	
	# Get data needed for the export
	$ManagedIdentityID = $textboxselectedIdentityID.Text
	$ManagedIdentityName = $textboxselectedIdentityName.Text
	
	$selectedManagedIdentities = @()
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($checkedlistboxListOfManagedIdentity.GetItemChecked($i))
		{
			$selectedManagedIdentities += $checkedlistboxListOfManagedIdentity.Items[$i]
		}
	}
	
	# For export for selected Managed Identity (permissions)
	if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID) -or $selectedManagedIdentities.Count -gt 0)
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for selected Managed Identity '$ManagedIdentityName'"
		$saveFileDialog.FileName = "${ManagedIdentityName}_permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID))
			{
				# Call function to save data
				Export-ManagedIdentityPermissions -ManagedIdentityID $ManagedIdentityID -ManagedIdentityName $ManagedIdentityName -ExportFilePath $ExportFilePath
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for the selected Managed Identity '$ManagedIdentityName' (ID: $ManagedIdentityID) exported successfully." -Icon Information -BoxType OK
			}
			else
			{
				$exportedNames = @()
				foreach ($identity in $selectedManagedIdentities)
				{
					Export-ManagedIdentityPermissions -ManagedIdentityID $identity.Id -ManagedIdentityName $identity.Name -ExportFilePath $ExportFilePath
					$exportedNames += "$($identity.Name) (ID: $($identity.Id))"
				}
				$exportedNamesString = $exportedNames -join ", "
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for all selected Managed Identities '$exportedNamesString' exported successfully." -Icon Information -BoxType OK
			}
		}
	}	
	# For export for all Managed Identity (permissions)
	else
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for all Managed Identity´s"
		$saveFileDialog.FileName = "Managed Identity Permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			# Call function to save data
			Export-AllManagedIdentityPermissions -ExportFilePath $ExportFilePath
			
			Show-MsgBox -Title "Export" -Prompt "Permissions for all Managed Identities exported successfully." -Icon Information -BoxType OK
		}
	}
}

$microsoftGraphToolStripMenuItem_Click = {
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the Microsoft Graph permissions reference"
}

]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>