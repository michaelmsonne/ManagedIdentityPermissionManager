<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAKVnSURBVHhe7P1XcBzp3qeJdUj3mr3XhRS6VIRC
q9WuIkbS7ow0O7uz0sxo5jPzfcf2OW0Pm2xD7wHQgCAs4b333nvvvffee4/ysI/izSJIsGga7CbZ
RPH/RDyBQlVWVmZWVr6/zHzNZ58JgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiD8Gh78V//Vvyg6f/5CkYeXb5Grq1fRY1EURVEUz5Su7l5FXl7eRf/zv/0f
iz777DPlm/kX/+J/U+fm6UPb8DwDM1v0TW+IoiiKonjG7J/epH92i7q2fv7Df/iP2Jb3L3Hu3IWi
9uEF6vtmqeoYp6pTFEVRFMWzavv4OtmFFT8fAJ54+xWNLOio7pqgtntSFEVRFD9te6Zo6Juhof/t
rO+d1t5f1ztNfd/M23n8XvXZr5j3z6ned7z8jYML1Lf1/3wAcPd4ogUA9Wa1ACet67U+19azQlff
Cq1986+cThRFURTtRVXOFdT2kVvVTV51z6lU05a1DNPYP0tF6zBFdd0U1/ecyqL6Hkqa+rXPrumc
eGneP2duVQ/VHeM09FmXv2V4iZqm7tMFgNFFPfW9M9bE84KztPQtENSfxjet3iR1dtLWv6C9plby
2XT9sy/+/0u1mecrH7/ON04zS+PA3Fst4+umfd3zr53mXW0bURRF8b3bMjRPTmUXWSWtFNb0UFDd
fSoLa3tIK2imuHGAguo2qloHqWgZoKK5n5qOEep7JqjvHrfaM0F1+7D2mpqmsnWQ4tpOShr7yCxp
J7+yk4Jq62cX1vZS2jREaeMgJQ0D2mP19/ln95Bf1UVaYYtW1ql1aB1Zpqb5lAFgbMnwtJC0FlbK
poFZOgfWiB0o4b8b/pf8H1vO8S+r3anqn6B1YF77kKaBuafOapcg1OPj97+16r1PC88m9b/22Drv
Z8+/Yv7Ngws0D85R1z1B48A8zUPzL7xufc8MteoL6J2hafDlebzonPb59d2TWuGtff7x8qnLLOry
ytNpXvfeF7bNif9fnl4URVH8mGwdWSSztIPK1hHtVkBN9+SpVMf4vMpucio7qWobom10RSufWkdX
KKzrJSKxgNj0UmLTSohMKqS8ZVgrqNU0LcOLNPRMUlTXpX12fc+UdlteXYkobR4kLqOU6NQSkvLr
tfmkFTZQ2z1FTdekNp06808vbtXKOLUO7eOr1J42AEwsG2lWhefgPKpC4PTMPEuL86zMbBLcF86/
Gf1P/M/tPvxvyy9TPjBO18gC2TkFFDeP0TWxSnFJCVll7bSNrdE2skzr8CJto8vWx0Nq5ZaePz+y
rL2mHquVbxtZonV4iY6JFcpqGqlom6J1aIriylYah1foHF+kpKKB6u452kdXtGmt71umfWyF2vYB
arumqO8apaZ9SLsMojZ8y9CCNq36rMr6JjJyS8kpa6B+0Prc8/lYl+25K1qLiJq2IZqG1Gtq+azL
3TI4Q3XbMM3Dx9Nal/14XVuGFmkdniYru4CS1nG6JlYoKi4mq7yTtrHVp9vg+fTPt83zzzi5bVrV
89ryLdEyOC+Koii+ZztGl8iu6KKqdZS6HnVffoq67mka+ueo652lrndG+6v9r17vUvfep7QAkF/V
TUFNDzUdw7SPqjJhgc6JdYKj0snPLSAnO5/8/EIy0rOISCqgZ2rjaVm1SGPfJCWNveSUdz0LAOrE
PK2omejYVDo6eoiOy6Crs4cngXFUdz0NAJ0TNPROa1cOmvrntHXomlinrqX3dAFgas1iLQiHl+gb
X2JuYZGOiWUW5pbp7OziUvdl/tu6r3BuzqN3bIPOsTnycvPJKu+gY2SWrJwc8qr7aOjqJ6+imYbu
MUoq6skta6RhYIG6ljbyK9toHpymtLqR/LJG6nomqapvoaCqnYa+cUqr6snIKaaqa5bO0RktANT3
jlJUUUtGXjk1XROUVtRrG6i6uYv8khpKm/vILyggo7iJ+q5hCopKSMkqoaypXyvEq5p7aR1fo6q+
iYq2UUoqaqnsGKO8uoHi+m6qW7ooqm6jrL6NgvJ6imvbKCiro7pznLqOIapbeiisaqG2c4QiFUI6
R6hpG6ahZ4SC0ipKmgZo6BqioLSGArV+I6t0js2Sm5NHdmUXHSMzZGVnk1/TT0NnL3kVLTR0q+Wo
I6+8UauoUdPcSn5VBy0D05RUNZBfrrbNFJV1zRRWd1DT1ktBeTNNQ4t0jC7TPrIkiqIovie7J1bJ
U/fU29U99TnN2u5pYlKKiIzPISa5gMiEXCIT86lqH6exb4763lntBLCgppei+j7qukbpHLeeEHdP
bRKbYi38bzn54PDQj7zcAuLSS+md2baezKqrBf0zlDcPkFvZrV051ioS9k5rJ4M+YelUVTewt2vG
PziOrIoOmocWtTN+FUhUwZ9d1kHr0KK2Dr3TW9S3njIAzGzs0jG+ojkyvUz71BL/NsVE5+gyPS2d
VBbUUV1SQ2/XBF2T63SNz1JSaS0wi6qaKalppLSum5rWTtJziiiqbaKgooXKhhaK63qpbmohPaeE
wuomrXJEZV0jBRX1ZGQXUFDdTGFFPVUdY5RV1lDZNUfPxBzlNW0U1zRR2zmmhYPCilrSs4sobmgn
v6SaiuZeiivrKapspLpzjIpa6zzLmwapaemipK6NssZ+eua2qWlsJC2rmLKWQepa20jLLKCovo3C
0moqWocoLK2iormb3OJaqlu6KaxqpLiqidL6doprO6jrGKCwson67iGKKxrIL63T0pe6spBfXktx
bRellbVUdc/RMzlLsQoqtW0UVjdTUq22TQ81LR2k5RRRXNtMQUUrFfXNlNT3UdXYRHpuCUXVTdol
p4raBgoqGqzbpqaVovIaimr76Jpap3NcXRERRVEU35e90+vk1/RS0zFBY/88TYMLFNYPEB6RwOT4
GKPDw0xPjhMXl0pGWbt2FVeFBHV1t7C2j5LGAeq71NXxDa1gV4V8aHQmFWXlZGTmkZNbSGFBIVFJ
hfTP6bRpOsbWaBmYpbJtSAsfzdot4znt1kBhfR++AdGUlJSTmpajBQm/sBQtADSp2/HaWf8C2eWd
2lUHtQ79czs0tPWdJgB4Fc1t7dM1uaY5NbdC4fAK/7uwPQq6NuhsbCIuKoXc9AI6ekbpmd6iZ3Ke
kqoWGruHyCtrpLFnmNLqZooq68gtrqGsoZ2KpkGaega06QrKa8gtraOqpYeSmhbt7LmssVsrgMtb
h6hr7dQK3dzCCmr7luibmqeirpPqlg4KKxvIK6mhqrmLvOIaarpHKKtupmFgmoq6VsrrWimu76Ci
vp2KhnYKKtqsZ955RTQMrTAwv01tUyvlLWMMLOhp6xsgp7CK6q4RKmqaqeuboqKmlabBKcpqOmju
H6O0poXS2nbqu8fILyylvG2Y8opqLayU1XVQ2dhOYUUjZY1dVDV1aJdgahpbqe6ep29abZtWGroG
tCsgjT1DlFa1aAEmt+TptmkeprGr37ptyqrJLaujqlVtm2YKSqoob+qxhpP2Ye0qSWXbBH0zm3RP
romiKIrvUdWRjmoBUNc1SfPgonaPXhXwYXE5BIYnExSRSlBECkFRGdR0TT0tiBe0gry4rp+y5iGa
eifondqma3ydvpltsktbCI5MJS4lX1PNo6iuV3tNTdM1sUnb0LxWMbCgutd621dd9R1b1eoKqPeG
xWUTnlykPY5JLaJ1xHpLXJtuZJncii46x1e1dRhc0NPQfqpmgF5F89uH9ExvaI7PrdE8sYRb3SZN
Qyt0traTm1VMaVElHb1j9M1u0zetrgIs0zu9Qe/UOj1Ta9plk86RWS3FdE+uav/3qL+Ta3QMWWtW
9k6v0djZQ1ZeKQ2Dy/SOz2sVH9Q0bQOTtA7Na/dE+mbU/Fe16Vv6J2gbXtQKwPbBSZr6Z+gaX6Fn
ap1u9XdihdbBGS319Kj5qM9SgaS+i57ZHWvBObFC96T6IlQvSZt0DE3R2DdN59jy0/mov2tP52v9
q5Zf3d5oVuszsURz35RW30Hd11fL19KrOltYpXfKuo7PP8N226htsabN61Xbpl3bNgvafBo6urVt
o+o+9IzP0dg7ScfY8rNl1+YpiqIovjeHFnQU1PTT0j9HnzrhnVLH8k0G5nT0Tm9rZ/Tqr/r/+HXl
0LyO0vpByluGtDJpbMXC8IKBoQW99nh0xcLIsllTPR5bMWuvqWlGlkz0TKxS0zlKQU0ffeozpzfp
ndqgf8b6WUo1ff/sjnVZtOWyTqd6AMyt6NbKCrUOI8tGGjsGThcAlnTQP7vNwOy29ndifoPl5TUm
FtbpUwXexDJ948v0Ta0zMGedbnBuR/s7oP4+dXBeLaBa0OfPPX/eQP/kMrVNndS0j9E3p3v6vP7p
NHrt/+NlOH6vev34eTWN2si2n61e157TNtA2jR39tI2uMTi/c2Jear5b2v8vzEetzwvze3G+x+uj
LcfxOs1uv/j/s/dYl912+Z7NS63Hieeef4aBvsklaho7qekYp18t29PPPl7G4+9HFEVRfH+q4259
z4xWo7+kfpCS+oETqv+PPfn8AMV1AxTW9Gtn4erqsboK0NQ7eSqb+yat9QbGlqloHdeuAhzPU1ny
Co9f0z63uo/SphGtzFPrML5qoalj8BQBwN2raEmP9sbjAk3dlzh2QBXMqrBTBfUrCrC3cl7P8JKZ
4SXjy6+9M3UMLRpfGUQ+aj/IthFFUTz7qrPg96k6AVO199tHV99CVX9gSzs57JvZomt8ja6J06uu
Imgnu3M72qX/l+f/ZtV9f1WGq7J8Yn2P5s5TBAA1etCyCgBzOlR/AOvbBlbWt1nZ2PlFrm7+dq5t
6j5tt/S/mWq/+a3c2Pl03dwx/rbqTL+pW/pP0229+Td1x2D5bTXuvnd1pj30b6nO9PS92vvf3uP3
2s73Bc2v1mjZY2XbrAWIyfX9twsA6sx5YtmAyWhAt72Fbmf7F6nX7fxmGvS6T1qjQf+bqfab30qz
yfjJajGbflN3Lebf1L1dyyfp/t7ub+rB/v5v6uHBwSfl0eEBcMiLHHF0eGj1SL12pAUIdQXjFwcA
g8HA9tYW29vbv8idnZ3fTJ1O90mr1+t/M9V+81tpNBo/WU0m02+q2Wz+TbVYLJ+ku7u7v6l7e3u/
qfv7+5+MKvCown1jx0RR+wxpdePU9i+yu2d9/uDgQJOjQ7YM7yEAbG1tYTBZ07Z6TWcwcXCwp10p
kADw8WhbKH9IbQvlD6ltofgpaVsgf2htC+QPrW3B+KloWyB/aG0L5A+tbSFprx4cWAv59rFVPn9S
xf/tcjb/9Q8Z/D+u5XIrtpXlTcOzEPDeAoBlz0JDdhw+4dnsHR6wMtLEPUc3prb3tAsRu2YTJsuu
tiDqsdFsxmgwYN61aJfmbQvq96VtgfipaVsof0htC+UPqW2h+ClpWyB/aG0L5A+tbcH4qWhbIH9o
bQvkD61tQWmvqkJ9cUPPP7tX8F//mMn/83ou/8ONPC0A/J++z+BOXBu7+wfWWwDvKwDss09p8EP+
/b//G4vGA6qTXfg3/+YLxpc3qMzKoqVvhKH2RmKiY2kanGBqcIDpuQUGO7tZXLPWC7AtrN+HtgXi
p6ZtofwhtS2UP6S2heKnpG2B/KG1LZA/tLYF46eibYH8obUtkD+0tgWlvaqIrRzlv72YxX//tPA/
9l9ezeFf38zXxr6xVgl4TwFgj12qkqNwvHqf9Mws4qN98HYLJdLbnX/49//A9SdPuHfxJq5unjz2
DCTE3Zfajj4i77vSPrmJ2aB7qbB+H9oWiJ+atoXyh9S2UP6Q2haKn5K2BfKH1rZA/tDaFoyfirYF
8ofWtkD+0NoWlPaqwjOrVzv7P1n4K1Ug+O8uZVPcMft+A8A+e+SH+JCUVIjTT98SVVhCvJc/3i4P
+eGyM6VNVfjc9qB7sI9QZ2/CAnwIDA3h6nfX6JzVYZEA8EG0LZQ/pLaF8ofUtlD8lLQtkD+0tgXy
h9a2YPxUtC2QP7S2BfKH1ragtFcV0eWj/F9fcQXg/34th391M4+WkeX3GwAMJj2j3R0Mj88z1t/H
7PIC3c2dzM9PkREdQXppFZ3NXczOz9Ld2sfsZD8RkcGk51SwumWQWwAfSNtC+UNqWyh/SG0LxU9J
2wL5Q2tbIH9obQvGT0XbAvlDa1sgf2htC0p7VRXq82t6/slV1QHIeBYCtDoAF9K5GduKeXf//dYB
OG4FYDTqMZpM6HV6TBYzeoNBa5l4sLeLWf2v12PZNWM0mZ8Gkv0PVvgrbQvET03bQvlDalsof0ht
C8VPSdsC+UNrWyB/aG0Lxk9F2wL5Q2tbIH9obQtKe/W4CWDz8DL/7FahXfL/v/yYxb+8ksOl8CYW
1/XvvxXA22hbKH9IbQvET03bQvlDalsof0htC8VPSdsC+UNrWyB/aG0Lxk9F2wL5Q2tbIH9obQtK
e/a4KeDihoH0hkmiy0co7pjDaFat8D5APwBvo22h/CG1LRA/NW0L5Q+pbaH8IbUtFD8lbQvkD61t
gfyhtS0YPxVtC+QPrW2B/KG1LSTtXa2Af0VPgMeFv/X1o18fANTBXALA2dS2UP5UtA0En5K2geBD
axsIPrS2geBT0TYQfGhtA4H4Ydzbe334OjzYZ1Nv+WUBQA2RO7aoe6lAP1mw2xY4n6JqO9huG1EU
RfHTVJULet3ry843eVyeaCexr3j9bVRj8Sytq9ESde82AKiFW19fZ2FhgcXFxU9Wtf4rKysSAkRR
FD9xVeV4VeF9c2WB2eVl9IZXXz3f2t7BbDZpBfSWzWsnA4Dt+97W9xYANjY2tMJPJR112dH2Euyn
olr35eVllpaW3skXJoqiKJ5NDSYL033NuDrcx/GhG23DS9qd+b29Aw7397Qyw7J/CIdGBnoHWNnU
s39wxMGuGYNpH8yrpCXlsKHfpigji6G5bTg80EbZNBitt7gMBlUm72Cx7GLRRoLc1W7BqFsBu5Zd
zGbjs9DxXgKAKvTV2a8q8AT15e4xPz//QgDY2lLjJexjMRnQG4za8LgqHaovToWGnZ2Xd5639zXz
2tFp6fLXXj4SRVEUT+nODvu728QH+lLWNcu+bou6klzCo1LIz40jKDGb2YUFihKjSExM4pu//o3C
pl6qciOILqhnZrKbCK+bfHPDB/2ehcQADy46upNTWUxlcw+TQ93U19XT1zPBzsY8FbXVtFTVkJxd
RFtzM2nJWdQ2NVBb3cGm0agd/99bADg+41UcHh7CgZn67HQ83Dwpbxu2LSNfz9HRs4cmg5G9gyMO
VV8BepPNZEcc6WcIDIpGd3hEZWYceTXdGC2qpuPp6a8po6Cmk909NVjCEfvGVdLC/fDxDqR94mnv
Sa9gcayf3vE17bEaa1mts1LNQwUAdTXkWQDYUelMR2FSLLU904z3ttDYNam9d99iZGlxWSuk1bQq
MR4eHmj3i8y7B+xZzFrSOzg8sA6oZFav72PU67QmHgd7Fu1zdvcPOdgzPZ2XXlufPbMRnd7Mvmmd
yvI6Vrb0L4cDURRF8d27o2PftEK4XxC986otPmRFBODp7MrXv/8nLvzwE1EJGUR63ON3f/wLVx+G
kB0bzJ9//ye+v3SNa3ceUlaZj4t3JFsWIwlBAaTnF+Hj6cJjN3cee/pR2TqMfmebgwML0W4X+NMP
/rRVxfH//U9/o7Onid//x/9AQtkw+3smbZk+SABQzHZV4R+Wwdz0LMMDU0wONVLV1s3Wzhr15WW0
9k2yNDdBaWEpE8smzJuT1HX0olozjnbWUVlTi6uTA0VdK6Ab5vq1R8zvbNFaV0Tf/Kr2GbvrQ3z5
+6/oGB/j4Y+fc8U1ifnlNTrqSmnsGGRibJjO7l5aGsvomlrEuDlPTU07JpOBzqZy2ofbcb9yk/M/
XCI0o1GbZ016DPlVHcxMjNM3NklPZyddnV20NDQytbjJSFcz5Q0ttDYU4OYWTE3TALtHKqS8KQDo
ODrQ4Xfrey46x1BWkE1GYT1tjSU0d9XheOMWVb1zWMxmpgdaSEnNYXZpmY66fCraupmdHiYvM5vm
7lEGu1vIzCxgcmmbmeFmylt60Bt2qCvNo6wkj+uXbtE8Os9QRzVNgzMYthYoSgngsmMAy3qztgPY
fn+iKIriu9e8u0tzYQoubsGkRUZz/5435ZVVPLlzlYCYRGL8Q3G55MjF6ze46uROUmQ4D2/fJjwl
i4hgfwK8nbl5/wm6fTPxnp64uPsQGJ9LZXEY5+66s6nbYXx0FoNuiVCvh9x08iIiNIir1+4RGRXN
9UtXiEirwmi2fLgrAIrmkkyKG8e1x4c7k0QFeRKeGMadu/fx8wsj3MeL6zdcCA8NJ8gnlIfXzvH7
r77hkac/sVExFKZmcfH8ZSoHN7UA8OCBFzm5KURH+OAeHseaBSxr4/g+9sLP349Ab29c3QMI9Pcn
IS6Jkqws7t16gKebOxGR/gQlxhPm7cq583eJDYsiMSkUn4CHXLx8n/tOTkTktKn+CokJS2DVcEBZ
VjSurq44OvrSUl/M9XNf8ref7vDYLYK41BgePnLG2zsIf09fWkatgeRNAWDfvEZGfByh4XH4+4Xi
6fqYqEhf3Lyc+OrcTVrG19EtDxPo5kJqYg6JoYEEB3vhF+rNlSt38fEOwMPpHleuPyTQLwAvFy+u
nvs9//zldzi7qi89iuzoML6/6ERaYjRf/PEf+POFG3h6exEZ7s31x+ESAERRFD+oO5gMOtrKi8gt
rGRodIK1LR2T/U3kVTWwsrpOY0kB5Y3t9HW3MTw+TXdLBeVtA2ytL1CSl0Vz96B2a3d6oJvs7FzG
Z2ZJjnpCRm0Xxq01RoanWV+bZ2hqhpXJYaqautlcW6K6sp6FtVXG+odY39Z92ACwPNiAj38sPZ19
FMZFEJmYQnlxCt9fdmZscZOKlAB+coxgW79GyOMHXLlwmeiYeIJ8npCQWsRYVx9PXJ7QMroFu0vE
RiSQnBBNYXEeQaExLBjBuNhHZHgi0b7uhMYmc+/OA5ycnCmubGOgsZInAUlUlmSTm5dDfGI8KfGJ
uNx14PrNuxRXVZAY5YtbYCqFORlkFndxpLpTzEskraCerqp8vvzjN8SVNlKdkITHPQ++/dv3eIXm
0FhfwqVLt6nvnaG1PIvSlumfDQAHllUiA8PoHOjl+td/4qvvb5FXmEt4sDvX7njRP7vN5nQHXq7e
9HUPkeDnSXRyCkkxfnx3xZ2J+TlCHt3mjmcqC7MDOP30E5d/uExEdDyuD51JzixjoL4Md49gEoK8
uXrFgai4WB46u5Gfl8oDF38WdRIARFEUP6w7Wv2vg/1dTEYjup0djOZd7fatKjt3Dw7Y37VgNlsw
Gg1av/17qs6WTlUIPNRu/R53tX94dIRlZ42unl7WtvTarWKDQd3a1WEyGtAbTexqXe4btD4BDHrV
Nb+6//+eKwG+VAfgaJ++mlKCAkPpHJikuy6FuJwyhkbHWF7bZmqom9qmPnS6TYaHJhjrriE6PY/l
bR31eXHEJOXTXFNKY/sYR4cHNJQWMzTaR0ZCEBVdE083xCq9/ePsmvdYX5iiuqaFuZlJ8hLDSEkv
or1nHItpjdykIIrahlka6CY+Lp3ZhSnyUkIobupibHyG6dEOSksb2FP1Cvb1FKfGEBaXRnFZHUNT
SywNDZAUFUtqZgp3b94gMjWPwdExZufXmJscZWZ5Ryv4XxsAtncw6jdpb25hYX2btrpKmjpaSIvx
JbeujebyXGraRrTamp1VmXi6B9HVN0BhaiAJeeW0d3YzM79AS20llQ3dLMxN0NHZR3N5OmHpRczO
z5AW7kNMch5l+dk0tXVTkhFFSkUb0yPtBD5xJbWwmm2DtSKI7fcniqIonhV3MJl+2cncew0A6rF9
s8vM3Ibtky/xulYAJrP60na0+0Lqfr+q4Kgq+Vl29zAbVauAbUxPR21SzTt294+sgyiZ1eBKOswW
1azDhE6n156zPG1Koi4P7R8esb+/y+7envba3sGhtSmJUaVG2N+zvLL9qSiKovhp+F4CgHJzc5O5
uTmtDbzqCMcuXV1ne3vz5edtnJ2d1f5KPwCiKIrix+J7CwCqsFOdAanCb2ZmRvv7KarWXYUgKfxF
URTFj8n3FgCUqtDT+jx+RQ95n5JS+IuiKIofm+81ALyodfQ99fijLhC1UQJf8bz4Cft89MiXXxNF
UTybfrAAoNMZtA53dnb0WCy/rMbis3lpZ9Y6rZKc3mB4Oi/V7a3+pWnVNNowpAYDZosFo8H6vuPX
1PsN2rys3fCqwRlU/QXb+bxKtS4mkxriVC2DFA72qtrXNjfW2dpRI3i9/ntWTW/UvnDyOTWQh8Fo
fOP73pVqf1afpZoWWYfefUU30KIoik/9IAHAvLtHR1kCtx/HYt6Z5Na1O/QsGqw15HfN7O7vq/5z
tf7wzfuHHB3uav3jH2itBy0YTRZrTXiDHtUx8HBbLeUNA+zv71CYlc3gvBHMy2RlFrO1q/rvOcBs
Ut3lqqn3mJmcZGZmlt6ePuZWtjjYs3anazYZmJ2aYG5561mN/fKkWNLKVCdAcKDaYlp2te6Ite59
n7bP1BmM2nLsGtYZH59kcmKClU2j9h6LVlv/4On67DwLG+LZVA2m0V6Wzm2nB7j7JjK9bta+Z9UW
d0/bb484OjjQmnyadGsMj06xdwQH+xZMlj3VuTPTE2Msrlu7/txV+8ee6t9S7c/W4Kna+R4d7mn7
vNpl93ZNGE27qv0sZtXts2pSurenhWg1TsjBrklrwbGjV/vhEWazCreqy+sDFqanmZqaYXpqmonJ
KXRmtQxH2r5uUtMcHWotTrRms2bD0+D78nqLomj/vrcAoA4sqhKgUh1EG/Oi+eLCPdqa8vndH87R
1N5DVlKC1ktRRX4GQSHxjEwt0VKURkJmLYvzYyTF+BBd0MD0aBtxSUkMzq0w0JTOxR9/IqqoG9AR
ExpJVUMdcf6OXH4YzmB/PQkZuXT29ZIRG016ZhZ3Ll0iIC6T+5e/45LjE9pHZ5gd7mJ0ZoGR7may
svJIjoslPT2Jc7/7jqKmbkozw8iorqOztY7Q8Egi4uNJSs8gp6yJpelhMpJSyEyM4sL3V8koaaC/
u57IiGAaBvqozEsnKDSegal1jHprZUjx4/ZkQXhy393bM1GSEkl0Rj6h3v5U1jWRk5VEXVc/5QVZ
BEdGE5OSQlJ6LiXl5VRW1FGSm05OYROddeUkJ2ZTVFRDb3cjMZGB1PT2UlOUTVBwDN1jK9pVsbaK
PGKTSpmbHCYu2JecsjbGesoJioqma3SQjOhwonOLWd9eojgrhryGHvRGI2szw8RHxNDWPcFAayFZ
5eU8cXbg3HfnuXTjAYXllRTm5RISFEnH4By99WkEhMfR1NZBamwc9a1jGIwGNl+xPURRtB9fd1X7
vQUANRqg6gtAaVQHucpcHjk543zfARePcMoKc7l5/iv+/MV33H7gR1J0OJHR6aQHuvBPv/+GO/dc
yC/OxNfLk++/+At//fZvXLx8k7DYaKKiQokp7gQMpEeHcNvhIXmFWTx86MyFv/6Rry+c52/f/IB3
UDwJAW787QcnEpMT+f6bH4iMSyYi1AdP32C6plbprs7im79cIDQmhSCXO5y/9Ji42AjiE2OJCPfk
0mVH7t92wumeM48ePcbdL4LivFxuX/iaf/z9l7j7RxAXHc4dx0dk56Zyz+E6t518iQ8PIiK5Gsue
SWsFIH68qn1V/T2+x3/8/9LSMmaLieq0UM5fdiS9pokw5xv86YsvOX/+BxzuOuPk8ADHe49wfvQE
l4cPcfcMxOn6eRycQ/B1ucNPP93m8aMnON5/RE5eGs4PbnH1theJUSEERZdxeGQk5OElvr98H9cH
bmTnV9KQl4WHlzdZOYlcvngF/+B0UjIiuXPlEn/+8x/54nsHRjctjNZn880X3+Dp/IRzf/1nvj13
ji/P3SQgKITA4Aitu+1zP9wnNSmR+zcdCImJICMjgUf3XPjh268Iiq5Cv2dm5RXbRBRF+1A1QVfH
tNXV1ZfqMb23AHDcEZD6wL39XWryM4gKjSY6PJiw+Dicvr/Ho1sP+etX5/BNqGRqpIX71xxxv/GI
K9fvcOO+K3nZKfi4Pubupat4+ocSGxNJUKAfXm73iSlo1wJAckQgDk6PiI0OwuH2bZyuXScwIhp3
N09KmwdoLknk4mVHwkLDuXHlKmlFLRRluvO9czCHaoyCoiS++dstOkenyYv15sbDMMqL0gkL8SMw
0JP77uGkpWWSnJRKako6qWlx3PnOSVv2r8//hJdvIEFBwTx0fkRsfAT37jkSklTJYGclIXEl7B3u
PqtAJn6cqjN+9UNRj4/33ePX9vdNFKXEkl8/pl3CT/G8x71HXoSFBhIanUxqaiYJ8SmkpmTh9/ge
zp5hxHi7cvnGfaKDg7n10w/a2fhjV1fi4iNxfnAP36hiRvvqCIzI5+DISEGEHz/9eAUHxwckJmRQ
nJqGj48HMXGRONxxwNsngsj4SFydnHjgeI/QhGwWt83MdNVx/9Ilbly/icP1m4THJuLl4a3tj8EB
gfh4POKOayIz0wM8dnTSwnNqdCg+3qG437jEPe8Etnf30b9im4iiaB+qlnjqKsCr+qJ5rwHg+LKq
qkQ1OzHK2PQSFrORifExhrt7yElJpaS2iaHxGZaX5hgZGqOxOI+MoloGu5q48Je/4x/uhTA3M0Z6
ZiZjS+v0NhSTmJbJ+NwqBsM2Y2MTTI70kpYUS1PPCNNDbaTlFtIzNMrM3KLWFXBHcy1V1Y3093fS
UltFQKAruQ197O+amZ8ep6W1k/nlFSZH+mnrGmJ7e5WqwhQqW3qYmppiZGSM0dExxsbGGBuffLbs
lS1ttNZV0tAxxMJ0L+npafSNTTA+PsPi/DTDYzPoDa/ePuLHo7o8ZhsAjl9T++70+CgTM0sYDEa2
V6bIyUqjoWeQ8bFxRsfGtf1D7YcDfT0MDI3RXFpMVXMXI20tFBaV0jc0yfx0P5npKXQNjzM+Ps3S
4ixDI1NavZeBhmryS2tZXZ4lJzmOyuZB5seaycgvo7k2n7u371Ha3I3RuEVlQRqlrf1afYGN+WkK
MzIZmFpgpKOKjNJaRkZ6aait0mxu76Knb4yVlUWmJyZJ9nXkX//9n0iu7KC+MI/OkWmtb3Db7SGK
ov2ojmvr6+u/XQBQf9UBSx3stH7wVU3lpxWR9vfUgAh6rTtbNUiBGghBVVpam5uivKKS/qkFrTKV
qoRn1OmsXeMeHj6tuf+0hr/JpM1LVcxSFQYPD/Yxm4zaNGoQBNW17p7qQnd3n13dCk0t7WzsWAdE
UMu1u2vRammrioEWNejCjo69/UOtW15Vk9pao/p5zepny75r0eatuuM1GExaRTDz02l0evU+1Z2v
VLL6Ndqm2Xflyc94UwA4rll/3FJEVbxT37Oq7Pmq/UK1ClEDfahwqYbcPNAqpBq1/eNA7R/HrUZ0
em2wDjVPo2WXw4M9bV9VFVd3zUb0Rov2O1hfmtcqqapKgmq/3FfdRZutlQC3dXqtgqBZfbZlj8O9
XYxq8A+1T+7uaa1t1HgSqtWMxWigo7GOypYuNgxPKwGapBKgKNq76rj2mwaAt3ZrSytA1cHTYlOI
qhVQfd3/IvV6rZBX8zUZDNoB96VpxN9Mdanq5PesCmZ13+p9qBXmT38MbwoAv7UqKGjNW39laxLV
HFEbgWxvF92J59U6WzusUmFZFF/25O/yJZ+G4oPDAw7UOCT6N7V8su5rtgOQqX38bZvJ7pzoYM72
NfFFz14AeI3HhUJnZyfNzc20traKdqD6LltaWrR9Rh1sjndYNYDS2traO1cFADVvtS8d71MfawB4
n6r1XV1dY3padVktii+r9o3FxaWXCu1j9QYTq9O9+Lo8xs03lqG5be0K7a52pcvE/v4e+3vqitQu
u2Y9szOz7Bgs2mBkWrPXwwPWVxaZX1zTrrpa1NUy9T51Fffpyd+Oav6qrqSpK8VP36Pb3mRtdZW5
uXl2jBYO9lT40GPZ29OuvqmTu/39/Z8JJJ+GH0cAOHHp1XYhTqs6SxwfH9cCwIuXX8Wz7sTEhPa9
qlEP1f6hCmj1/PtCfYYaolkFjtMEADWdFk5esV+eVdXZU2/fIGPjU8zNLzI7t6D9nZtf0B4fO3fy
8fwi8wtLLzz3Km3f87rpX/f8m1Sfr/l0mV+n7bxfWEeb522nfdN83tbjbTa/8Obl1aa1eZ/6/1Xf
yYdyZnaezq5erQB51XHbaN5jqDEfr4BE0qJDScpqYGKkje7xWabGBymtqKSiro765la6e7poqG+h
r7ebuvouFmenaKhrorGukZ6BEdobS2kZGmVuaoii/CJ6Rhe1Qn1zcYraqiqGptdZmxumpLSSjJhA
HrgF0tDex/REN0UVVcyvLtFaU0FZbRerywvUVNQwMbOKXv/ycn9KfiQBQPfs4G67EKdVBQBVEW94
eNj2eC6ccdRZ+ckAoApnddZwpDrBUZ0wvUMV6nNOGwDU8xurS9qBWN2ael0IOK4vYHs5c0fVb1E9
BL7piph228uoddjzrq+cvU617gODIxxqHWadHq1zrN+Ufe1YcJZQ9TT2rLvemWN8Yorlp03IlMfN
yrRjvM7IVGcp5774HtewBHKTo/jiz//Ilz9c5uZ1Jy79cImLV29y++59XD088fKL5PHti5y76EK0
zxO++vI7PFxD8fX1IizEHa8gL65fd8LD1Q33J4lsWQ7ZGG3m8ld/4OsrLoQH+hIfk8Ljq1e56+JD
VEQE/n7u+AT54HTfkQf3XPH19sfP3YM///4vpBX0YNo1asv6KamOZ+o7UrX/1e/8Nw0A5r092vJi
uOeVwvL8IEnpZWhVnA73tQp42oH54ECrdGdQlfhUZSmD/mk3v88X+DgADA0N2e6jwhlH7bC2AcBi
UT1Avp8AoK4unCYA7OiM6FZGcXO4w6MHLmSU9mnvVxXujpdPXfJU9Uo42mVqdORpr3+qhz6T1tRU
v7HI0Mi01kOg6tHPbLY8rQBr1grTo6MDLSAszk4yMDyNRfWGqSr3GdQlUNUbobUSrLVyqwGjeZfD
p78dVWlQ9Tqo1ZlRl17NRu2sTPWcqSrFWnYPtGVV93INRlWX4Hm4UOs+ODzJkXkex5t3GFnbpTjK
HZ/kumffy/bqNOmpucxtH8CBnpKEGNzcPalum342zUtYVigoqNN6y1RUJwYRmNthM5H6EhbJzipl
dHSC9R0T3Q1VtA4t2071AgemJXycnQkJCcLTPx2DqjP8GtqqyhmY2dYe78/388gjhJGpacL8gqhs
H3861QHRXo8p6F1/4b3HjLRVk13Sgv5VmWdXx/z8MstLK8/W9WUOyIsJxCsghEcuAfTPW3uEfBVr
492UNwxa/znaJczTnar+GcrSY4lJr+YNq/peGR2bYOVEAFC/j+OOZYyWPQYa8vEJzdGmrYnz5sdL
jkRGBPDQPYzUlAwS45JJSUknIdybi7fciAsL4sa1OwQEhOLmcJsffrrB1Rt3ySstIibYlR9vBTI9
O4y/dyTb7JEfGMij2858c+577rv5MzQ4QXpIEMFhsfi4OfPoSTBV5bl8/91P5Nf301qVhZe7P87X
L+MTXYhxf/+1od1eVd+TOqlStzx/8wCwu79Lc0Ecf/jLDYrLy4hPyKWzJp/QyHRqauoICQshPCaO
7PJWZoYbCQoNoXl0hpHOHqYW1p6dUUkAsA/U96d2TkVPT492KVrtqB9lANCb2Jjpwu1xINkZCQSF
pNNUm0ZUVhEN9dX4+/nhHRxCZHw8KZn5FJRUUFaQT0hwHO1NbcSGhZOeWkB1XROVuaEEp2bR2lpH
kJcXyXkNtFUX4R+QwOKmmYYMX7656s3ESC1e3p40TcxjsexQWZCJX1g4YdHJNPeM0ledQ3B4GnV1
9YT7ehOdVqX1ThkVGkR5yxgDjRm4eflQ1dFPfXEs4ZmlTM/M0tM+wPaJsQq0ADAyyYFhjns/XSSr
ppWg+5fwTqqjqzyLpMwKrTmhq2sQU1tHsLtM8GNnaluGWFnfoasmndSyOnq72okODiKvepD1uQ78
H9/kjl+mtVA80FOQEk9KViEdvcNsbm0xNjLB+EA1Po/vcNstBLe7P3EvIIWasnwqO+a1M/yWkmhC
MosxmlbJS/bDP7UM/SHsb4/j5R7K2PgQkf7R9Pa1E5cQQ9/CDvNdlURFZbO4tkFtbjDf/uRA24y1
wJ3sbSQ0JJ7y8iLu3XQgraJXe96yNUtccKjWHLmurISAsAg6J8coSo4nMjObstIsPP2SGR0dIjXC
n6zidjZmB0mKTSYu1I+LNx5S2djDaG8lQVFR9E6OUJAcR1h0FqtGVWRbiA8OoqZ3jNz4WCoqWyjL
jaGwYxzT6iTxcdF0jq0x0ZnLjSuXCC9UPZyCcX2K2JBwyqrKCfP14HFgJqoD6d8C2wCgfivHAUDd
x58b66e+uQ+jxcKOCowxQaSWVNHU0klbWwetLW20t3fS1lRLUUU9NTnZhEUl0lpTR1RQCNlFlfT2
tJEU6UlyUSXNLZ3MzE5RV9vKtsXEaHOj1gtnXG4NXY2FuLt4U1hUSGZSAuVN3bTXpOAVGEF9axu9
gxOMDvVSW1JJhK8/NV0jWusy2/LpQ3i8vT6kJz/74wkAexYaSrKJjs0gyOsxgRGpFMQG8OWfv+Tr
727j6emFm9sTgoL8ufD5n/n6/Hc4ecWzrlMD82w9S28SAOwDtWOWlpZSVlamVf5TZ89q53xzAHj5
HOvk89oZ8it9+r6jXx4Adhb6uXHhB/wTMqktSeeL//LP/PDTRb67cAu3hy64uLjh7u6Fn78/1++4
4u3qzI8/3STEO5hrl3/E6a4Hd+/cJTo5heyMcL7+5jKJKZlE+Afg+uAufzt3i5bBJQbq8wgIjSMq
PJjcvCTcQtI52F8nwM2NB87uuDz2JjQqicKEEL76/Au++PoyMUnpRAQEkZuVg8NP5/j8m4v4hkZQ
VVnAre9/5Ms//4lvv7tIUcsoejUw0IkDwHEAsGxNExsSgcejh7i4+ZGbX05OhA9ffXmOu/fduPco
hHm9dTvuzA8QHhqGp7sH57/8nIuXr3L+wh1yCiuI8/fGxSuIhsZyfKLytOnN823cvnyZ23euc/le
MMtbW6SF+eLsFURLWx2OTg+4cukmufW9tFQX0Tm9y+FqL7HxiRQXp3Lr7gNqmiqJCothTA3Zsb/A
/et3CfNzxyskDq/b1/ju4o889oulJiue81+f4/LNB5TXlhETG0frtPVWQaL/fe7cvcPt+4949MCd
7KoB7fnh2hQuXrvDbYfrOLgk0tLWgNPtGwRGllJfl43jA1dcHz/hwX0Xahq6GWjtoaUsj2s/nOeP
X14kMSufpKhgXL1DaWwq5/a1q/iFpZOTGE1h05T2GQk+rjzxDeSRmy9RAb589e3f+PGmOzUV5The
usC3P94iLi2dkqJMYoq6tPf0VcRz8fodbjk64O7hjXd43kcZAJ7fujKeqLB3yJ4aR8Vs0n7PzzSb
2bWYtYp6B+pqlkVdwbJOazKZrU2vn75PtQxQf9X8DSYzB0eHHOxZMGlXvw6024N7e/tas22tCeyB
emzWmpqrUKK6n9ea3T5tamtbPr1P1TZSn3ncE9+HUh1DTy7DRxUAqrMTya3ppyjamc+/usyTW4+5
efMmX1x8RHZ2DqmpGSTFRXLv2g0ee3iTVdHC7MQ0iysbz24DSACwH9T32ddnvZyuUDvwawOAusx+
dEBJUjjuT3xwfRLN9ObxNVkD5aU1PC2fXkl7fQPzm8/DhOJtAsDqZAd+Iena5fyV/hocL10iNCYe
T+9wUlIzSE1O1fbfzJRYLl1/RHx4NLd+/AkvnzC8HG5z/ofLOLt6ER7mRUCIH7fvPaF3ZJz0+Bgi
fAO48PUFClsnmR+oxMsziLgYX3x83QlMLuNwd4W4qDgSEtNISckgwMODx1ecuXXzFn86f5fO4QmK
smNxuHBP60nzwlVHwqLCtMusjrcceex4B7+oZLoGJ5ken2H7RLOpZwFgY4zE+CyKM1JJzs4jyM0H
f0dP7jo6cc3pEfcfhzIys8bq5DAZhRmkZaTg4fYE70f3iUpKxdsvmomlVQpT4vB64ktEsAeeYals
LC5RkBxJUdsUS4OlfPnHc4RGpODn4UtgUCDR4X7cvOnAI2dnknOrqC5Iwi04heKCFMKCvQmLiyM8
OorczDg8PALondpieaSd6OQK7TssUseL67fxCw4lt6CAgNseODo+4vYjT1Lig7Wuu5tH1pjtrScs
Lo31jTW8bnzLP395k/zaHpYmp4mPCqN3bp3WTC/+/d+dIzk9nSdPPHniGUJ8ShxPfPx4+NCbQH9/
EmOTKM4twu+WJ4/uPeb8ldtERkQSERlDcIgv0XFRPHL1oLRphIHWCnIrelhbWCYpIQ11I2KmrYKH
N+7g6e5JUmE5EQ/8eOTwiCsOj4lWPTR6OhNb0MLKzCyxUeEMLqxTm+TO3//TF/hFF3ycAUB8SVXu
qUrM6v67evyhVIW9+ly1DB9VAFALsDA7xfT8Gpsr8wyNTtDXVEt+UTndA2PMzMxoPe5NzcyzODtK
fkE+I4urTA+PMr+8LgHgE+DNAUBNYSTKL4CW0TmyoiIor+2iq7mCruEeoqPSGRnrIj03l429XaY6
6yiq6sJkMdBcHselm66MrlsDw9sGAHXGvLW+zOjYFJtaRVYjA+3VFNU2Mz49a91vNaeZnpqkf3CU
iYF+ysuqmJmZo760lI7+Ia0pVX9bOeUNnczNzbG4vMLM9AzDne2UVdSysmVAtzFLW1MbM9P95OUX
Mru2g0G3yeTEJJOTapS/KWam5+hrriOvsIzO/hGWVla1plVTw8MU5+bSOTJDWYI//+4//yPR9UNM
99ZRVN/Bysoyo4MTbJ8YMlurBDg0isWoY3nZeg/8aNfA+toWox3N1DR1MLOwyMLSKltr62yubzHe
30pxZYNWGC2OdlDfPcDK+pZ2dre1tcP26iwVZSVMr6zS29RCT98EajxCNfrh7Ngg1RXVjEyuoVub
oaK8jLGpOVaXZxgZGtV6QiwrLaGuc4DJ4VYausY4Mq1y54e/8p+dAphf3mJlYZnVdevonQZVCK0v
UFtbzYJuj+WRPsorGlg3GBlqr6Ghoxe9Tsfs6AQbOuuVgJXZcXoGxtnWrdJcXs/k/Ip1vQ1T3L99
h5yaJmbHO/F296K+YwCDUcf09CJmk57WmlI6h+fZWZqlqqKK0dlZxvq7mVraxrAxQWVtExs6PVvb
Boy6HdY3NllfWGZlfR2Lun1h1LGztUFPWy3dM2uY1peprqhgbGmL1el+yiqrWd/WsTozx/yS9RbZ
nm6V7u4+lta231DP4P1ymgCg+plQt2rZ1cOBkQOz/p0NRa0+Ux0L1G/W9rWPTbWsx3UkfgvUd6MK
fvXb/mgCgKrIpCr0qTaZO3qDdhBVQwSry0Cqa+AXOoR52lGP+gHpVY9pNpUAR0dHJQDYIWpHbW9v
f0MA2CXS7T7Oj91wcvEhJSqEv37xOed+uo7bk2CCgoJISokiPq+M8nhf/vCHc7h4+JKfn4irbxgj
66ra6S8IAModnbUW//aWdqAzW1RbYwvGV3RmpPX697Qds+rARw11rSrjqXoO6lKlGv5aTac+V/01
ms3a70C3s8X2jl67dKn1Gqjer1OXElUPlTaf8ey3oy6V7mi/LdUbprrkqYYKHu7toqWzl/UdA7u7
1l4JdTuqEuCLLRHUMvQPDGvDbn+07JkZHh5h9ZW18N4tanRnKwfs/lY17j5CVPfnJ1sB2AYA9Zsw
6Xe0AJDSMIVb1jBFnXPsmXTodc9/R1uqJ8v9fe3YrsoGVXH1+NaB2n+N2vDYLxeo6thQUVFBb2+v
tv9bf6fqt7jDnhqifX+fg/1drTB74Xf7G3gcANRjxcu3JN+fiuN+Tj6qAPCuVCui5tvQ0EBHRwdd
XV2iHajO/BsbG7WrO8c/8JcDgJ6Y0FjW9qCnIoeb31/Gxc2buKQE3NXlaP8g8goy8XniR7DjE21g
nUt3HlKQn4anxxOGV39FADhDqoOx6oJY3Uv9uQOiCiUqAAwOjmp9Abxrx59q+/zbOD45w8LSCnMz
s796Xra+OL9prdMbbZknZ5iannlp+k9Rdfav+gFQl7NfFwBUwa/O9n8X2MFn/78cPvu36Xz2T/k4
ZgxpIUCrw7Wjx7y5RHpSMn1zW+ztHbCxOEF9U692a22sr5PuwRmt+/ST+6j6PFWOqBO/wsJCmpqa
rFcCdvSYdpZJiwzE29ubkLgi1vSqS+19TAY9JrOFXYvSrP3GVWjXOhlSPcCq8K2FarPWSZGqG6N+
N7a/j1+iBICnvo8AoFQrc3yvQ7Qf1f5yvHO+FAAOVR2APcZHxtDtg2FtidnJMaqKs6jpHmBqZpn5
sSbiU7NY05npLi8iIb2YmaV5SjNjyC6txbSn5vH2dQDsXbXuatjjJTX8sSjaurRs7QTo6f7yqgCg
bhuFlI/z2X/M4b+/X09g2ST/+x/L+ex3BdT0L7Bv1qM3mlmd7OP+9duUtE9i3JohNsAVr6hCVmd6
eOTgSEbVAAd7ppf2UaWq9KeOBzk5OdqtMINpF/3yIC4PvOidGML3gSdN3cN0dzYzubTKYE87dS0t
NLX1sL69SXdTOS2DI8xNT7G6ts60GpBrYVTroGh522CtIPuKz31bJQA89X0FAKVaoeN+oEX78fUB
QO3gz2vz/yJ+YSsAe1ets+33YI+q7/n4DFZ8e0/uL7YBgEMj56J6+Ox/SqO0d0n7fd3LHOSz/zFN
CwbsG9jdP6QhP4ob12/h7h9AXLQfbl6u3HzgRmykB7ecHpBRP6zdwrLdR5XqO1THgrq6Ou2Kodmy
j2ljHMeLP+Hy6B733YOJ83fld3/8Zy5cuomDwz2u377L3Yfe+Pn5Eh7ogltoGMHBQSQmJBEa6I/L
7e/5+9//jicJFVpT9XfRV4DaPqcKAMcVOk40c9b6FPkVzZ4Vn0QAUCu1vLzC8opoFy6vsLKy+uwy
nNpJXw4AL+/sK5M9pGWWs7ZjvbzPgYGZ+bUXflSvUiEBwKpaZ9VjmNoW9qw6Ftke/MS391UB4GjP
QHDZOJ/9hyz+tVMFIcWD/B++L+Kzfy6gum9BK9R3dYsEeTwiKbcEl5vnOH/bi4bqPH48/z2x6dkk
RQWQWtHL/muuAKhjgboKkJuby+TkpHYFYGexHw/PcFbWl0gK8ee7P3+Dq3cQfu4uBEYkkZKcRlpq
KpcvXCS7uJCoqCgqq6v58dxfSCos4+H35/EODCYlvx6jxfwBA4Aq/Q9YXlrEcmDtSEw9r+q+KV+a
/kTtz5deszmu2XUAUPduVG3qjs5e7d6UaD/29A4wPj6pVZw7bQBYGGrA5XEQzc3t5KWnE+vjxt+u
uKFTnfK95n3H75UAYK1Uq5piqsGY1FmVbd0Me1FVLm1ra3vp4Ce+va8KAMcdtf2XgA4++4/ZfPZv
kvnsH/O4kz7IrkmnDUe9sTBBTW2j1npkeqidxMhg3NwfU9nYQkFyIC5evvSOL2lDw9t+nipHVP0g
VQdA1RU6rgOwvTZLVVUjW5Zdhttbaagq0frQyK9uoLWlnZbWdu3Y0NHaRGqUO+GZVRiMW+SnpTKy
pGekMR+f4HA6Jpa1egO26/pL/PkAcARHFuqyUvDw9CKz6HkPmcNt1dR2zj37/zkWBnu6GZpYfOPJ
jeKjDADqr1ZT2WjUOndQtaTNZpW43i4gqACgmlZNz8yxp419/vKgMuLZU+0La+vrjIyOv1UAWBlv
x+muM8GBITjduYbDtfv4xBZplYpe3zHQLwkAO1ozN2uHJq/u0/+4pYvtOAAn56E+8101jXoXqgCg
KlWpMyt7R63n6wa0EU/vqwKA1grAoNNabCXWTfEoY4iCjjmt8H/2e9jRab9zrWMfo1kb3e/g4BCL
6hhIdVd9eIBR/3IrgOM6X+Xl5XR3d59oBWCdp8Vy3FmQ6vZ6l/39A63i38kOiNTn7u4daq1h1HtV
yxzVwkZ1mW2tNKg+9+Xf9C/xVAEAM6mBbmQUNDE5NkRn3wTbG/PEBHhz+dYDkisqaGmswi8khIjY
VEqrawlxvsrnPz5Gr1qnvOGY+FEGAJPZSG9bo9Z1aYinMw8dHlBQ04Z5d1/ruelVB9RXqbXpnZ1n
ckrVFn3epal4tlU7qLoNoK4EvE0AWB5t4dZ1R2Ji0gh1uc+1a1dwD0hm23L4DgOADpNhi8r0eO7d
f0Bp/bDWHlv1r68OLqqTol2LSWvGtLI4x/zyhhZA9nZN6A1mbTlMelUTepO52QW2dAb29o/Yt6h2
81va8Kbapb/9ffYsJutwp2qeWj/+agyAAwx6nTY+wOGBBZ3W09oRh6o5odE6f6OqE2M0vtBk9jSq
g6nqiVFtC3tHracEgF/vqwKA8nk/AAatH4BDy6fdD4B6rLA99iiP1PgdxlWKs5K4eesukdltbC50
c/HcFfJrOijODuXHq48JDgolKDgGvyeeXL18k6Dkam2erzu2KT7KALC3v0t1XirhEdEEhiSzvDCE
v5sPzV0jTE7MoT/l5RcJAPbpLwkA6nmLcZuJiSlWlpZpr61lfG6Goa4uNkz7r33f8Q/ltAFADQa0
szzE41t3Ka/rYmx8hsHuakqbOhkdHSAlMYGa9kHWF6fIysinb2iE0qxECqs6WVsYJr+wgJFlPbvr
w1w6f4mGwQnqipMpaunWQsPi9Ai5ebkUlJZS3dzL6twYBXm5dPSP0VJTSmJKHtMLa3RWFVJY1cXG
2ix5mbFk13azPDtAXlERk6sbTPQNMn+i18zTaI8BYE/rZvZ5I3519qeQAPBufF0AEK3+bABQFf3M
W+TkJpCckYi3bzC+HmGEhIRx98fbuHmEEB4bgm9oKgX5xRQUlhEd6McjFxe8/OLYNFuPfS/N92MO
AKor4LqiLKJjEohJKNAWNCswlLKmflYWV9DpXz0PWyUA2Ke/JAAoX9sz2oka/69ScdoAoFQF9Vhb
Kc7OnkRGR3LhL//IX/92nvMXbuD7xIcn/n5ERwbj4OyF64NHxMWlUJFfyL0fv+H3n/8RB58Mdo1z
PL7vSnxiLFHhfjz28WNk2UBzbhzXrt3C0ek+Lr5R1FYUceXbz/ni25+47eRJqL8/8cmFpPnf5x9+
fw4Xd0+S0yJxc/Pi+oVv+N3nf+JhcAZLSyusrm++1VmXPQYAdcxRncaodVL3/4+7m25tbZUA8A58
VQB4dva/bz371zw0alcDTu6Pqia/qmin16sO3l6etz34swHgqetzY9TWNaLfh+WpAVrbB1lbXqGj
uYHRuRXtVqP1dsgOG2trbGyuMjk6wo7lFZUETxzXPsoAoK4AVOWlEhkVg7ubP/WVefj7hDI2t87q
yho7r71v+qISAOzTXxoAfqmK0wYA1XPl+vwoBdUV5OemcOnCRW5du0FkdAx3HdzpmdVTl/CAc05P
KMpN5+qlW6Rnl9BWUcyd787j7uNPUl49u5ZVIgOCiYoMJT4xBh+/IAbmt6kvSCcmNomUpDSSkqO5
c+E+rncf8ee/fI1fYiVTI804Xr6L1103rl67yY+3H1JeXkiox2Mu/e17PH0DSSuqZ3V1jfUNVdP9
5e37Ou0xAChUvxJpaWla5cbj71uuALwbXxUAVOG/vLaJV8EINxP6uJncr/2NqJzQrkipfXJnZ4vl
pWXtFtfy3DSLq293tepYVaFQe9/WNgajUSso1W/Ydrq39mlzWNuWANrnnbJ8Up42ADzntacxr+YN
JzeKjzIAqIP65MgQg4OD5CVHEegXRt/0IitT4wwMTqG3qfn5OiUA2KcfcwBQFY0M26sUZ8YREB7P
1PIGbeUZJOSX0tbZy8zSFosjnTS09jExPsbIYD9pUYGk5jcwM9pJVEw0bWOLmEx6mssLaO3sJD8t
lKzKdu3KwuTwIN09ffT19dM3MEhHXSPxYRGk5ZfS2T/OwtwkXW09lKYmEZVaRGdrDRf+/J/4u7uB
jA93ExUTR8/MIqNdfcydGDfjNNprAFCodTuJBIB346sCgDrzf5Q9zGf/MZfP/i7P6n/I4bP/kk9e
2yyHu0b2jCskx6XR0FjDYy9P5rcs7JqtFYCPKwNbtG6y9dbuwLet9WOOXzOZLFodmNGBPqYW1zni
kLG+dmrr2xgYnsC0u2vtJlsbEdD6HtW5j86gup43aM9pFdC1/81a5UOtYq9ZVRK0YNLGXBhgx6RG
JlTPmdjbszA5MsDE3PrTioXW92nzeFYpWNW9eXH7nCYAvA8VH2UAUH9VWlNfyr7q1Y0jrdmFSlfq
C3+bSoAzM/PMzM5rX44KAeLZV/3Y1tc3XgoAx7XTjzvIeFcq1I9XnSn+bADQLnGqmsOqbeGhtULe
3iGH+3vacqu+znVGNcyp9eBi7ZMf9vfM2jCmqsau+Wkf55a9fe0AtXdwpNVIVvu9qrz3rMayahGx
a7FWMjzYw6zOblR/6epg9PQHvjo9RlZ2Ns3D01j2tPaOWiXDX1MJ8Pg+uT0jAeDd+MoAcGDkguoI
6D/n8tnvC/nsT0X8n+828Nk/FRBSNgb7Jg52N4l2v8v/8h8+p2Zslb7yaK443KesuZPMyEc4+YSQ
kpSK063bBOcUobfsszHdg8/jG7iHJZKel0NuZjbhkalkJsbx2NmDW+e+48e77mSkJePr6cG9B97U
NbWSFObAdWd/Bhd3mO1r5OHNO7jFJjE02Iz7wxv4J6QTGxrE9Vt3ueviwmMPP8JjEsjOLiTS1w0P
3xSKU2K55+RBYkIeleU5eLveJCIvh6TIUBzuOpOVX0OY+328g/PZ1D8PARIAnnoyALwrVQCYn1+g
q7tPawo4pUZjE8+8qg/2/sGRp80Arc18VOc0aqc97gL0Xanmp1Q/BnUgO00A+Fg8bjWgQsyudo/w
1/2+jpsBqgPFyWZT9qY68aivr3/Wn73tdhBP72sDQHQP/6s/FfPfODTy7zza+VePWvjs7/O02wAq
ABzubRLs7MCPV+8SmxDH1b/+lbvOD7lx/jv+8ueveeB0l2//5khTRz8Bfr5Mbu9REuLMn776ASdn
X6ID7/N3v/9RG67Z87Eb9x3ucPXyI1LzCnG7c5UHfqm01eZrQ2vn19ZTmBxPXf8iXSVpxGc0Ul4U
xxf/5Q9cuHwLhxuXuXPPh9CAUPz9ggkJjsTfw4Xb973x87yPw31vAn08cbzjgMPtB/xw6Q7NXe0E
e9zhh5v+tDXX4PnQHS/XO9y5H8rUuk5rVni8fSQAvKcAoFTznJubZ3pmVusTQLQXZ1k/cYBWf2dn
Z7VBQFQnIO9SNU919n/8WWclALxr1T3P6elprXMVdb9cnSXbo2r91Aii7+Re8Sfu6wLAuchuPvvP
eVrh/z+4tPDZ7wq1WwGhZaorYJN2CyApNpXx6SmC3e/hdNeJJ8HhFBYXE/LYibDkdLxdHnHzhgOe
EclaS57RhgIeOzkQlZZFZFQ4vt5+uLoHkhyVyIOrV7nt4IDPE3/c3VyJza5nqLuBoIBAYkJc+eHi
LRrGNxmqSefi99fwCIsiKzkOj0fOxKalEJuQSWZWHqlpWWRl5RMf7o+7XyzJfj5cueFEYngMDpcu
cvu+l1bB18vdEa/AAEJj85kY6yEiJJYoN2cu3XJjYlWnjXB4vH1OBoAPjSr0P7oAYNsv96/Reo9I
XTYV7UvrJfST37X1FsHLHQe9G62fpfbPTzUAKK2/qRe3u715vH626y6+va8KAEd7egKKx7QzfjUg
0Gf/KVcLA//rPxVR2jXHgeoTYHuL1ZUVtnUGNrc2WFqcoaunl02DhaWZMcamJyjMTCQ5t5LVzR0M
OusQ3OPDfQxNTLG4voFhZ5OZ6TnWV5YZGhxibWOVqbEx5peWtQF+VGuEjcVZvG7/xD/ddmdm28JA
YxGhUWnMLG9o3QwP9XczNrfExvo6q9rZ8pr1rHlFzWODhckxRifn2FpdYnBohNX1LXQ7GwwN9DK/
ss7mxjqbmxvaLcvp0WEmZhcx2Oxb6krT3Nzcs+31oVTfiTqxUeWu+v+jCQDqDG9icoqpqZkXnJya
ZnJSFD+8qv+AubmFZz+cTzUAiOLbqH4jtgFAFSKqjktSwxSBxaMElo4RVDRKUeccBv3Os5r1qiBS
j9Vf1RRQBX+tWaDBiMloYGtT1RUzafVsrPNWvWeatM7i1O3fHTWMr6o7psKByWQNd6qy39Oa+ur1
na1NJicmtFYJ6rPVcqp6NFqHc2p+6kTj6eBQL2r9DGuPtQZtXuqkRK868dpRYcT6WFuHnR3rOqgT
iVf0YXNc+E5MTHxQ1SiJJ4dt/s0DgHVnWdHu2a+urjM7t2A9AKvCf3KaxSU1GMwai0vLz11eY3Nz
SxuG8oXnn7nKxqa1ScnLry2ztmHdcdTKHz+3tLzK6tqmthFspz92eWVd23jaMi0fv3dFe69qY72+
pa48mFlXG3VT9U+9o+1YKtWq17a3Nl+a56ldXmNjY0trxqXmd7yOr9oG2vIsr2rbbWlZTfvyNOLP
u7C4bB3nfHOTrS0JAKJ4Gl8VANSZtypItF4AVV8AWn8ABq03QNv3v0lrwfXy82/nztMuua3l0nFh
+PJ071f1mbZXoj6Ex+v60QQANXjP/PwS62trlJaWaH06q4461OOamhqtT/8XsTA1bR1S8nVMT81q
3a2+iu2VWXr6Rtkx7b3wvHl7jaW1F5sGneTIssP07Jr2+GRPYscsDLSSkJjGggV0cxN09/XR2NSC
7lB1SdtNz9ii7VvegiMW5xeYn5tH93Rgu9npeduJXuDkCFHCL2N0bFwbg0ACgCieTvUbUb+PkwFA
/Pj8qAKAOvMvKyvV7k+oGtjq0oqqtagq5/T29j47IE+Pj7Aw3UegfyR9Y9OoYnjPsMbipl57fXF6
jLnFUWJi0lnVW9Cbdjna22FuZVN7fXNpiih/dy7feEx+dQ9bO9ssLCyRnZhAdEwcoXH5zK5tadPO
T4+zoZpY7R1wtL/HZFc1YfHl2kANfT3DbO1ssrAwR2J0PHW1tYT5RlFVUUlIZDBON10ob6jjpy++
on54jhCHb7nhX6Tdf1pa02tNuGYmxlnT7XFgtN4CUeuyq1tmZNy6XrqNRTZMKsYcMtlVTlBIPMlJ
aXRPbjI32YibVxy6fRPzSyta2NlYmmVqfpXCtCQKa9rJiQ8nOqOKnd1DONrFbLENUsLPMTwy9lYB
4Hnf/fvsqr7JbS7/qcugqn2wuvR4PLTxb+uOtVnlS8/bqA2qYu1r/fnlV1F8WfUbUYXJ+6jgLb47
1fekrmgrf/MAoNrtV1ZWamnkuEKO6rNbDUHa3d2jHYx7qzLwdntCUlgkd289wNPdm+SkHLzvnePz
iw6kpGUQ5utNdGgs7s4e+IbFMTw1QaTLT/zx/CViU9NJjnLl5v0HOLo8ISw6naDHTly9dp8rF67j
ExjMvXsueMVEUViSSbCPE/4JKaSkhePmEUdzQx3J2Q2qhTh56Rl43b/FzesPuPzjDVxd/ShqGNeW
s8j3Lv+v/8/nNPcPE+P7hODoBPxdXciu6KAw4jFffncLD3c/3JxdCAzLY3awjgtf/xWfyExyU57g
6uVHRGQ0dy9/wQUnH7Ky4vD3cuJ+YAIlJcXERIYQ4n+fW24hRPnd56/nL/DQ1RtXFw8Cvb059+1F
AmNScLh4nlv33UnMzKOiMJe67imb4k34Od42AKjBd+aHWnh83xnPoHBt+FJtVLP9Pe2S49HRPl3N
DfSPL2j3Gc17+xzsmbX7iXtqlDKzEZ3eyMHTkc+Mpl0OdtUAP3r2D/YxGvVaXwG7FqO1Io+a9mBf
u/dosuyxv2dhR6fX5mU2qs5ILNogQvod68hmz+d18DScqPVaZUdnYHfvgF2Tdb5b2zrt/z1teczs
G9epLKtidGpOu1V2fPlUFF+lbSEifpyevB3w0QaAnh7rFYDEIF96JnaYby3DIzgf3eYU9y6c5+KP
N4gMV6HAica+JdbHBrnz9fdccXxCb1czV786R1RkJA8cnKho7aYiO5KrNxy5/ziIlLgo3B/ex8El
jLz0NDILO+ioy+L8j3foHe4jNTWdaN8H/MM3LsxN9RIWU4LFskqIfwiJMeG43nfC0T2GlqpyIqML
WFtZJ9rvCU5PUlldnSExOolAF0ce+0cT7htEvH8E9+7c4IsfXZlf3yA7Pgy/x6H4uXny1TfnSS6u
Y3G0jWt//Zpbju6Eh4bh4OzLyFgvsTEJ5GYlcenaI0YmRwn3esg3fz5HVFQUD+84kt80znRnIZdu
eFFWVoLjDUeqOyZoLA7iwj3fp1cThLfhtAFAKzS3tjDt7tFRno67fyrj470Ul1bT3lJPXmENq1s6
xjoKuX7NgYruOfbNO/Q0VFHTPMjO9gaVBVnUto+wvjBGdkYWQ9NLLIx3Ut3ex/r6CrXllYyOzdHV
XEdz+4j2G1lbmKS8tIq5xXX6msvJLWlkY2OBiuJceqamGe5qJqewmCWdnrnRdmra+1lfX6amrILh
qQ0MSz1cu3yXvpkFmirzaBocx6h6MTNs0dtWTevIHIbtRUozQrl6x51Qf3euOgWwZrRovagdr7co
imfPk0HgNw4A6hZAmXY5Ql3639/f1w7AaoAONWCHYn28DW/nh0RGJlPeMMDm2iz1tc1U5UQTmlXB
7PQIEV7OhIbEUVbfx3R/F4WVjbSVpxEQn83k3CSJgQ/x8PMjM7uAvJI66jKz8Q8IITsjmeSoBDyc
XQhILWJuvo9g73sk5pdS0dBAXVU9rY1NBLq58OSJJ1GpJTRkZhAQEk5KfAwtPeM0F6Vx/4EnVd3D
tDZ3srq2RENdKyvLqinKIJVFVWQEh/EkIIyo9DLWtzZpb2miID4TH48npJbWkx35mP/yp2+IL6ol
LyGQtLpexntqcb1/k4TcUnp6B2iqKcHb5RYRaQV01xcRFB1PWV0j/aPzLEwNkBYfQ0J8GgUFaWRk
lVJaEoVvknWAJeHt+LkAoP5Xz6tOiZQ7BhODdVl8+dUlwiNjcH3gxPXbLgT6+OLu5kVs9BNu3Xel
on+Jg901Ej1v8fe/O88T7wDCQyLISU7H39Od2OgUsmNiuPTN7/nd1+fxcH/C3774hpCAeK5//zl3
HiWxc7BPQ3oIf/jDtwT5hBMc4EdGch7h/l4EBz/B1duFO7eeEBAWjE+gP7e++wP//PX3eLp78dWf
Pic6vRPz1qB2NS0pNZaQgMc88A1mbmefwcpk/vj7v+Pz72/yxMeLyEh/rty5x9UfL3D5fjAbpl1t
ABK1HURRPHuq45bqTfWjuAWg6gCoDljy8vKorq6mqqpKs7CwULsq8KlQnpGAS2QSSy/WT/zlHGyT
mZnO/M7LlRaFn+c0AUAV/Mdp2ry7R1tZBmGp9Zi3xrj1ww8EpdYw2V/HT9/9RGpOFkHeHlQNrjDX
WcHjyw+4dv0G5y7dpqSimZ6qIpzvPaatc5jymGCt17KQ6FiS4pNwu3ODBy4+hD5x5vItT+YMFvqr
83C8cpWffrxMRGIuI93dPHnkTG5RPt6uTtx9GElFZTH3blzj6oVLhETHkRSfiMv1SzwOysZkXiI8
MJzoiGDSs9Px9QtifGOXxmR/fvzpDpGxUdx/4EZxaT4O165w5dotnoRksG22vNC/uSiKZ0t17Ppo
KgFOTExrB1y1MKoioEom6q+qdCQIvxWnCQDq8XEAUM2LpoZ7ae0eR7+1SFlhIU2dw0xPDNPZ0U5m
rA8+odFMreygX5knKzwMv4hUuvu6ifFzJyGzhqHOKjxd3Klq7KOtIoOQ1DwG+weJDwyior6Vwpgo
kvIq0BmNzPW0EeobRFvfIMUpIXgHpjAy1EZ4kDdldZU437iMs28EIwvLtJWmEJKaz1DfALF+/pS3
DmIw7lCenUZTWxMJ4Z6kVbRhNFnQr8+THRdEckUbk4Mt+Hk+IiE9m/r6SjKS0xhb2nzWtakoimfP
jzIACMLHxNsGAG3wHjWqmDZ6papIZx2wR3Vqog3ys3/E0eGBdv9c1azXBvA53MdsMmmDYO3tmTGa
rSMcqgF+zLv72qBCRpORg6MjbaSxvYNDrbKf+iyd0cShmtZk0gYjUq1LjEaz1gR0V79KR9cglkPr
wFqqNcsL83o6nrhFW0Yz+2oAIovJOvCWqih4aB2QSFVsVPNTlQktll32VYVGdf//Fb9pURTPhhIA
BOFneOsA8DG5o9NCxM828XuFar1UZVzVRFA8rdZBqmy3pWoPL1pV95uP9y/b/U39htTrtu8R363H
21sCgCD8DGc6APxCjw8MQ8Oj2vqLp1ONVKl6jTx5AFW3MlUdkeOKV6Lq9G3+hVEX1d/jW7+204rv
3o9qLAAJAMLHjDqwv10A2NLa4VvUkMIWs7U/8DPWcY46mx0dm2B8fEq7RSCezv6BYebm55/1Ha8K
flXQvQp1i+dj48VlOnpvy6g6eVMD4ZwsaNT/qgO4V3FyOdTj5/+eWD71/PP/Xvr/59fl5HxPM/37
x3a9X8+Ly/5zqO2ugqlqRiwBQBDewNsGADUoyNbaIi11tVQ1tLG8tqaNIaEuxW9vPb/0qf4eX5rX
Hj+tUW/7vPZbOdFX+ave/9LzNtOefL/1sc38bVQBYGx8ko11a++ZwulQfZmoYciPA4A6yJ6sxDzR
10FbVz+WA2vhevKgfjxeu/a89tj6+rPnTj5Wr9s898L7bad9aV42n3XiPRzsMjU5gWHv9fN/5ec8
nafi+LWTn3P8/mPVtjne39RlaRWWTm4HW43bG6xtG57O9wDdzg67+0cc7u+yvaN/Op3tuu+zs73D
3tPtrU3z0nZ/8T2qgyuTZf/5PF6xjrbzOvncyelefv7F7+Xkc6+al6p3s7k8x+zy5rP3nJzO9j1q
2S17T9ftxDKcVE2nevSUACAIp+BtA4Dqja+vNptbdzzILiokPyudxy5elDb2sXegDkhqGtWlrv7Z
/bjNDetoZGaLWfscVbHPbDayubWJ0WLRut5VVxXMFpP2QzWZraOOqXvOKlTojQbtebPF2jRvSx0I
LGZt3kaTGaNBLfOOVglRG7nsxLxUYa8+/+Tv8jgAqMG5hNMzNT37UgBQ35FipCEXX58gUtKyaJ9a
ffaewY5mesdXrQfygwOth8Zjnj8+4uDZcf31nXmpwuwkqofI569Z/6rC8xhVUNky01aNm0c0etV7
+ImC8uRyHXP8qiqIjlmcmmBlZ0+b97PXny7XcSGkxlF5VQB4VrDZqKiI9MQx5Lgvkx3iIxNZMoFl
uY+ImHyt6/SX2SExJpU1mwsLqgLscHcLvePW5uXPF/+QnIREOsatV21UZddnrxwePFsf1SPnMa87
8X75e1Lf4fPtcMzBwfPHL81rf5swZ3fqRp/vLwr1vR5/1SevhhSmJJBTXE1xaS0bxoNXbk/1nDoO
SAAQhFPw1gFgd4/e6ixuOflQV1dLTHgwX//+7/n6pg9tdZlcv3WD0PhkHjs9prB5mP29TZK8nbj1
OIaWulIe3bpJRGw+pRkR3Ll+n/zCCuKD7nHdPZjCnAxuXnGkILOER7evEZ5Qg+nAQlNOLBcvPdQ6
qwrzdMDVM47a8jTu37tOTH4OoR5e3HJxpbank0S/u1zzDKUwO52rP96isqGfvrZuFte30UkA+FW8
MgCYLHC4RVRwLOumfVrrq2jqGqQg3h3HJ3788O1XeCXUaO83z3fzwPEmSUUdNBRE88DRk9q6ZlJC
3XF/Ek9ncyVuzjcIz60mJzoAF+8kanLSuXnNmZ7RbTg0Eev1AK/gfHobS3BxuEdmbg1VuUE88POn
sKIED6f7+GXmMj7cxKN7V4nIqyE70o97j2LQm/bJC7jHrUcJtNfGcc/Dg/yqQjycfemZ2Walv5Yb
l51oaOghM/oR9wMiSU1J5d6tW8TkVjLcUYdPUCKNtRUEPr5HRFwJrZWp3Lh7i5ymMW0d3zoAqAJu
b52MhBii4jLpH2ol0vsq5+74UFGRgfOdH7jum6kVni3Z0dy8609fWyuBnrfxjIwmIjaLysJEbjo6
UNDYQ1lKEO6uflz4/M/4JJRSlxvE1UfeNHV1kBHhxF++v0v7nAptBxRFqt9NDH1drfg5OxKdUEJz
eQYPHR5SXNZEfqIXN71CqKms4P7t+5QWNhDg4khofC37R0dMNBZw7aozLU09pIW54fEkgY7mUp64
3SGhtJiEkDAcXd1pHBmmOM6NW0/CqKkox+naXarblzjY6ObrP12ksauREO87RObnER8WQmRaHRyY
qEh+wmXnJzR1dZIZ9YDvrt7Fy/cJ//j3f6ZmxBpibLenBABBeAt+SQDoqcrk9v0AaqqKcLrtwNWr
jqQXlPLox2+4/eAxVy9c4JFPqtY8b66vkVDXx/zt/HnO/eTIwMQGo9XZONz3Q2cwUxz4mN//7luc
XR7j5enNvbsO+HgG4+p8E5cnyWwdHVCdHs6tmw5c/eEa2ZU9GOaHuXfnIR19nTjf+Alnv0IG+ur5
6csv+Oav53B+5KrN6861a0Sn1bPH4bPCXwLAL+eVAcBohiMdcSGRLBsPaM6L5fuvz/HdNxfwePyQ
i1ddaJ/Y1s7gOotzcHe6x5dfn8c3PJNDo4WsIE+Si7uwrK7h8t03XHN8hLu7N8HBPjxy9ScqNATH
2w4U1AzA4SYxfo949Mid2w6erOn2GS5Lxzcyi7GBWv729RUauueoK0vgq3/6nFv3rPMKCX7CXQcv
BpcMDDdXkJyaQWxCOhNj7fzwtwvEZtRr69dfk8sDpwe4XLvJN99ewu3RI77/8R6d/eNkx3rh4hdI
TGw0l368Tf+0jo3RLr775z/i7O6Gf2T+s8vYbxMAFOtj9dy6do2H9+7y3cXb9E9Mkhbtx/WHgUxO
9hEQka0FgLK0MB4+8uDWt9/x060HPHrwEBdXL8794a889vTkztUrhCVXcLi9TUxAJCVF+Vz665d4
uLtx+afr1Hb1kZ+ZQuu0Ht3iGAm+fly+dJkLl5wYmtGzMdjI/Qe+mM37dKaF8/kfvsbTzR0f7wDc
XR4S5B+Dv88DXL1TUN9oZ1k69xwfcPfaXbKqetld28DzoSt9YyMEud3FybOQubkh7v70Pd99fQF3
VzWvQFyc7hKb2czR4QbJSRkkxkXR3N1HSrgbP1x9wrL5gL3FTv72uz9ry37l4jVqOvupKUrk0tXb
OLnFsqld9Xh5e0oAEIS34G0DgGrD311XTFZ5H0fmeXxdPfD0dMMvIILM+FBcPX2ISUwiMbNKO0sY
rinF+cfbXHPyIDI6Ajene0RGpJIY5o2zkzup8amEej7ELymbmqISHH/8Cb+QWAIcb+PoGcHW7i49
RZlcOX+J4IhIAtwe4OMdS2ZSMA8eOBAYEcqdK9dwcPUiMy+fSI/7+CXnUFNYzO1zF4jILGWoe5il
DbkC8Gt5ZQB4egtgrqcSX08ffDy98fGPIy3cm5DkHFLjw4lPr9UuPxcHRfLwjjMPfWPIjA/E/ZE/
BTn5RPq54eeXRFFaMr5e7uTUd1CVGMPNu85kJ2fg+NMVsuuHODwwkh/whDsPPElPjsHrkRvpyXlk
xHvy2C+YsBB/7l6/i39iBlVFWfh6uJHb0EFlQjSXLzsyvqZnorOWsrouavMCeODxhLCYeMobhrR1
WOhq4v6la4RExhEX5EVkeg4x8RlMbcFQaTju0bl0tTSSGBtLgLsLMbE55MaH4ekbQE3f3LMC/m0D
QFNxGs2TejBO43rvJp6ujjh7+pKaGMVDhyt4ReZoAaCnIJMbV+4QFxtHqI8niQVFpKTmkhYZzBP/
YKpbO0gL88TbM5xwf18Sk7LIjPLFNyqVhsZqQj3vcv3ufUY2D9ia6Mb72gPuOPsQl5ysdQEfG5tL
blI47s6eZKfnkxjsSVByDq11jXjeuEFgVDLxnq44ekSgO4LZlmocLl4jIi6R6AAP/PySKc5NwMv9
PhGJ8Ty87cADDx/yKipIC/YgMCWXltpGXC9fIjSznoPDbTKzyhjqrebJ4zsERMcSk1TI1h4c6FdI
DXDDOzKVxuZawp44cu+BAz7Bkbg/cqOhf0ECgCD8Wt42AFgPaBusa/fVt7Qf18bGKvOzs2xubTA0
PMTS+qb1vrtqa6/XMT02xOjkHAaDjpHBPmZXtzBsr9LbN8CmwczqwiRDE7PodrYYHx1jc0fP3MQY
Cysb2ih/W2srjI2NYzDvMjc5zPDkPGbTDqOjkyzNDhETFUf/xJw2iuDy3ARDk8/ntaHWZW6BDVVB
UQLAr+JVAeBkJcD1xRnmVq0VKy2GTWZX1jk8sLC5sWW9T75vZm52Br3lkMNdPZMzc9q0+o0lZpet
l3SXFmbZVmeAhm1WNnbgYI/lpWXUXWl1P9iwucbatvUzZ6en0O/DkWWbxdUtxrrryMyvYctgvbe9
OD/LtuWQPf02K+vWIdD393bZV/f/9/TMLa5oBevenrVSnPZZi4va0OPmnVXmVzfY1wr0Q63+wsH+
wbMxXJbnZ1jTqdPQA2Zm5zAdWOsUqPoCal6vCgCKFwss67S7ZsvzCm/7+ywvzLKpM2kVFudmZzFa
9qxXFkx6lpat9/XXV+ZZ3TFY6z4c7jIzO4ta6z3DJtPzyxwcmNHtGNiz6JheWNbes7mywPL6FkdP
b7Bvrcwz/3S7L89Ps65X67PH1NQ0FvXIuMnM089bXVpEjbquW1tmy2DRKuEd7VlYWlzSXjec+A6X
lxYw6ZZJT05ldGFFe86i32B22fp7W11cxKxtrwMsFut3tbo0j868z9HBvra91RKqwcSOl31rZZGV
9U2troZJpzryMj7bfrYBQFUCVE0BJQAIws/wSwKAek7VUtZ+PE8LA/VjUy0EVIGgauvqnnWju4PB
aNSG5lXvU4/1uh1teGA1raqxryoInnxdzVv1NnjcvPDktOp5VYCrcKGeU9OqSn9qhD81reqR0Kgt
y/N5qfefbFFw3AxwaWn16UFEPI3jE9PMzs49+87VfqEOsOrAe7Kyl3YgfvZYPTrSzoqfVaZTNbif
PlQF6zHP5qEO5sevPz1LVpXU1DyO53twXCP/xLTqdSvq816el7YMWkGh/h6/bC041GvP5/n8c7T5
a6+9WPv96ava88fvOZ6/2jaqADpZ0KhmgGp/ffZZJ9RCw9PHJysmWreddXud3H7Pt5n6XqxB4vj5
Z8utTauW2fr/821jfXzy/2froz7nxPo829ZPt+Xzin/W7/N4e6nteczJaY8nf933Zl3fE/vOiSso
1teev/+Y4+1jfd+L21HbRoeHWtNUFbgkAAjCz/BLAsDHpu0P+udUwWJufoHunn4Gh0bEUzgwOKJt
r9XVtWfbW/1VBZsa5Gx8fPy3d2KCiYlXPP+BnZpS/UtYO6I53k6qUJqcnPx4ttUHcGJC9bXx8vPv
U7V9Z2dnn213CQCC8AbsIQD8EtV62R4IxDerrurYbjPb/8VX71uvek58P54MXhIABOENfKoBQBRF
+1YCgCD8DG8bANT/1kE3tkRRFH8T1fHoTR5fcZEAIAhv4G0CgCr41X1gdT94cmqG6Zk5pqbntL8T
kzMMDo3a3DseZWh47KX7yad9Xb2mlm/olfO1fe7F10dGJ7SKfkMvvfZuVMs2OjapOTLy4jpoy/3G
5RNF8depfl+vtrtngLGxCa1isAQAQXgDbxMAVlZXGR4Z197X29tLU1MTLS0tNDY2Mjw8bDtrjec1
pl/NyRrjtqiavvsnapef5Lg28evQb62x9LRZ0vtg32JgeWWV9fVV1nesbeGP0Wo423RbKwjCu0O1
9T9ufXRS1S/FxsYmg4MjEgAE4ed42wCgBoTp7OykpqaGkZERBgcHtb8lJSXa3xfRkZlR8pp+zK3k
Z+RqfZ6/ipHmUtw8gqlpG302j5X5OXrbGiiu6bWZ+gSGadzv3cfXw5/SJmtb89exMj+PySZLqHbl
c0uqr7PXszPXi4fjLX44f4OC5hfDT3W8Hx7J1t7lXsTMzOyL/Z4LgvD2qCaV6orkycv9x4/X1zcY
Hh6TACAIP8fbB4AFKisrtXa2qt2t6nRDMTQ0pF0JUFg2pojx9yI5KRXXB49w8wyipX+ewaZM/BOy
mVtZJjfWn8joRELCkqhvaKNvYpbpnlJ8oxIYW1yiPj+IK9dvcM3Rjbi0MmpKCggPTcDhp0vcd/fF
6Z4zAWk5rG8vkBntQUp5FS3d7TTWt9PZWENgUAy5uekkp5bSUBxLbH45jXXV+Pn64RMaRnRCImm5
JVTUNFFdlE9wSAr97V1EBYeTl1NBW2cXFdlBROYX09FWT9ATH3LLu2ivzCcgOEPrgGZ7pJ2s9A5g
m+RwV2Irmjk42KUwNYHErBKG+9oJ8o2gq62f5MhwsjJKaWzpor06Hq/gKHKLSokJDiAmpRLzvlwx
EITTogKAOiapgt3aGdmG9lgCgCC8Bb8kAKizf9XWVo17ri67qXHO+/v7aWlp1eZZmBBCWeMIsz0N
PHgYTGtzPV537nDuiy+5cesWV6/d1c7gFwaHeHThR/544S6zSzPc/uJP3Lh9i2tXbpJXVUtlaQa3
HR/h4hlMqL8X9xzu4+DoT05uDonpFTTV53H52h3qmupIS08nMcqTv/vDTZZXp3lw/RZJ+RV0VmXw
5Z++4sbNW1y6+ogQv2ACA0IIDYkgLiaCOw98CfXz4raDC7Eh0dx3vIOrsx+OTvfIr6ymoiiOb887
UFFTT2JYBP5PXLh87TH98zrWBprIy2qhrT6boooKEpKTaWqq5f71y9xwuEdAcDAOtxyICknA5eEd
XB74cv/+A+Ky8ulvK+e7ry+RXVpDUngkvdoALYIgnAZrx2DWCsk5OTnaFcjjDqokAAjCKfklAaCq
qkq7AqAKfhUC1JUAdStA1QlQ9FRnEegbTFpMLH4RBWyszxDuG0iA20OCYtMozM8mIjCQtNgUvD0j
yYhPJi2rkHjfx/iFxVFUnE9MiBee7vdxeuCGq08UeQlJOF2/zt17LkQEhGiFaVBcHIlJCcSGexIQ
GUdsbBT3HvpTW1NFanadtiyboy24O9wlOi2T8OgMCgpLKcgvorCojNL8VBydA8lNSOHuletERqXg
f8+RKzedCAqNJDHWm6DIMNx945hdXiY3PY30iEguXrhK++wGGwMtZKW3MjVaT7DfIwLjM8hMTaS6
b4ntmVYe373H/eu3CQhJINLNhSvXbuEbHEV6agxRAV58f/Uxw3MrlGZn0jurt/lmBEF4HVovoDod
1dXVBAUFERwcTGtrKyajUQKAIJyWtw8A89oPrbm5WevudHp6Wuv3XN0W6OnpeTrXA/rbmxgYm2VH
b2Rvz4LBuMv2yiTNPUNapb/J/na6BsbZNpg5OtxjaXUD484yTR3dqB7J50d66Owf1Cr0rG/q2Fyc
p29gFN3OGlNjEwz2dtA5PKN92mhfGxNzK2zo9exbzKwsrmh9hR+zONFH1+gUOwbrQcOqHr1um9X1
bbaXF+ntG9LCzFB3NwtrW+zt7jE/0c3g1BIWswnL7q7WzfDazBS9g2PaOhyYjWxvWyswjPS2Mrm8
jVm/w55Wp+CIlZkZerr70JssTPT1ML20qoWmzGAX/t0XFyjsnWZ3b08b78BsfZMgCKdA/VbVMUlV
QlYhQJ2UdHV1aVckJQAIwil52wAwNj6lDYii7verQl/9+CoqKrSKgSf77BZez+LMFFNLMhCRIPxS
jusAqL8qDChVCwB1vJIAIAin5G0DgGpfLwiC8FtyHABsy1wJAILwFkgAEAThrCEBQBDeARIABEE4
a0gAEIR3gAQAQRDOGhIABOEdIAFAEISzhgQAQXgHSAAQBOGsIQFAEN4BEgAEQThrSAAQhHeABABB
EM4aEgAE4R0gAUAQhLPGmQsAU1OztusgCL85I2PjEgAEQThTnKkAoA6s3T39LC+vsryyJoofhUvL
q3R29WpDaUoAEAThrHBmAsDxQk5NzzA2Psn4hCh+HI6NTzAzO6f9INSwmhIABEE4C5y5AKCGKTSZ
zpZqcAU1upJBtE8Neu37VfunBABBEM4KZy4AqHoAs7NzzM7Nnwnn5hfYVMtus7FE+1QCgCAIZ4Uz
EwDUh6kPVfdap2fmmJmZPxP29g0yOTWtnSnarpdof0oAEAThrHCmAsDCwuKZawWwvrGp3SOWAPBp
KAFAEISzwpkKAGexHwBVS1xVFJMA8GkoAUAQhLOCBID3jASAT0sJAIIgnBUkALxnJAB8WkoAEATh
rCAB4D0jAeDTUgKAIAhnBQkA7xkJAJ+WEgAEQTgrnKkAcBZbAaytSyuAT0kJAIIgnBXOVABQC9HR
2cvY+BTjE2fDrp5+rftiCQCfhhIABEE4K5yZAHC8kOrgqW4FnBWXlpbZesU6ifapBABBEM4KZy4A
qA/V6XbQqb9nQd2LG0m0byUACIJwVjhzAUAUP2YlAAiCcFaQACCK71AJAIIgnBUkAIjiO1QCgCAI
ZwUJAKL4DpUAIAjCWUECgCi+QyUACIJwVpAAIIrvUAkAgiCcFSQAiOI7VAKAIAhnBQkAovgOlQAg
CMJZQQKAKL5DJQAIgnBWkAAgiu9QCQCCIJwVJACI4jtUAoAgCGcFCQCi+A6VACAIwllBAoAovkMl
AAiCcFaQACCK71AJAIIgnBUkAIjiO1QCgCAIZwUJAOIrVV+ueHqPt5sEAEEQzgoSAMSXVF+s+rLn
5+fFN7iwsKD9Vfvn8Y9BAoAgCGeFMxsArGdeL0/7dj6fh5qfWjnlyWlsV9LeVeurCjFVsJnNZvb2
9tjf3+fg4ID9vT3tf/FF1Y9BFfpq35EAIAjCWeHMBgBrYf1y4byj02M0Gth+xUrZqhX6T1diZ3uT
hfk5FpbX0Buev199zs4r3muvqm1y/GU/43CPre1t6+OjI46Ojp69pB7/Mp/N4BWvnfCtPudtprV6
zAvPv+q516gwmUxaYJIAIAjCWeJMBoC9vV1yQtzxTW/QVuLo6BCz2cQhYNhaZmhkmt0DVXBZz1oP
Dg/Z3zNjMJo5PDzEbDSgXp7qaSCnuIWDgz2KE4NxcPbAyfExZS3TTzePnuzkVAbmdrT/LCYju/sH
HB7sotfrMRh0bG+9vLxnWdsAsL+zRErIE/x8fMiu7dS2seLQtMXM/LpWgP8yDpiammf/CI4Oj+f6
KvaZnV2yffKVHGxNk1/YaPv0G9lZW2ZDv2/zrIW5uRWb515G7UsK9SNStwMkAAiCcJY4ewFgx4Bh
c47EsCCiUgro62wmyD+K9qYOEiIiyUgroLqumfqSKDyDo8grKibC35eEnEbmJzoJjwimcXCagaYM
Lv9wHp+UOq2QSQrxJamoibykKJKT88hPDyK5OI/IiHhq62uIjQmjrmeEsvQ4YlMqmBwepb9/Ar3J
8NLynmWfB4B1bQdpKUwlv7qXreVZWvvGWJ3uIDEjnaQYX85f88KkCsLdLXLigolPyqW5Ywidfofe
tmZys9LwDwknM6+citIUsqqa6O5oJiosgsyUeL755hIDaxbtcwZr84lKKmZybJzEyFg6OkYpyUwm
N6ec+qZuBtvz8A+LpKi6nsz4KGLTq9naXCQnNYLqgXlWxutxc7rCg9ASFQlpLM7FNziU4Y0tprtK
iMstoae/l7joSIKjY0jMTCcjv5yquiaaa+uJj06kr3uU/NQk8nMraGrrpachndDULAbH+kkKDyU1
v5Hx/g4iQhOZWTQ+uwIgAUAQhLPImQsARss+M13FXLrwAxdvO+Lt7cWPP1wl2CeUG1d+xOmOO3cd
7hKVnERxTjxffP49salZRPt78/1fv+Sb77/n4sWr+IZFkZWZQFBqjRYAUoPcufvQnbt3nPALDiM9
PYXoiCc4PnrC5a++5OvzF7jt6Mojx8tcvunH8OwaWxubL22Es65tAChJS6R1ZJPxrnIcnR5y7dy3
/HT9Kue++Z7A5BrtcnlzYSJJGVWMtNTzwCWSjZ11/B/c5eGjJ3i4ehPs4cGXf/orl65e5/wPjuSX
VBD44A43H0WyfQD7Zh3F0X589eX3eHoHcef6VcICE3G5f50H97xxcXEjKCqelqYyfvr2JyKT8yhI
jePm+R/42/ffc+XmXTz8w6mpLsQ3vgLQ4ecWRU1DNR4uD/jpqy+4dO0KP/54Bx8Pb7ye+ODjG0hI
eBQO9zwJ9ffnxrUbRIYk8MDxGs73fXFxeUxkYipVlZl8f+EqCen5ZMTH4OfpwQ8XrlHZMvnCj0gC
gCAIZ40zFwD2do3kxgeRWTNAb10Gt6/c5Palq3h6h+LtdJcL31/ioasXcfERRPl78M33TvSMTZKT
GInj1Ru4evqSlJpCkK8Xbs53CUyuAvZIjoykc1rHfFcVDjduERbhg1+gDy7u/jy6eYvH7k9IzSsh
yecx3/3kQFPvOHMzi+jUbYBXLPNZ9XkAsN4CWBtpJTQgmMK8XO7ceIjngwf4h0aSkBCJX2Ay6ur5
YFMBwf6hFOYW4+cSQHhEAg9u3iY2o5Dc/FIaKktxv3uX6OQ0vHxjmFlZJS3Ch9sOT5jeMKKbG8Tz
4n1uOjjjE5qEn+NtXL3DiPV9wpXLV3jkGUh8QixZCRF8/8Nt2kbn6aov4tFtJ7w8vUkvLCY6LIhg
v8d4RRaqu/IEPPYiPDaWkLAI/B84ER6XSEBwDLn5xeTnF5KbV0RxQS637zwmJSEN91s38PKPJMrT
jcuXr+H6JIjYmECi4iJxdPamd3yBurIc4kJjuXXhR1LKu1/4EUkAEAThrHHmAoBuZ4uJkWFWtw0Y
dtbpbmyktLSS6Zk56ktLae8fZnl+jmjX6/yr339Nal0f25vrTE/NsjQ3QUF+LkML60z2NpGZk8v4
7LJ2L39qYpyFlU22VpeYnRqnsaaQ+s5B5ucXtPcVFuTSP73EQGMNtW09LM7OMj42i86gf2l5z7LH
AUB9ycfMDrZRWFbJ8Nw6xq0FyqtqmN9YY7i7m+1ddR/8gK6GMuo6RthamaaspIqh4SlW1tSOssr+
4RETvY3UdQ+ytLqB0WRifW2J4Z5O5lb1WjWCic4WSqubWFhcoa2ujvnVLYZbmugZHmdr20BpvA//
yz/+gdDyLvRGM1ubG+h127TUlTO4uI1hdYri4kKmlrdgb4MQLzdSC2swHsHGTB8VTe0srG6yvrqm
7cjqCsf6+hpT0/Oszs9rtwGW17fpb2qgb3SS7W0Di5PtVDV3s6m2jc7A1uYmixMT1Nc2smU6eFYH
QFUClAAgCMJZ48wFAKXBaNQ+bHtHh3l3l4ODfQwGPbv7++xaLBh123S3NtPaP4rBsotep8NgMKA3
GLXmbEa9DqPZwqF6bNBp81bz1Ot2tFYE6rFld59ds+mF95nU+3b32N+1oNMqAertshKg+qLVNv+Y
WJoaZ3B8xvbp13CA3rBr++R7Q20zCQCCIJw1zmQA+Hl3tGCwZzF9Uk343pXqi11cXGRqaorp6emP
wsXlFdZWV5idefm1l53RmuXNvPT8u1dto5mZGW3/VNtNAoAgCGcFOw0A4q9VfbnqS1dftPhmjwt/
td0kAAiCcFY4cwFAfaj4YVRftvjzHm8vCQCCIJwlzlQAUN32qg9fXn75LEwU36fLr3ju2WvLK2xs
bGg/CAkAgiCcFc5MAFAftrq6RkdnLyOj44yOTojih3PsFc89dXh0nM6uXu2HtLUlAUAQhLPBmQoA
CwuLjE9MaQOwqAUXxQ+lamli+5xStRJRXVMPDY+xtr4uAUAQhDODOoadmQCwuLjE2PikttC204ji
+1SNjKj+Hlf4UwW/+l9d8leDT6kAoH4YEgAEQTgrSAAQxVN4HADUD0D9EFTzP/VYPScBQBCEs4gE
AFE8hccBQI0CWV1dTVRUFOPj49qVAAkAgiCcRSQAiOIpVAFA7Xf9/f2EhoYSHBxMamqq9qNQQ1FL
ABAE4awhAUAUT6EKAOrsX/X+19nZSXd3t6b6YZhMRgkAgiCcOSQAiOIpPHkLQA3+c6x6Tm4BCIJw
FpEAIIqn8DgA2Kp+PBIABEE4i0gAEMVTKAFAEAR7QwKAKJ5CCQCCINgbEgBE8RRKABAEwd6QACCK
p1ACgCAI9oYEAFE8hRIABEGwNyQAiOIplAAgCIK9IQFAFE+hBABBEOwNCQCieAolAAiCYG9IABDF
UygBQBAEe0MCgCieQgkAgiDYGxIARPEUSgAQBMHekAAgiqdQAoAgCPaGBABRPIUSAARBsDckAIji
KZQAIAiCvSEBQBRPoQQAQRDsDQkAongKJQAIgmBvSAAQxVMoAUAQBHtDAoAonkIJAIIg2BsSAETx
FEoAEATB3pAAIIqnUAKAIAj2hgQAUTyFEgAEQbA3JACI4imUACAIgr0hAUAUT6EEAEEQ7A0JAKJ4
CiUACIJgb0gAEMVTKAFAEAR7QwKAKJ5CCQCCINgbEgBE8RRKABAEwd6QACCKp1ACgCAI9oYEAFE8
hRIABEGwNyQAiOIplAAgCIK9IQFAFE+hBABBEOwNCQCieAolAAiCYG9IABDFUygBQBAEe0MCgCie
QgkAgiDYGxIARPEUSgAQBMHekAAgiqdQAoAgCPaGBABRPIUSAARBsDckAIjiKZQAIAiCvSEBQBRP
oQQAQRDsDQkAongKJQAIgmBvSAAQxVMoAUAQBHtDAoAonkIJAIIg2BsSAETxFEoAEATB3pAAIIqn
UAKAIAj2hgQAUTyFEgAEQbA3JACI4imUACAIgr0hAUAUT6EEAEEQ7A0JAKJ4CiUACIJgb0gAEMVT
KAFAEAR7QwKAKJ5CCQCCINgbEgBE8RRKABAEwd6QACCKp1ACgCAI9oYEAFE8hRIABEGwNyQAiOIp
lAAgCIK9IQFAFE+hBABBEOwNCQCieAolAAiCYG9IABDFUygBQBAEe0MCgCieQgkAgiDYGxIARPEU
SgAQBMHekAAgiqdQAoAgCPaGBABRPIUSAARBsDckAIjiKZQAIAiCvSEBQBRPoQQAQRDsDQkAongK
JQAIgmBvSAAQxVMoAUAQBHtDAoAonkIJAIIg2BsSAETxFEoAEATB3pAAIIqnUAKAIAj2hgQAUTyF
EgAEQbA3JACI4imUACAIgr0hAUAUT6EEAEEQ7A0JAKJ4CiUACIJgb0gAEMVTKAFAEAR7QwKAKJ5C
CQCCINgbEgBE8RRKABAEwd6QACCKp1ACgCAI9oYEAFE8hRIABEGwNyQAiOIplAAgCIK9IQFAFE+h
BABBEOyN4wCgCvZj1bFKAoAonlACgCAI9sZxAFAFvFIV7KqglwAgiieUACAIgr1hMpm041NRURHx
8fHExsZSXV2tHdMkAIjiUyUACIJgb6iyVK/XMzQ0REREBDExMUxNTWEwSAAQxWdKABAEwd44vgWg
QkBbWxs9PT3ac3ILQBRPKAFAEAR742QrAHXWrzw+XkkAEMWnSgAQBMHeUAX+cQA4qQQAUTzhuwwA
6sc0MjLO7u6uVglHFEXxQ/umclQCgCie8H0EgOP0rTxug3v8vyiK4rv0VccY2+PZsRIARPGE7yMA
HO/HKgiMjo5SUVGhzUP9yGw/RxRF8Zeojifq2FNaWvqshr/tNLZKABDFE76vAKB+jB0dHURGRmrt
cI9/ZLafI4qi+EtUNfzn5+eJiorSmvn19fX9bBkqAUAUTygBQBTFs6gEAFH8lb6vAKBeO74FUF5e
LrcARFF8p8otAFH8lb7rADA6OqHVxLW+Zg0BKqnbzl8URfHXqo4/6vhymsL/ePqNjU0JAKKofNcB
oK9/iO2dHTY3t0RRFD86l5ZW6B8YxmSUACB+4r7LAKAcHBphcHCEoeFRURTFj051kjI9M4vBoJcA
IH7avssAoP5XPyp1SU4URfFjVDtG6XTasUsCgPhJ+y4CwOLiIpubm8+uAoiiKH7squOXKvAlAIif
rO8iAKgfjQoB6jlRFMWzojpubWxsSAAQP01/TQBQj0VRFM+6KgCoICABQPyk/KUBYGFhQXteFEXx
rKsKf3V8O3mMO1YCgGi3/tIAoCrPqLQsiqJoD6rjmwoCtsdCCQCi3fpLA4DtJTRRFEV70PZYKAFA
tFt/aQB4cdptDGocboNee2z7+guqnrukS2BRFM+IEgBEu/VdBACjUc9QTwe9w9bONQxGM7tm1R3w
DibzrvZYp9Ozu7uHSb/FwuIKJouFXYsZ3c4ORjWNxax1HWw7b1EUxd9SCQCi3fpLA8DJILC/b6Yo
KYqU4k4Oj/aZHe2koaMP856R/o46aruG2d5coqmxjtauDmrqWhge7KWusYsdg5Hh7gZq2/pY39rR
AoHtsoiiKL5vX3Vyo5QAINqtvzQAPG9Hu4TZpKM8M5G82hGMq6OEejvywMebyLgIwoOcufPYG39/
L/wCXLl21xlXZ2du3nqAh+sTgoJCiQh15sY9d5qGl9DtbEqfAqIoflDVsU0dd1SnQLZBQAKAaLf+
0gCgfizHPWqpKwDFSRHE5DYz1FpAQFg8laXpnL9whfL6Rorjg/npmjNdPZ0E3HfkwoVLhKTVM9FT
zXdfX6Cwto68uChqemYwm1Q9gpd77RJFUXxfqmOaKvxfdZtTAoBot/7SAKD23eNpTRYzAw1FON5z
JiA2kaxEH9xCkpkY78H54uf8T+fuUliQybd//gf++boLOdl51LQMMD7ST21lGe43v+b//acfaJvc
wGKUoYNFUfywquOaOs6p5oASAMRPxncRANS0quLf/t4uZpMZy+4eB4eHbC/OEhMSTFxlK6N93QQH
+lHcMwFHR9pQnEazBcPaEvGhIYTnV7OuM2o/NttlEUVRfJ9KABA/Sd9FAHi1W+zodOwfHHJgMWMw
GrVQsGsyPLvkpqbZ1qY54HDPwo76/6X5iKIovl8lAIifpO8iAOj1OgwGg7UJoCiK4pnRoA0RLAFA
/CT9tQFADaIxOzfP8MgYo2MToiiKH5ej4y8/91R13JqZndNOYiQAiJ+cvzYAqB9OT+8A8wuLLC2v
iKIofjQur6yyurrO0tLLrykXFpbo7unXrgJIABA/OX9tANDpdrRpVBBQVwNEURQ/FtUl/t1di3bc
sn3N+rqeoeFR7bEEAPGT810EgMGh0ZfeL4qi+FurCnaTyfSs4rG1rpLh2XFM/R0cGpEAIH6aSgAQ
RdFePRkAVPna3d1NU1OT9rw6lkkAED9pJQCIomivHgcAdY9/cnKSmJgYwsLC6O3tfXYlQAKA+Mkq
AUAURXv1ZACoq6sjISGBpKQkCgsLn70uAUD8ZJUAIIqivXryFsDGxoZ2LDtWvS5XAMRPWgkAoija
qycDgDp2Hdf+Pz6OSQAQP2klAIiiaK/atgKwVQKA+EkrAUAURXtVAoAovkEJAKIo2qsSAETxDUoA
EEXRXpUAIIpvUAKAKIr2qgQAUXyDEgBEUbRXJQCI4huUACCKor0qAUAU36AEAFEU7VUJAKL4BiUA
iKJor0oAEMU3KAFAFEV7VQKAKL5BCQCiKNqrEgBE8Q1KABBF0V6VACCKb1ACgCiK9qoEAFF8gxIA
RFG0VyUAiOIblAAgiqK9KgFAFN+gBABRFO1VCQCi+AYlAIiiaK9KABDFNygBQBRFe1UCgCi+QQkA
oijaqxIARPENSgAQRdFelQAgim9QAoAoivaqBABRfIMSAERRtFclAIjiG5QAIIqivSoBQBTfoAQA
URTtVQkAovgGJQCIomivSgAQxTcoAUAURXtVAoAovkEJAKIo2qsSAETxDUoAEEXRXpUAIIpvUAKA
KIr2qgQAUXyDEgBEUbRXJQCI4huUACCKor0qAUAU36AEAFEU7VUJAKL4BiUAiKJor0oAEMU3KAFA
FEV7VQKAKL5BCQCiKNqrEgBE8Q0eBwD1A1D7n8Fg0FTPSQAQRfEsKwFAFN+gCgBq51f74vj4OJOT
k5rqx2AyGSUAiKJ4ZpUAIIpvUAUA9QPp6ekhLCyMiIgIkpOTtR+C2WySACCK4plVAoAovkEVAI53
+KKiIkJCQujr69NuA8gtAFEUz7ISAETxDR7XAdDr9SwsLNDb2/vsByABQBTFs6wEAFF8g8cBQP1A
jisCqv83NzclAIiieKY9MwFgeGRMO/ju7OhE8YNpMqlbAC8/r/ZLFQD6B4YlAIiieCb96AOA+rux
sUFPbz8Dg8PawojiB3PwFc89VRX+ff2D2j4qAUAUxbPmRx8A1IKpD1QLsLOjFkgUPx7Vfqn2VXVL
QAKAKIpnyTMRAGyf19zZ0RZEHYRfek0UP7ASAERRPGue2QBg0OvZ3NhAbzRj0OvYesU0ovihlAAg
iuJZ8+wFgB0de7t6cmP8cXC8h19ILHObBhQH+xYsu7sccYTFbMBo3gP12GTEsnfIwd4uFssuhwe7
7GxvYbTsa6+bjGYOD2HXZMKyp547xGTUY9494OhgT1tB22UTxZNKABBF8ax5ZgKA+qsqA25ubbNv
XiMyIJjOiWUqk8NJzayktjCD/PIWWuurCAsKo6F7mrHOQgJCImgdGqe9JpOc6ibam+tITC1iZcdA
T30egUGx9A12khATTHVvL43lBQSHxNI3sUR/Ux4J+ZUsbenRbT/9/M1NUXzm8f6pHksAEEXxLPnR
BwD1Vx1cVScs6gC7tLzCrnGV+PBohtf3mGwqJzIwguDHt/n9X77lh8sPSUxIxOXufXyDg8jOTuH2
pat885c/8u33P/LtN5eJz6zDuHfAbFcpN6874B3oT3pGIq6P73L5hhvJCXE8uuXAub/+js+//htZ
tUOYTXptedQyiKJS7Q9qvzzeR9VzEgBEUTwrnokA8P9v7z6/osrzfY//Y/fZfXTXuk/OvetMOGem
p+d2z3QwtllRWhSQnHMUEAQElSAGQEEyiBJFEBDJkqmc4H3XbyMd1O7xTM8503A+r7U+y6LC3ruC
9ftW1fe3t/nkbd5crZkANjtb3nWyYyPIL73FtbxUMmPSiDx1icNHDnP0ci7TM+MkhIWSnJlDdWkh
wSdOExJ0gbyiAkLCkng2uQL4KEo6x5XkQiqvZZBfkENEeAgxmdVMTfQRduYcwadPk5xzlc7hadxu
x9umQ0X5PrvfUqkAUBRlr2VPFQA7KzY7YLEz2PmQwoICHnYPY19d4m55KTfrGngy8II3b+aZnHhF
TW40//N//x/ymgYY6bhL1aNWhp6PMru4itNpo73+NsUltxgdG+TWjRJ6hkcZG5tkYW6asfEpBjru
U3rnIQtrduzv3GlFMVEBoCjKXs0eLAB2+gFcHh/b29t43S7rWwH/9jZbAT8etxObzY7X42Kgu52G
li4WNxz4AztNgOYQrnbbJuvrG3h8Adjewul0EdjaaRY0e3cztzd7HXR7/Wz7fdjMOj+wfcr7Mc+R
GQzNi2U/xrz2fvgfQAWAoih7NXuyAPiYmAHb7fWx5fdh39QA/l8R8/wsLS0xOzv73u/l+yXmvi0v
L/9ooFcBoCjKXsy+LQCUf07MAOnzmemX+5PH42FmZsZ6LZqoAFAUZa9GBYDyD4sZBOfn562Bcmtr
a99mt/NfBYCiKHs5e7IAMBvreLsHQKfHi9vpwOEyf29id7nxuZ2sb9gIbMP2Nvg8Tutys3Mg0y9g
7rD5jd/l8eBxvT3PWobH2jGQz+Nm4yceEOWns1sAmN6MdwfN/ZJAIKACQFGUfZE9WQDYHU4mRp4w
Ob/E885WesemeDXwjNHJN0wNdfOo5wVu2xtuF+eTnZ3Fg44Rxgd76RmcZPXNtHVkwecvRunraufp
8GtW5l8x8nKG8f4WsjKzqHvcxYbdTPt7f5uUn44KABUAiqLsnezJAsDtC9BWnU9+7SOyLhwl9tpN
rmdn0NA3R1NxMkHx5cxPPOFSSAJPB1pJiMwkLzGMPx6Mof9ZO7k5+ZSUVZAdc5E/HUmgv6+dpJhk
8rPSedTWw4PmDmZXNqzZAu9uk/LTUQGgAkBRlL2TPVkAmAMAzQx3kxEZSVpJPvk5haRnFjI1/4rs
hHDCwuJ51N5M8LETJMWGkphZRuO9WsLCU8jLL6K8vMLKjfJyIiLSKC4u5dzxM1S3vmDhZTtxSTm8
nFvFaf/wdikfzs8WANs/bqZ77/K/M9/7wDr/zvzcNqoAUBRlv2RPFgAbNgdbznkuH/2U3PJWrsce
5VTkTaYGGwm+GEp6TCRxyYkkpJUyPtBCSloh14tLudvURdy5A1yKy6O8tIzc3ELqW3qICzrEgaPf
cq2smjez45w9cJwHz6bxue3vbZPy0/nZAsCzSVdzAw/uP+Dl3Ob3w7Zp0vj+L7beVgrmfGs5b//d
vdbu8nb/tq8vM/lqBrvb991treu9Xe7u8re3t/D7A1ZPyA/P//E6t6zLvc5NllY23r8PKgAURdlH
2ZsFwMYmPp+D20XpNPVP8fRBObce9jHQ9oDeyTVwLVBamM+te1348dJ+9w43q2rpf7lAb0MlV8ur
aG1p4cH9egbGF+m6X871O4/prLtGWGg4oTE5DE0t4XJ8eLuUD+enCgDjzWgbYeHptLXUEh1dgmN7
G5fLbV3mcbtwe82RHM2RGLF+egmYAXl3QN+GrYAH59vLzTLdDtMA6udpYyWHj4XTP7VuXdFp28Tp
NrfG2sGT4fW4cawv8WJsFgJeq0HULNk8vw7P2+s67DvrYou+pioKKlq/W5cKAEVR9mP2ZAFgNnbT
7nz7hr0j4HWyaXPgdpl/Tae/2+rsN3v8c1h7+NvZA6DZu5+xveXH5TR7DTQDhscahJwul3VHvT7v
zt4CP7BNPxezLpfbg8/r+QWHEN7E/jE/PWx+5PU21rHZHbjNzIj19bd7QPTjcdqsx9AarP1enI6d
x+6XzH74uQJg+WU7wecjqbyex9WC29wtS+bAqXNk5F8jIvwylyIiScytpK25iqiwMxTcraO6spqe
zi5ulFVQmBLEF2fDGJhZs5bXWZnBwcPBZOUWcP5CLP2vbdb5dTmRHDyTwN1bFZz45gL3b9dz6cxJ
UlPLqK17QE1ZLBejYomOSyEqNJSkjBu0Ndzi2Ddfklp2n0c1mRw7dpjEig5reSoAFEXZr9mTBYDD
5eLVYCvx0VFEREQRl1HI5IINAi5mZ2bZsLvx+zxsmjtgs+NwOKw4XU7WlmZoefiAOw/aWFzbxOlw
Wp8Q3W7vzidFhwOv15z2WAWEze60dmzjsJvl2LFZ/zpwe3zWroPNgLm+sWk1JhJw0tv2kOq6x8yv
mAfGhsfrs4oLc1uz/Q6zi2GrSPBa53veLsfhMOvx43GZB3rNGjg2TEHh8eLzuq3dE+9sh1mmH5d9
nZmZeewuD36fzypmPNZ2O9nctOP1mevYcLh9rM1P0tY5gN3ltKY9NtVU0DQ0x+qrZ8RHRZOSX82L
sZd0dPVjczqtx+3d5+Jj8nMFwMJIK9EJRXQ3VpOclMI3n31NWnoq506cp6T8NjfKK7lVcY3Dxy4z
MfWCqwXXqa8r5dS3YdwozuXwZ4dIio3lYd8c7tXXlKVkcvn8OY6c+pag4FgG511szr6gKCGVU2fO
k5CaQ3xkBOkp+WSmxnI5+AqnTgdRVNvM0ngXh/56is4Xr2mtKeCTf/kDVxLSibkUTMLVKl4Ot5Nd
9kgFgKIo+zp7sgDYtJnrL3H/WjaJsYUUFaSTmFHG4IsXdLT38Pz5EB3tz1jdsLM0O8PU6zkW5hdZ
np+lveEO4d8GcTw4hek1J4vT43R29/Fi5BlPhsdYXJyjvaOdrie9DL2cYePNOA2PmphamGN6ao6l
hQVmZuYYHeqif2IWh9OBfW2Z/q42RkZHKU6L4sDJGMYWN/E5N+l+3EBrdz/TM/OsrCzz+tUkfX29
PGptpbd/mOdDPQyMv2Zh9hXNTS10t9YTHBzN+JIdh32DF087aX8ywuryGzpbO3g9s8jQ0156u5/Q
1tnP9GQ/9xubGZmYpKe1mdaeFzgda/R2tzG5bMO2PElJRhQR6bfxbm3h2lwiM/xb8mu76H9cTXLu
DUqyc8jKyCOzoBqH3/efUgC8meijrnHQOt14o4LyohzS84u4VVdP06PHNDU95lFTC3VVJcRcCaLk
4SDuxQHCY7NYXV3mVnYsKcVVzNs9+DYXuRoaT1hkHLEZeWRkFDOx4sW+OE7mxUhCYtK4dfMuCRdD
uH6jlqLYWMKj47l1p57KwniOHD3KybBMJuaW6G5toraijLSUJB4+e86D8gzOnDlOecMzFQCKouzr
7MkCwMTt9/Gi5QG3K1t4WGO+Bg4jNjSc+PRCos4f40+fBTH0aoPZgWay4iO4eOEi6Zn5XA65wuWQ
S1yMzGXN4+FmVjznT4dw+C+/45MvD3DqTAhnzp3jbNBFYpKzyc6IIzo+gpS8bPLzCrheUkxCTBRf
f/5bfvdVEAMzGwScC+SGfsNvPjlIRGQMF0LTmd300P+wgtjIWEqysgiNKeDV1ChxFy9w9uQZDhw4
xpWQUD7/82/586FjnDgRTExMAhePHeXzwyGMLTnweTeoyrjE//3d16QmpfKXT78gL72E419/xrfB
iaSlZZKdEUVcUjyHDh4nNCyKhLhUUqPD+cMf/pXD56PIyYrnSsRFwnLvWL97zwzUE3w2iMuxGTQ8
qOLAV8eIyrlOW0sDOQU1OHzef3gBsJO3TX3fNeptsWHb+S3edN7tNv0Z5tuWH7YGGgG/h823v+mb
ywI+l7U/iB076zP8Hoc1S8Qw3+4YXqcD/9sF1hak8/XlWEbWzLJMk+HO+TbbBtaPQ1t+61se6+R7
90EFgKIo+yd7tgBw+bwM1FdRXHCP2tvXae17Se3VWI6ciaQwO53jh09T1zXOlnee0LMHuHA6glMR
YaRnpnP86AlOh6Sx6rRTWVjIrbLrnP7yIHm5OZy/EE1ZeSWl12+Qnx7H6YvxND2sJr2ohvvXo/jq
YgLV+SkcPRpEasZVRt84GGmpI/rsFY4f+4aDx09z8kIi8zY394vTKa1uYerpY0KCEqlvbOTsocNk
FJRTdqOK24VZfHPwDDnZaZwMiuflzDRZERc4H5HHsjvA7FArcWfCOX36HGGxGcSGnCc8IpmMxChO
fnOSY6eCSMkvo6/1Lgc+P0pz/zhtddf47LefEBqVREZyPOGxmTTeLSc6o8Ia8GqLUkjIuUF2chzh
UdEUlD+yBtSp/kbi0m78p3wD8OMCwHTafz/Y757+4Xk7vu/83xnyf8z0cHj9P5wGuMPj8b571o+Y
I0Z+d/q9bdn5e/f0+/dBBYCiKPsne7YAsDsdTA330dUxSH9fD8Mvp3ja1kjV3SYeVVaSkJjJyOtl
vD4Hzfeq6e55Rn17C71dLVRW3qaq7jFrdhs9bW2MTs7QUl1AZulNHrZ00dXZRadJVy9dzRWER0bT
O7XC7MBjbtxpx7GxQHluIldrH7PudLE8Mcq1xGQSM65ys+YOVbWPWFh3sTE/Sk5cKJlXq2muqyIq
IpnSkpu0dvXQ2tbN9Mw01UVpFFTfo7Gpk6npadqb73MtL5+nE4tsrsxTmZ5JdGo+9fXN5CUmce9h
K5WZmeQXl9LW+ZTKrDD+17/8hnPJJbyanmXg6ROedLSQl5HI/d5RehsrCAkJpvbxMzweO62N9bxx
gW3+BeWlFXT1j1u9A/OTwzx83IvNNFF+4Ln4mPx8AfAx2cbrsjE5OYHTGtvdzL9ZwpxcWX7DzMI8
iyvLLK2sMfd6gtGJOVbeLOJw+XFsrrK8tMDQ0BhOl42p6VlrJsH6mzmmZlesImJxfh6Xd2eQf3/d
HxcVAIqi7Jfs2QLANN/ZHE5cLofVWGcdF8Dlxut14/Z6CQT8OEwj3aYdfyCAyzTAud3WnfX6zJxx
vzXQmc5/06BnZgf4TWOeZ+c61vECXC5r8GF7y9opkM3pxud1WU12fvOJdstvdc7bTeNgwG+t0zT3
mW3Y3NiZqeDzB/D5zBQ3D4G3X1Ob25jtsdsdeP0Bq+HQfDI198GaRWAOYWwznf47X0VvB3xW575h
rrtjG7/HxeM7t0i7VsGrNRe+t4+F22OWEbCaC00ToVmv9+0sAJfbHDPBvtMw6PVYMcdQsPatsOX/
4KGTdxof7dZMCjNd7t3naTe/qACwPnj7uZmTxcVL4eTW3OFWTgSfHjhEeGwK4RfOc+z0Oc6HhnE5
KpXU7EIqiq5x6tAhiorqiP32OJdC0yktq6aiJIUr8dFkXs0h8vIV4hOyKC+8xoHPv6L24Zj16L23
/o+MCgBFUfZL9mQBYKaymal7ZqBxm858h5ttM8g7Hfj8frYCAQI+86+f9eV5pmbeWAO52+3A4wuw
5XPwavIV6w4P26Yxzgzg/gBbAa/V4W8GTDNH3O1x8qC0mLudz3cGX5cLt8drzTBYX11haXGaxvpH
vLH58JsDDjm91nY4bDtTFU1RYX67NjMJzPodSxPU1jVj822bH7Wxb27i8W3BlpeFuXlW1s0URLPt
Hmw2JwQcPHrwkNfLDjZn+wmPTGFx005ZZgJVrTvb9L1t3E47DpeX7e2AVUy4vQGreDD3yR8wn64d
OD0B7EuvqG/owO3zMdD5mJbecev27Q8f8mJmZz6925pVYA7ru8X6yhLz84tMTU4ys7BiTXM0xYsp
CH44bfCXFwBuSrKKGR6fIjv+Ml/84Uty8vK4dP4S1ytqqL5dQ8WNKqpu1xJyLpj0rCJyk6OIicui
6Go6Yd9e4uz5i0SmFDM5/pSjXx+humWEsaeNJMVnknjlIlnXH1rPhXne39uGj4gKAEVR9kv2YAGw
icOxydjAE64XF9P7ao61uefcqW9k7PVrHj2oo6K6mjsN9dQ/aqO1rY22th6a6+/T2/eSZ+3NNNQ3
86i5i7GRLspu3mJ0ZoqW+zVU1jQxMz3N3aoahsaX2Zzv5YvfH6Dt+SiP6sppGXzOQG8HDe1DDLRX
ceZMMLExcaRlX6dvdIE3r55R/eAhM6s26xPzYFczd+53sbo0TWNjPV09zaRllDEx0cedxhZWbDY6
G6qora0i6NhxqjteMDHQxIOuITY3Fnl0O51DJyMZX/Wx9qqLP/3u/9Ha18vxz35PWnkLfa31NHcO
MTLQS3lJOU+ezzI93E1NdQNzy+s8fXyL4qoGZhfM1MdaeicWWZ0bJic+hG8Ty6xf1htvFlNW08yz
tjKOnAilc+g5TY33GJx8Tc/jeqrrGilIieVS3FXKc2M5cCyElqFxlhdmGHkxyobN+d3z9csLAD+F
8SEcORnM3e7njLTWkpxbwN2mNro6u+ns6qa9o5vu7idUlFXQ1NjKtfhYim/f4+7VqySkpFLzoIP2
hkLCYhKpe9hE3/AUUy8HaaipJz08jKqWAQLmd/931/+RUQGgKMp+yd4rADZtbPnWyIlOIDkjl/iM
ZEKOfc2/f/45Bw6f4uK585w+E0RQ8CUuhsZxMSSCtMRkjnz5GfHxRVw+e4ATJ8OJi00mLj6GvMIs
gs6f5VJoPFlpaSRExvGXP33K1cpeHCuDXDgbRmFRDjk5KcSnRHLk4Bmqm0cY7blLaHgs8dGxpKak
Ex8ey7nDn/HbT/5ESlkLAb+NpKADHD4VTcK35/jkz5/w5ZHTxMUlc+qrT/i3z/7KhUsRZGflc6+i
nG+Onqf0ejEHPvkNf/ziG0Ijoyi+lsa58BTGV70sTzwl+lI4kZFXCL0URe29BrLCT/D7T7/m2IlL
pKemkJRaQmtdMX/8zb9zNiSKa8XppGakc+HkCT759N/46sQFEpLiyc1JJjS90ioAuupvWzMkiksy
iUxIIujEUf745085ePgYp4KiKchO44s/HyQpp5Dwc8c5H55MdmYGGZmZXK9qxuv3fvd8/bICwDTj
eelpb2duffdnjg+1//1y7637PxAVAIqi7JfsyQIg4F3jamIqZTdrSEqI4syBoyRl5xMVEU3h9Rvc
KK+gpPgG5eWVBJ04Q2JqPmnhwZwPiSEvLZGTR45w4mwIEbGJ1NTc4Pg3J6mof0p/Rx1x0WlEnD1G
REYVLucs+Xll3Cy7SnFpCakJYZy5nMWiExZetJGakERSejHjU+OkhF3kmy8PkZiRRc2jPrzeDW5n
J3Dq5FmO/PVrImNTyc5I43JwCKcOHiUzr5Ck2Ghyr96gr72Z6CuJFOdkcubISXILS4iKiKSiopjQ
0GjGVrzMj7SRkZpLdkIUiblFhJ8KIeHbKI4cOcjXF9KZmZsgNfoKYSd2pjx+fvAElTXV1Jbmc+yv
X3MpLIaCwnyiohOpLM3lStI1a3DtuFfOsSOnqbhVTlriFQ7/9RDRiemkxEeTXFjP69EOjh44SW5+
EZGXzhObWcVI/x3++NVhRpccuE3/wNvn6xcVAG+z4/vb/81lfXf5jz/Vf+h2HzrvPxoVAIqi7Jfs
yQJgy7dBXmwIZy7G0DU6w+xIBzmFxTx+0s/gwAADA4P09Q0yMDjE46bHPO15RlVhAY3tvbTcvkn5
rWp6no3wvPce6TkFPBkYZHhkkqnJUXpaOyjNzaNtYByHbYnunkFW3kxwPS+ZupZu+p4NsLhmx7Y2
xb3KUu42P2Fhfoa+vmGGuhvIKihhZHYVl8tOV+1trt2o4/XkCCWFudzveMLg0CgDHffIKq5kamGR
B+U55F67zeOGOto6n9FWf4OiO83MTY9RlBFLSdUDVmxuVuYm6Xk6ZPUGTI4950lHL1WFV7lqZi60
P2NhYZZnvf201tWRkVlAx9N+UoO/5H/8/gDNfc+pKc3lwdMxxp81k5QYR2PnAG6Xi4kXzxka6KOy
IIWCyjtMjg5QVJBPQ2cvfYNjzM28orXpPjU3b9Pa3U79nTpuVuQSk1uCwxf40YyBf0QB8GuPCgBF
UfZL9l4BYPaVb1tjZPgFa04ffrcTh2unmc/r3une/z5Oa7e+brfL6tr3edx4rGY/v7VvfJfbZ93O
DIROp93q5nd73NanSrPLXGsXv25zfADTGIh1e/O36fA3Hfq+QMA6b/dBdHl8b2cMbO40Afr8bJvu
fqfLWqa5rtkmt8dvJqRb3fjewBZbpsv/7S6Dvb4ttnweayc35nfxLWte/rq1S2Nr3bu7E/a48Vu/
ZZtt2DmGgcvsWthvGvfAs7nKg+pb1LT0sO7yWUe587mdOF07X6+bx8pso1mWmRlgptSbdZmZFGZb
zW6RzQwLswtir9eH3+/fmWO/5aG9uZ7hDxwsSQWACgBFUfZOflgAmGbx3bHTnDaX/woLgJ1pamaK
njlgz7u3Ud5m02YVPaaYsAqWdy//O2Mee1OsmMHfzMb44WUqAFQAKIqyd7JbAJjTk5OTDA8P8/z5
c8bGxqz3tV9lAaD8OmMGQTM47memuJmdnbXurwoARVH2cnYLAPOJv6WlhczMTCu1tbXWe5m5XAWA
8lExz48pAJaXl60XjPl7P8Xcp6Uls0+Eeetvc59VACiKslezWwCY9y0zwN+8eZOioiJmZmaw23eO
YKsCQPmo7D4/r1+/Znx8nImJiX0Vc5/Mf4wf3mcVAIqi7NW82wNg3t/Me50Z/M3lv6oCYD9+qtyP
MS8e82Laj9mtinfzsQXA5ub7r29FUZR/ZsyY6na7v5sFsPve/f3lv4ICYPe3ZbNyRfk1Zbch8KcK
ANOoOjD4nJWVVdbWTKGgKIry68jOIG+33r/evcxkdXXNev/6pxUAu5WJ+RbAbICi/JpiXpc/XwDY
eDk+yeDQiPVNgKIoyq8ro4y8d95OhoZGePly5ycB8373TysA3v2aWVF+Lfm5AsAqAuz2t7EpiqLs
oey8d5n3tX9KAaAoeyFmZsAPCwDz97vXURRF2Ysx7227M7z+ywoAE/MNgKLshei1qyjKfs6773H/
6QWAoiiKoii/zqgAUBRFUZT/hlEBoCiKoij/DfMPKQDMQhRFURRF2Ttx2DZYXP0FBcDYnI3FlU1F
URRFUfZQ3qxuMv1mk+d/TwEwMmuzYqoHRVEURVH2Vszgb8bxjy4AomMT7234sW6gKIqiKMrezpwD
ng5P/O0C4Nz54Obhl6/pfDpiVQyKoiiKouzdPB2a4F59898uAERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
RERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERE
REREREREREREREREREREREREvvf/AReJetGjwIpQAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing ithems
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Determine the AppId based on the ServiceType
		switch ($ServiceType)
		{
			"Microsoft Graph" {
				$appId = '00000003-0000-0000-c000-000000000000'
			}
			"Exchange Online" {
				$appId = '00000002-0000-0ff1-ce00-000000000000'
			}
			"SharePoint" {
				$appId = '00000003-0000-0ff1-ce00-000000000000'
			}
			default {
				# Log
				Write-Log -Level INFO -Message "Invalid ServiceType specified. Valid values are 'Microsoft Graph', 'Exchange Online', 'SharePoint'."
				return
			}
		}
		
		# Get the service principal for the specified AppId
		Write-Log -Level INFO -Message "Retrieving service principal for AppId: '$appId'"
		
		# Get needed data
		$servicePrincipal = Get-MgServicePrincipal -Filter "AppId eq '$appId'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
		
		# Check if returned data
		if ($null -eq $servicePrincipal)
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found with AppId '$appId', Service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principal retrieved: AppId '$appId', '$($servicePrincipal.DisplayName)'"
		
		# Extract the permission scopes (AppRoles and Oauth2PermissionScopes)
		$appRoles = $servicePrincipal.AppRoles
		$oauth2PermissionScopes = $servicePrincipal.Oauth2PermissionScopes
		
		# Check if scopes assigned
		if ($appRoles.Count -eq 0 -and $oauth2PermissionScopes.Count -eq 0)
		{
			# Log
			Write-Log -Level INFO -Message "No assignable permission scopes found for service principal with AppId '$appId' service '$($servicePrincipal.DisplayName)'."
			return
		}
		
		# Log
		Write-Log -Level INFO -Message "Assignable permission scopes retrieved for AppId '$appId' service '$($servicePrincipal.DisplayName)'."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)'..."
		
		foreach ($role in $appRoles)
		{
			$roleDetails = "Role details: '$($role.DisplayName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		Write-Log -Level INFO -Message "Added all assignable permission scopes to permission list for AppId '$appId' service '$($servicePrincipal.DisplayName)' to the list for management."
		
		<#
		foreach ($scope in $oauth2PermissionScopes)
		{
			$scopeDetails = "Scope details: $($scope.AdminConsentDisplayName), ScopeValue: $($scope.Value), ScopeId: $($scope.Id)"
			$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)
		}
		#>
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

<#
function Get-ManagedIdentities
{
	# Clear current data in the ComboBox to not keep old items
	$comboBox.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded updated the list of found Managed Identity´s from tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the ComboBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$comboBox.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}
#>

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		# Log
		Write-Log -Level INFO -Message "Loaded updated the list of found Managed Identity´s from tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
		
		# Select the first item by default and update the TextBox
		if ($sortedIdentities.Count -gt 0)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked(0, $true)
			Update-SelectedIdentity -selectedIndex 0
		}
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
	
	# If there are filtered identities, select the first one
	if ($global:filteredManagedIdentities.Count -gt 0)
	{
		$checkedlistboxListOfManagedIdentity.SetItemChecked(0, $true)
		Update-SelectedIdentity -selectedIndex 0
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	#$textboxAssingedRoles.Text = "$roleDetails"
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Is-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	# Services to add to dropdown list (more to add soon when tested..)
	$ServiceComboBox.Items.Add("Microsoft Graph")
	$ServiceComboBox.Items.Add("Exchange Online")
	$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Check-ExecutionPolicy
			
			# Check installed/loaded modules
			Check-Modules
			
			# Connect
			ConnectToGraph
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}	
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			# Log
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Write-Log -Level INFO -Message "Managed Identity ObjectID: '$ObjectID'"
		Write-Log -Level INFO -Message "Service: '$Service'"
		Write-Log -Level INFO -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Write-Log -Level INFO -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$microsoftGraphToolStripMenuItem_Click={
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}	
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: $LogPath"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: $LogPath"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: $logFilePath"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at $logFilePath." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at $logFilePath - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	# Get data and get permissions
	Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click = {
	
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Log
	Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
	
	# Format data
	$PermissionsTextBox.Text = $selectedScopes -join ", "
	
	# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	
	# $PermissionsTextBox
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get data fo filter function
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	$filteredItems = @()
	
	# Filter elements
	if ($filterText -eq "" -or $null)
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}
$pictureboxSupportMe_Click={
	
	Start-Process "https://buymeacoffee.com/sonnes"
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}
$textboxSearch_TextChanged={
	$searchQuery = $textboxSearch.Text
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck=[System.Windows.Forms.ItemCheckEventHandler]{
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		$textboxselectedIdentityID.Clear()
		$textboxAssingedRoles.Clear()
	}
}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>