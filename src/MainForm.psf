<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
oKNJpw6fV9dYcNQur29BQyPDGjHj+49PWDuF8bEJDXZ79OhRpjyd/ZqcHNPY5LQW5qbUPzBsHX1a
I/u9YaIg/LC+qUytrq3oaXqKTp89p2txjzTn92l6bt4KioPDwxodH9PU9KTaPW0aGB7T1NSM5uZm
NTLYr7b2Hk1MjmlielZzMxMasMZ+91nld2xs3Ap+g/29mp43wXVYEzNzmpkc1eDImAIrS5qYGJc3
NLLjG7YXPw1NeSIAoBsNdhpfVG1trdLT0y27urqsFtOPHgDMj8uqRMfHLf2LftXmp2nPvmM6c/yw
ohNSlXzlhL7ZdURnT53VqbMxqix5ql1ffa3LsTeVEHtaZ6/E6dyR7/XVnuO6c+eGDuz7QdcfV2vV
O6Toi5d1MyFCPx4+rXOnDusvu3bq+MkIa6Cg7774WodPR2rX11/pu70nlJaWpoysfA0NduvM4SM6
efKs9u/4Vjt3n9PjtASdj76oixcjtXPHD9q1/6D2HT6j3MISJUQc0e9+/7m+231ESckpio85p8i4
KJ07fU6HD51WSV2v/L55hv38yFpDtM7MvFamlpaXVJCaqP2HT+p2yh2dPbRD3+w9qDMnT2nnrh+1
59BRnThzUVExiTp//KCOn7ymq2eOa//+c7qRkKj4mLO6GBdllb+jRyPU2Dul3ton+vqrH3Xn1h2r
jKWm3LMGXDLfe8Tpizp//bqSb0brsz//QTczK60JYib4/j9ZQzs+c58AgG4ydArAtFya+9ZQ9Bst
m1sSAMxOOzTEZmBlWeUF2Yo4elKnz5xV5OlInd17RH/3n/+Lzt/IUHlRpg59f1S7v96pX//hL8p6
kqmoE4f02e/+pNPnInTsZIQS4q7q5qNSrflHdGzPD4q+Hq/YqHP6h//8O504fVLf7z6t2vp6Hf7h
R129Fqdd3+9WTmGpTh3fodsFLZodbNQff/ul8ivqde30UV2Kva2UpOu6deuaduw6qsTEFF2LTtCN
GzcUcfS0Tu8+qL/77WeKvHpdxw8eUFR8vKIvn9L+MzdVWpCtu49Ltbq6bP0j8eNoyo65ysKMs2AK
8vT09IsytbK6rOx7N3Unp0bT/fX65ne/1/GTx3XyzGUlJ6UoNi5J8dei9e2O/bp0+qR27dqv86dO
6uvP/6Kvvt6pxNuJijx7WCev3NfTJ+nKKvOor7FYu778Ul99/YNynpQp7Xq0YhPidDHiqA6fjNO9
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
R3dPn/Xj6uzqQXxFk0bNkddmzXITAObm5gkA+FHd3AIwODistvau18oj4ifnW/atHZ3dVn1s9qcf
PQCMj4+HNanNIb6DwcIY2jkTAPBjacrY2NiYtb8Klb3XyyOiWwyW++npaat+3vxb+GABIPTDMjtv
0wpgbhF/rqGyw3lZ/JiagBle9hDdrin3m38HHzQABFcY7ISA+EsM32EjfkjDyxvidvHV38EHDgCI
iIjofH9RABibWpDPG1wJIiIifjp6ve8ZANqGveoa9ap3zGutABERET8t20e86nrXAHDpclTqzKqs
F5jU0Dm+cYuIiIifjuMBqy7vm30uT9/EXw8AR4+eyBkYn7fSAiIiIn7aenonVN3Q/tcDAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADiX/x+kPlm9J8mH2QAAAABJRU5ErkJggg==</Preview>
  <Form>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</Form>
  <Code><![CDATA[
$formManagedIdentityPermi_Load={
	#TODO: Initialize Form Controls here
	Set-ControlTheme $formManagedIdentityPermi -Theme Dark
	
	$ConnectedState = $false
	$clearExistingPermissions = $true
}

$darkToolStripMenuItem_Click={
	#TODO: Place custom script here
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
}

$lightToolStripMenuItem_Click={
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
}


#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	#Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		#Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	#Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
		Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
			SelectBackColor = selectBackColor;
        } 
		public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	#Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	#Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	#Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		#Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		#Set the text color
		$target.ForeColor = $ForeColor
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			#Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			#Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			#Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

function Get-ManagedIdentities
{
	# Get managed identities
	
	$comboBox.Items.Clear()
	
	if ($ConnectedState = $true)
	{
		Update-Log -Message "Loading list of Managed Identity from tenant..."
		
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'"
		
		Update-Log -Message "Loaded list Managed Identity from tenant."
		
		# Populate the ComboBox with managed identities
		foreach ($identity in $managedIdentities)
		{
			$comboBox.Items.Add($identity.DisplayName)
		}
		Update-Log -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	if ($ConnectedState = $false)
	{
		Update-Log -Message "Not connected - can´t load list of Managed Identity´s"
	}
	
}

$buttonConnectMicrosoftGraph_Click = {
	
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			Disconnect-MgGraph
			$ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			Update-Log -Message "Disconnected from Microsoft Graph."
			
			$combobox.Items.Clear()
		}
		catch
		{
			Update-Log -Message "Error disconnecting from Microsoft Graph: $_"
		}
	}
	else
	{
		try
		{			
			Check-Modules
					
			ConnectToGraph
			
			if ($ConnectedState = $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
			}
			else
			{
				$ConnectedState = $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			Update-Log -Message "Error connecting to Microsoft Graph: $_"
		}
	}	
}

$combobox_SelectedIndexChanged={
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:managedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $textboxselectedIdentityID.Text
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	#TODO: Place custom script here
	if ($radiobuttonAddPermissions.Checked = $true)
	{
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Debugging output
		Update-Log -Message "Managed Identity ObjectID: '$ObjectID'"
		Update-Log -Message "Service: '$Service'"
		Update-Log -Message "Permissions: '$Permissions'"
		
		# Validate inputs
		if (-not $ObjectID -or -not $Service -or -not $Permissions)
		{
			Update-Log -Message "All fields are required."
			return
		}
		
		#Update-Log -Message "Calling Add-ServicePrincipalPermission with ManagedIdentityID: '$ObjectID', Permissions: '$Permissions', ServiceType: '$Service'"
		
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
}

$buttonGetCurrentPermission_Click={
	#TODO: Place custom script here
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	#TODO: Place custom script here
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# TODO: Place custom script here
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		$global:clearExistingPermissions = $false
		Update-Log -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		$global:clearExistingPermissions = $true
		Update-Log -Message "Set to reset existing permissions (will DELETE exisiting)"
	}
	else
	{
		Update-Log -Message "No change"
	}
}]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>