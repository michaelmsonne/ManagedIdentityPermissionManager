<File version="3.2">
  <FileID>994b0401-5822-49c5-99cb-717d1f11a31a</FileID>
  <Preview>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
XhDu/aH2kVxNIV96tLk6h9rqMoxOqX2p1iW/I/ldvU1m1OtA/lBk37AAYBjmMEeOV1IAyLivqakp
1NaqE97qarS1ten+c1b1WwdrEKCMzFcdp3R67vl1g3aX8aXG6Wmux2RZrumujs01j+tx1zxfPH/v
PK5b93y769LPdc/7x3/Wz9l93H1lgnu+V+3fs9y98+33nFf390x/9bi6dT3mWqcMQpSvHZbBerr9
u/O51+d+jn5sz/buvz8krvm3VXEixYFMkxePvGjkRSG/s6MeKY4k7n3CAoBhmMMcdwEgV4vJz42N
jTCbzejt7dUnh3JCerAKAObARH5XTqcTT548eSsyPT39pW1nAcAwzGGOuwDQ7ySr/lZOcPr7+/U0
efxAfQTAHMzI7+ltiXubv24BMDo2gQ31h7TfshiGYb7LyDFLvsdGLleXd3mlEJB32N1FwdzcAfgI
QM4y5XGGOShxvza/qgCQn+8PDGN6ekZX0gzDMAcp0yqzqpOXjl7u7502OzuHsbHPMD7x8LstAGTg
layYYQ5S5HUpr9mvKgCePJlWf0Cf6SqaYRjmoGVC5+G+j8uxS74qXvri76QAkMdkxQxz0CKd/d5O
//fvy2vX/VaaVNAMwzCHK66xAXI8k3fi/2IFgAxGkBXud+BlmIMUKVbdVwdIASDvDOw3H8MwzGGM
u/Pfe3LzZykAJO6zKPdbrQxzkCOvVSla3X8YUhDw9cswzFGKHNOkGPizFwB6oWolDHOYwtcuwzBH
PXv7aX28U/nWCwCGYRiGYQ52WAAwDMMwzFsYFgAMwzAM8xbmTy4A1lUBIAthGIZhGObwZE3ljQqA
oSfqSVNrGFdPlgUwDMMwDHO4Mqz68dGvWwBYUq1VS8+AMfUEeZJUDgzDMAzDHL5IP/5w+SUGJuZe
XwBEGqKbH84s62qBYRiGYZjDnYGJWXT3Db6+ACAiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIioqPle9/7f6jbAamLiE2gAAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[# Write-Log -Level INFO -Message

#$checkedlistboxPermissionsToAssign.Items.Add($scopeDetails)

# Master list to store all items
$global:masterItems = @()

#region Control Helper Functions
function Update-ToolStripComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ToolStripComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ToolStripComboBox control.
	
	.PARAMETER ToolStripComboBox
		The ToolStripComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ToolStripComboBox's Items collection.
	
	.PARAMETER Append
		Adds the item(s) to the ToolStripComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ToolStripComboBox $toolStripComboBox1 "Red" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "White" -Append
		Update-ToolStripComboBox $toolStripComboBox1 "Blue" -Append
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ToolStripComboBox]
		$ToolStripComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ToolStripComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ToolStripComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$ToolStripComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ToolStripComboBox.Items.Add($obj)
		}
		$ToolStripComboBox.EndUpdate()
	}
	else
	{
		$ToolStripComboBox.Items.Add($Items)
	}
}



function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$listBox.DisplayMember = $DisplayMember
	}
	if ($ValueMember)
	{
		$ListBox.ValueMember = $ValueMember
	}
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	if ($DisplayMember)
	{
		$ComboBox.DisplayMember = $DisplayMember
	}
	
	if ($ValueMember)
	{
		$ComboBox.ValueMember = $ValueMember
	}
}

#endregion

#region Control Theme Helper Function
<#
	.SYNOPSIS
		Applies a theme to the control and its children.
	
	.PARAMETER Control
		The control to theme. Usually the form itself.
	
	.PARAMETER Theme
		The color theme:
		Light
		Dark

	.PARAMETER CustomColor
		A hashtable that contains the color values.
		Keys:
		WindowColor
		ContainerColor
		BackColor
		ForeColor
		BorderColor
		SelectionForeColor
		SelectionBackColor
		MenuSelectionColor
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -Theme Dark
	
	.EXAMPLE
		PS C:\> Set-ControlTheme -Control $form1 -CustomColor @{ WindowColor = 'White'; ContainerBackColor = 'Gray'; BackColor... }
	.NOTES
		Created by SAPIEN Technologies, Inc.
#>
function Set-ControlTheme
{
	[CmdletBinding()]
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.ComponentModel.Component]$Control,
		[ValidateSet('Light', 'Dark')]
		[string]$Theme = 'Dark',
		[System.Collections.Hashtable]$CustomColor
	)
	
	$Font = [System.Drawing.Font]::New('Segoe UI', 9)
	
	# Initialize the colors
	if ($Theme -eq 'Dark')
	{
		$WindowColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ContainerColor = [System.Drawing.Color]::FromArgb(45, 45, 45)
		$BackColor = [System.Drawing.Color]::FromArgb(32, 32, 32)
		$ForeColor = [System.Drawing.Color]::White
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::DimGray
	}
	else
	{
		$WindowColor = [System.Drawing.Color]::White
		$ContainerColor = [System.Drawing.Color]::WhiteSmoke
		$BackColor = [System.Drawing.Color]::Gainsboro
		$ForeColor = [System.Drawing.Color]::Black
		$BorderColor = [System.Drawing.Color]::DimGray
		$SelectionBackColor = [System.Drawing.SystemColors]::Highlight
		$SelectionForeColor = [System.Drawing.Color]::White
		$MenuSelectionColor = [System.Drawing.Color]::LightSteelBlue
	}
	
	if ($CustomColor)
	{
		# Check and Validate the custom colors:
		$Color = $CustomColor.WindowColor -as [System.Drawing.Color]
		if ($Color) { $WindowColor = $Color }
		$Color = $CustomColor.ContainerColor -as [System.Drawing.Color]
		if ($Color) { $ContainerColor = $Color }
		$Color = $CustomColor.BackColor -as [System.Drawing.Color]
		if ($Color) { $BackColor = $Color }
		$Color = $CustomColor.ForeColor -as [System.Drawing.Color]
		if ($Color) { $ForeColor = $Color }
		$Color = $CustomColor.BorderColor -as [System.Drawing.Color]
		if ($Color) { $BorderColor = $Color }
		$Color = $CustomColor.SelectionBackColor -as [System.Drawing.Color]
		if ($Color) { $SelectionBackColor = $Color }
		$Color = $CustomColor.SelectionForeColor -as [System.Drawing.Color]
		if ($Color) { $SelectionForeColor = $Color }
		$Color = $CustomColor.MenuSelectionColor -as [System.Drawing.Color]
		if ($Color) { $MenuSelectionColor = $Color }
	}
	
	# Define the custom renderer for the menus
	#region Add-Type definition
	try
	{
		[SAPIENTypes.SAPIENColorTable] | Out-Null
	}
	catch
	{
		if ($PSVersionTable.PSVersion.Major -ge 7)
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing', 'System.Drawing.Primitives'
		}
		else
		{
			$Assemblies = 'System.Windows.Forms', 'System.Drawing'
		}
		Add-Type -ReferencedAssemblies $Assemblies -TypeDefinition "
using System;
using System.Windows.Forms;
using System.Drawing;
namespace SAPIENTypes
{
    public class SAPIENColorTable : ProfessionalColorTable
    {
        Color ContainerBackColor;
        Color BackColor;
        Color BorderColor;
        Color SelectBackColor;

        public SAPIENColorTable(Color containerColor, Color backColor, Color borderColor, Color selectBackColor)
        {
            ContainerBackColor = containerColor;
            BackColor = backColor;
            BorderColor = borderColor;
            SelectBackColor = selectBackColor;
        } 
        public override Color MenuStripGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuStripGradientEnd { get { return ContainerBackColor; } }
        public override Color ToolStripBorder { get { return BorderColor; } }
        public override Color MenuItemBorder { get { return SelectBackColor; } }
        public override Color MenuItemSelected { get { return SelectBackColor; } }
        public override Color SeparatorDark { get { return BorderColor; } }
        public override Color ToolStripDropDownBackground { get { return BackColor; } }
        public override Color MenuBorder { get { return BorderColor; } }
        public override Color MenuItemSelectedGradientBegin { get { return SelectBackColor; } }
        public override Color MenuItemSelectedGradientEnd { get { return SelectBackColor; } }      
        public override Color MenuItemPressedGradientBegin { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientEnd { get { return ContainerBackColor; } }
        public override Color MenuItemPressedGradientMiddle { get { return ContainerBackColor; } }
        public override Color ImageMarginGradientBegin { get { return BackColor; } }
        public override Color ImageMarginGradientEnd { get { return BackColor; } }
        public override Color ImageMarginGradientMiddle { get { return BackColor; } }
    }
}"
	}
	#endregion
	
	$colorTable = New-Object SAPIENTypes.SAPIENColorTable -ArgumentList $ContainerColor, $BackColor, $BorderColor, $MenuSelectionColor
	$render = New-Object System.Windows.Forms.ToolStripProfessionalRenderer -ArgumentList $colorTable
	[System.Windows.Forms.ToolStripManager]::Renderer = $render
	
	# Set up our processing queue
	$Queue = New-Object System.Collections.Generic.Queue[System.ComponentModel.Component]
	$Queue.Enqueue($Control)
	
	Add-Type -AssemblyName System.Core
	
	# Only process the controls once.
	$Processed = New-Object System.Collections.Generic.HashSet[System.ComponentModel.Component]
	
	# Apply the colors to the controls
	while ($Queue.Count -gt 0)
	{
		$target = $Queue.Dequeue()
		
		# Skip controls we already processed
		if ($Processed.Contains($target)) { continue }
		$Processed.Add($target)
		
		# Set the text color
		if ($target.Tag -ne "DangerZone")
		{
			$target.ForeColor = $ForeColor
		}
		else
		{
			$target.ForeColor = [System.Drawing.Color]::Red
		}
		
		#region Handle Controls
		if ($target -is [System.Windows.Forms.Form])
		{
			# Set Font
			$target.Font = $Font
			$target.BackColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.SplitContainer])
		{
			$target.BackColor = $BorderColor
		}
		elseif ($target -is [System.Windows.Forms.PropertyGrid])
		{
			$target.BackColor = $BorderColor
			$target.ViewBackColor = $BackColor
			$target.ViewForeColor = $ForeColor
			$target.ViewBorderColor = $BorderColor
			$target.CategoryForeColor = $ForeColor
			$target.CategorySplitterColor = $ContainerColor
			$target.HelpBackColor = $BackColor
			$target.HelpForeColor = $ForeColor
			$target.HelpBorderColor = $BorderColor
			$target.CommandsBackColor = $BackColor
			$target.CommandsBorderColor = $BorderColor
			$target.CommandsForeColor = $ForeColor
			$target.LineColor = $ContainerColor
		}
		elseif ($target -is [System.Windows.Forms.ContainerControl] -or
			$target -is [System.Windows.Forms.Panel])
		{
			# Set the BackColor for the container
			$target.BackColor = $ContainerColor
			
		}
		elseif ($target -is [System.Windows.Forms.GroupBox])
		{
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.Button])
		{
			$target.FlatStyle = 'Flat'
			$target.FlatAppearance.BorderColor = $BorderColor
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.CheckBox] -or
			$target -is [System.Windows.Forms.RadioButton] -or
			$target -is [System.Windows.Forms.Label])
		{
			#$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.ComboBox])
		{
			$target.BackColor = $BackColor
			$target.FlatStyle = 'Flat'
		}
		elseif ($target -is [System.Windows.Forms.TextBox])
		{
			$target.BorderStyle = 'FixedSingle'
			$target.BackColor = $BackColor
		}
		elseif ($target -is [System.Windows.Forms.DataGridView])
		{
			$target.GridColor = $BorderColor
			$target.BackgroundColor = $ContainerColor
			$target.DefaultCellStyle.BackColor = $WindowColor
			$target.DefaultCellStyle.SelectionBackColor = $SelectionBackColor
			$target.DefaultCellStyle.SelectionForeColor = $SelectionForeColor
			$target.ColumnHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.ColumnHeadersDefaultCellStyle.ForeColor = $ForeColor
			$target.EnableHeadersVisualStyles = $false
			$target.ColumnHeadersBorderStyle = 'Single'
			$target.RowHeadersBorderStyle = 'Single'
			$target.RowHeadersDefaultCellStyle.BackColor = $ContainerColor
			$target.RowHeadersDefaultCellStyle.ForeColor = $ForeColor
			
		}
		elseif ($PSVersionTable.PSVersion.Major -le 5 -and $target -is [System.Windows.Forms.DataGrid])
		{
			$target.CaptionBackColor = $WindowColor
			$target.CaptionForeColor = $ForeColor
			$target.BackgroundColor = $ContainerColor
			$target.BackColor = $WindowColor
			$target.ForeColor = $ForeColor
			$target.HeaderBackColor = $ContainerColor
			$target.HeaderForeColor = $ForeColor
			$target.FlatMode = $true
			$target.BorderStyle = 'FixedSingle'
			$target.GridLineColor = $BorderColor
			$target.AlternatingBackColor = $ContainerColor
			$target.SelectionBackColor = $SelectionBackColor
			$target.SelectionForeColor = $SelectionForeColor
		}
		elseif ($target -is [System.Windows.Forms.ToolStrip])
		{
			
			$target.BackColor = $BackColor
			$target.Renderer = $render
			
			foreach ($item in $target.Items)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ToolStripMenuItem] -or
			$target -is [System.Windows.Forms.ToolStripDropDown] -or
			$target -is [System.Windows.Forms.ToolStripDropDownItem])
		{
			$target.BackColor = $BackColor
			foreach ($item in $target.DropDownItems)
			{
				$Queue.Enqueue($item)
			}
		}
		elseif ($target -is [System.Windows.Forms.ListBox] -or
			$target -is [System.Windows.Forms.ListView] -or
			$target -is [System.Windows.Forms.TreeView])
		{
			$target.BackColor = $WindowColor
		}
		else
		{
			$target.BackColor = $BackColor
		}
		#endregion
		
		if ($target -is [System.Windows.Forms.Control])
		{
			# Queue all the child controls
			foreach ($child in $target.Controls)
			{
				$Queue.Enqueue($child)
			}
		}
	}
}
#endregion

# Populate the master list initially for access scopes found
function Initialize-MasterItems
{
	$global:masterItems = @()
	foreach ($item in $checkedlistboxPermissionsToAssign.Items)
	{
		$global:masterItems += $item
	}
}

# Function to update the label text
function Update-ItemCountLabel
{
	$labelAccessScopeItemCount.Text = "Access scopes: " + $checkedlistboxPermissionsToAssign.Items.Count
}

function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Get the service principals based on the ServiceType
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			# Log
			Write-Log -Level INFO -Message "Retrieving access scopes for '$ServiceType'..."
			
			# Get the specific service principal
			$filteredServicePrincipal = Get-MgServicePrincipal -Filter "DisplayName eq '$ServiceType'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "Service principal access scopes retrieved for service: '$ServiceType'."
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Retrieving access scopes for all service principals..."
			
			# Get all service principals
			$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "All service principals access scopes retrieved."
		}
		
		# Check if returned data (exclude if "All services")
		if ($null -eq $filteredServicePrincipal -and $ServiceType -ne "All services")
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Store the filtered service principal data in the global hashtable
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
		}
		else
		{
			$global:ServicePrincipalData = @{ }
			foreach ($sp in $filteredServicePrincipal)
			{
				$global:ServicePrincipalData[$sp.DisplayName] = $sp
			}
		}
		
		# Create a list of roles
		$roles = $filteredServicePrincipal | ForEach-Object {
			foreach ($r in $_.AppRoles)
			{
				[PSCustomObject]@{
					AppId	    = $_.Id
					DisplayName = $_.DisplayName
					Id		    = $r.Id
					RoleName    = $r.DisplayName
					Value	    = $r.Value
				}
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals retrieved - filtered and sorted data."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list..."
		
		# Loop all roles for adding to table
		foreach ($role in $roles)
		{
			$roleDetails = "'$($role.DisplayName)', description: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		# Update the label with the current item count
		Update-ItemCountLabel
		
		# Log
		Write-Log -Level INFO -Message "Added assignable permission scopes to permission list."
		
		# Define the most used items in the desired order
		$mostUsedItems = @("All services", "Microsoft Graph", "Office 365 Exchange Online", "Office 365 Information Protection", "Office 365 SharePoint Online", "WindowsDefenderATP", "Microsoft Cloud App Security")
		
		# Populate the ComboBox with service names only if they have assignable roles
		if ($ServiceComboBox.Items.Count -eq 0)
		{
			# Sort the service principals
			$sortedServicePrincipals = $filteredServicePrincipal | Sort-Object {
				if ($mostUsedItems -contains $_.DisplayName)
				{
					[Array]::IndexOf($mostUsedItems, $_.DisplayName)
				}
				else
				{
					[Int32]::MaxValue
				}
			}
			
			# Populate the ComboBox
			$ServiceComboBox.Items.Add("All services")
			$sortedServicePrincipals | ForEach-Object {
				if ($_.AppRoles.Count -gt 0)
				{
					$ServiceComboBox.Items.Add($_.DisplayName)
				}
			}
		}
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}

<#
function Get-AssignableApiPermissionScopes
{
	param (
		[string]$ServiceType
	)
	
	try
	{
		# Clear list for existing items
		$checkedlistboxPermissionsToAssign.Items.Clear()
		
		# Log
		Write-Log -Level INFO -Message "Retrieving service principals..."
		
		# TODO Better code... If you know to make it better, let me know!
		
		# Get the service principals based on the ServiceType
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			# Get the specific service principal
			$filteredServicePrincipal = Get-MgServicePrincipal -Filter "DisplayName eq '$ServiceType'" -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "Service principal retrieved for ServiceType: '$ServiceType'."
		}
		else
		{
			# Get all service principals
			$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
			
			# Log
			Write-Log -Level INFO -Message "All service principals retrieved."
		}
		
		# Check if returned data (exclude if "All services")
		if ($null -eq $filteredServicePrincipal -and $ServiceType -ne "All services")
		{
			# Log
			Write-Log -Level INFO -Message "No service principal found."
			return
		}
		
		# Store the filtered service principal data in the global hashtable
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			$global:ServicePrincipalData[$ServiceType] = $filteredServicePrincipal
		}
		else
		{
			$global:ServicePrincipalData = @{ }
			foreach ($sp in $filteredServicePrincipal)
			{
				$global:ServicePrincipalData[$sp.DisplayName] = $sp
			}
		}
		
		# Create a list of roles
		$roles = $filteredServicePrincipal | ForEach-Object {
			foreach ($r in $_.AppRoles)
			{
				[PSCustomObject]@{
					AppId	    = $_.Id
					DisplayName = $_.DisplayName
					Id		    = $r.Id
					RoleName    = $r.DisplayName
					Value	    = $r.Value
				}
			}
		}
		
		# Log
		Write-Log -Level INFO -Message "Service principals retrieved - filtered and sorted data."
		
		# Populate the CheckedListBox with permission scopes
		Write-Log -Level INFO -Message "Adding assignable permission scopes to permission list..."
		
		# Loop all roles for adding to table
		foreach ($role in $roles)
		{
			$roleDetails = "'$($role.DisplayName)', description: '$($role.RoleName)', Role scope: '$($role.Value)', RoleId: '$($role.Id)'"
			$checkedlistboxPermissionsToAssign.Items.Add($roleDetails)
		}
		
		# Log
		Write-Log -Level INFO -Message "Added assignable permission scopes to permission list."
		
		# Define the most used items in the desired order
		$mostUsedItems = @("All services", "Microsoft Graph", "Office 365 Exchange Online", "Office 365 Information Protection", "Office 365 SharePoint Online", "WindowsDefenderATP", "Microsoft Cloud App Security")
		
		# Populate the ComboBox with service names only if they have assignable roles
		if (-not [string]::IsNullOrWhiteSpace($ServiceType) -and $ServiceType -ne "All services")
		{
			# Ensure the ComboBox retains all service principals
			if ($ServiceComboBox.Items.Count -eq 0)
			{
				$filteredServicePrincipal = Get-MgServicePrincipal -All -Property "id,appId,displayName,appRoles,oauth2PermissionScopes,resourceSpecificApplicationPermissions"
				
				# Sort the service principals
				$sortedServicePrincipals = $filteredServicePrincipal | Sort-Object {
					if ($mostUsedItems -contains $_.DisplayName)
					{
						[Array]::IndexOf($mostUsedItems, $_.DisplayName)
					}
					else
					{
						[Int32]::MaxValue
					}
				}
				
				# Populate the ComboBox
				$ServiceComboBox.Items.Add("All services")
				$sortedServicePrincipals | ForEach-Object {
					if ($_.AppRoles.Count -gt 0)
					{
						$ServiceComboBox.Items.Add($_.DisplayName)
					}
				}
			}
		}
		else
		{
			# Add all service principals
			$ServiceComboBox.Items.Clear()
			
			# Sort the service principals
			$sortedServicePrincipals = $filteredServicePrincipal | Sort-Object {
				if ($mostUsedItems -contains $_.DisplayName)
				{
					[Array]::IndexOf($mostUsedItems, $_.DisplayName)
				}
				else
				{
					[Int32]::MaxValue
				}
			}
			
			# Populate the ComboBox
			$ServiceComboBox.Items.Add("All services")
			$sortedServicePrincipals | ForEach-Object {
				if ($_.AppRoles.Count -gt 0)
				{
					$ServiceComboBox.Items.Add($_.DisplayName)
				}
			}
		}
	}
	catch
	{
		# Log
		Write-Log -Level ERROR -Message "Error retrieving permission scopes: $_"
	}
}
#>

function Get-ManagedIdentities
{
	# Clear current data in the CheckedListBox to not keep old items
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# If connected
	if ($global:ConnectedState)
	{
		# Log
		Write-Log -Level INFO -Message "Loading list of Managed Identity from tenant..."
		
		#Write-Log -Level INFO -Message "TEST BEFORE Get-MgServicePrincipal"
		
		# Get all managed identities
		$global:managedIdentities = Get-MgServicePrincipal -Filter "servicePrincipalType eq 'ManagedIdentity'" -All
		
		#Write-Log -Level INFO -Message "TEST AFTER Get-MgServicePrincipal"
		
		# Log
		Write-Log -Level INFO -Message "Loaded and updated the list of discovered Managed Identities from the tenant."
		
		# Create a custom object with DisplayName and Id, then sort by DisplayName
		$sortedIdentities = $global:managedIdentities | Sort-Object DisplayName | ForEach-Object {
			[PSCustomObject]@{
				DisplayName = $_.DisplayName
				Id		    = $_.Id
			}
		}
		
		# Populate the CheckedListBox with sorted managed identities
		foreach ($identity in $sortedIdentities)
		{
			$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
		}
		
		# Store the sorted identities in a global variable for later use
		$global:sortedManagedIdentities = $sortedIdentities
		$global:filteredManagedIdentities = $sortedIdentities
		
		# Log
		Write-Log -Level INFO -Message "List of Managed Identity updated with a total of '$(Get-ManagedIdentityCount)' Managed Identity´s"
	}
	# Else if not connected
	else
	{
		# Log
		Write-Log -Level INFO -Message "Not connected - can´t load list of Managed Identity´s"
	}
}

function Search-ManagedIdentities
{
	param (
		[string]$searchQuery
	)
	
	# Clear
	$textboxselectedIdentityID.Text = ""
	$textboxselectedIdentityName.Text = ""
	
	# Clear current items in the CheckedListBox
	$checkedlistboxListOfManagedIdentity.Items.Clear()
	
	# Filter the managed identities based on the search query
	$global:filteredManagedIdentities = $global:sortedManagedIdentities | Where-Object { $_.DisplayName -like "*$searchQuery*" }
	
	# Populate the CheckedListBox with the filtered managed identities
	foreach ($identity in $global:filteredManagedIdentities)
	{
		$checkedlistboxListOfManagedIdentity.Items.Add($identity.DisplayName)
	}
}

function Update-SelectedIdentity
{
	param (
		[int]$selectedIndex
	)
	$selectedIdentity = $global:filteredManagedIdentities[$selectedIndex]
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxselectedIdentityName.Text = "$($selectedIdentity.DisplayName)"
}

$formManagedIdentityPermi_Load = {
	
	# Example usage:
	if (Is-Administrator)
	{
		Write-Log -Level INFO -Message "The current process is running with administrator privileges."
	}
	else
	{
		Write-Log -Level INFO -Message "The current process is NOT running with administrator privileges."
	}
	
	# Check for log path when app starts up
	CheckLogPath
	
	# Log
	Write-Log -Level INFO -Message "The application $ToolName is started"
	
	# 
	Get-CurrentExecutionFilename
	
	# Get theme mode
	$global:darkModeStateUI = Test-WindowsInDarkMode
	
	#  Set state for theme
	if ($global:darkModeStateUI)
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Dark
		
		$darkModeSateUI = $true
	}
	else
	{
		Set-ControlTheme $formManagedIdentityPermi -Theme Light
		
		$darkModeSateUI = $false
	}
	
	# Set tool state
	$ConnectedState = $false
	$clearExistingPermissions = $true
	
	# Set form text
	$formManagedIdentityPermi.Text = "$ToolName v. $FormVersion"
	$toolstripstatuslabelMain_CreatedBy.Text = "Created by: $Author"
	
	# Services to add to dropdown list (more to add soon when tested..)
	#$ServiceComboBox.Items.Add("Microsoft Graph")
	#$ServiceComboBox.Items.Add("Exchange Online")
	#$ServiceComboBox.Items.Add("SharePoint")
}

$darkToolStripMenuItem_Click={
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Dark
	
	$global:darkModeStateUI = $true
}

$lightToolStripMenuItem_Click = {
	
	# Set theme state
	Set-ControlTheme -Control $formManagedIdentityPermi -Theme Light
	
	$global:darkModeStateUI = $false
}

$buttonConnectMicrosoftGraph_Click = {
	
	# If connected
	if ($labelConnectionStatus.Text -eq "Connected" -and $buttonConnectMicrosoftGraph.Text -eq "Disconnect Microsoft Graph")
	{
		try
		{
			# Disconnect
			Disconnect-MgGraph
			
			# Update states
			$global:ConnectedState = $false
			$labelConnectionStatus.Text = "Not connected"
			$labelConnectionStatus.ForeColor = 'Red'
			$buttonConnectMicrosoftGraph.Text = "Connect Microsoft Graph"
			
			# Log
			Write-Log -Level INFO -Message "Disconnected from Microsoft Graph."
			
			# Clear data
			$combobox.Items.Clear()
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error disconnecting from Microsoft Graph: $($_.Exception.Message)"
		}
	}
	else
	{
		try
		{
			# Check ExecutionPolicy
			Test-ExecutionPolicy
			
			# Check installed/loaded modules
			Test-Modules
			
			# Get tenant ID from textbox if provided
			$tenantId = $null
			if ($textboxTenantToConnectToGraph.Text -ne "")
			{
				$LookupInput = $textboxTenantToConnectToGraph.Text
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - looking up: '$LookupInput'..."
				
				$tenantId = Get-TenantId -LookupInputData $LookupInput
				Write-Log -Level INFO -Message "Tenant ID lookup input not empty - got tenantId: '$tenantId'"
			}
			
			# Connect to Microsoft Graph
			if ($tenantId)
			{
				ConnectToGraph -TenantId $tenantId
			}
			else
			{
				ConnectToGraph
			}
			
			# If connected, set states
			if ($global:ConnectedState -eq $true)
			{
				$labelConnectionStatus.Text = "Connected"
				$labelConnectionStatus.ForeColor = 'Green'
				
				# Load managed identityes after connected
				Get-managedIdentities
				
				$buttonConnectMicrosoftGraph.Text = "Disconnect Microsoft Graph"
				
				# Call this function once to initialize the master list
				Initialize-MasterItems
				
				# Populate the ComboBox with service names
				Get-AssignableApiPermissionScopes -ServiceType "All services"
				
				# Set default service in combobox
				$ServiceComboBox.SelectedIndex = 1
			}
			else
			{
				# If not connected set state
				$global:ConnectedState -eq $false
				
				$labelConnectionStatus.Text = "Not connected"
				$labelConnectionStatus.ForeColor = 'Red'
			}
		}
		catch
		{
			# Log
			Write-Log -Level ERROR -Message "Error connecting to Microsoft Graph: $($_.Exception.Message)"
		}
	}
}

$combobox_SelectedIndexChanged = {
	
	# Get the selected identity based on ComboBox selected index
	$selectedIdentity = $global:sortedManagedIdentities[$comboBox.SelectedIndex]
	
	# Get roles assigned to the selected identity
	$roles = Get-MgServicePrincipalAppRoleAssignment -ServicePrincipalId $selectedIdentity.Id
	
	# Extract and format role names and AppRoleIds
	$roleDetails = $roles | ForEach-Object { "$($_.ResourceDisplayName) (AppRoleId: $($_.AppRoleId))" } -join ", "
	
	# Update TextBox with selected identity details
	$textboxselectedIdentityID.Text = "$($selectedIdentity.Id)"
	$textboxAssingedRoles.Text = "$roleDetails"
}

$SubmitButton_Click = {
	
	if ($radiobuttonAddPermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "Managed Identity"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			[System.Windows.Forms.MessageBox]::Show("The following fields are required: $missingFieldsString", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		
		# Update permissions for managed idenityes
		if ($clearExistingPermissions)
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $true
		}
		else
		{
			Add-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service -clearExistingPermissions $false
		}
	}
		
	if ($radiobuttonRemovePermissions.Checked -eq $true)
	{
		# Get data to process
		$ObjectID = $textboxselectedIdentityID.Text
		$Service = $ServiceComboBox.Text
		$Permissions = $PermissionsTextBox.Text
		
		# Validate inputs
		$missingFields = @()
		
		if (-not $ObjectID)
		{
			$missingFields += "ObjectID"
		}
		
		if (-not $Service)
		{
			$missingFields += "Service"
		}
		
		if (-not $Permissions)
		{
			$missingFields += "Permissions"
		}
		
		if ($missingFields.Count -gt 0)
		{
			$missingFieldsString = $missingFields -join ", "
			Write-Log -Level INFO -Message "The following fields are required: $missingFieldsString"
			[System.Windows.Forms.MessageBox]::Show("The following fields are required: $missingFieldsString", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
			return
		}
		
		# Remove permissions form managed identity
		Remove-ServicePrincipalPermission -ManagedIdentityID $ObjectID -Permissions "$Permissions" -ServiceType $Service				
	}
}

$buttonGetCurrentAssignedPe_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	$ObjectName = $textboxselectedIdentityName.Text
	
	# Clear the TextBox before adding new data
	$textboxAssingedRoles.Clear()
	
	# Call the function and get the result
	$result = Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID -ManagedIdentityName $ObjectName
	
	# Set the TextBox text to the result
	$textboxAssingedRoles.Text = $result
	
	#Update-Log -Message $result
	
	#Get-CurrentAppRoleAssignments -ManagedIdentityID $ObjectID
}

$buttonReloadManagedIdentityList_Click={
	
	# Get data
	Get-managedIdentities
}

$checkboxKeepExistingPermissi_CheckedChanged={
	
	# Set state if set from user to keep existing assigned permissions or not
	if ($checkboxKeepExistingPermissi.Checked -eq $true)
	{
		# Set global state
		$global:clearExistingPermissions = $false
		
		# Log
		Write-Log -Level INFO -Message "Set to keep existing permissions (will NOT delete exisiting)"
	}
	elseif ($checkboxKeepExistingPermissi.Checked -eq $false)
	{
		# ASK IF THE USER WILL INSTALL AD Recycle Bin
		$ConfirmClearExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
		
		# Get confirmation
		If ($ConfirmClearExistingPermissions -eq "Yes")
		{
			# If confirmed set state
			$global:clearExistingPermissions = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to reset existing permissions (will DELETE exisiting) - confirmed by user"
		}
		else
		{
			# If not confirmed set state
			$checkboxKeepExistingPermissi.Checked = $true
			
			# Log
			Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
		}		
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No change"
	}
}

$buttonRemoveAllAssignedPermissions_Click={
	
	# Get data to process
	$ObjectID = $textboxselectedIdentityID.Text
	
	# Validate inputs
	if (-not $ObjectID)
	{
		Write-Log -Level INFO -Message "All fields are required - please select a managed identity"
		return
	}
	
	# ASK IF THE USER WILL REMOVE ALL PERMISSIONS
	$ConfirmRemoveAllExistingPermissions = Show-MsgBox -Prompt "Will you remove existing permissions?`r`n`r`nIt can´t be reverted again!" -Title "Remove all existing permissions?" -Icon Exclamation -BoxType YesNo -DefaultButton 2
	
	# If user comfirmed
	If ($ConfirmRemoveAllExistingPermissions -eq "Yes")
	{
		# Log
		Write-Log -Level INFO -Message "Will remove all existing permissions for Managed Identity with id '$ObjectID'  - confirmed by user"
		
		# Remove all assigned permissions
		Remove-AllServicePrincipalPermissions -ManagedIdentityID $ObjectID
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "Set to keep current state for reset existing permissions - confirmation to change is cancled by user"
	}
}

$exitToolStripMenuItem_Click={
	
	# Exit application
	$formManagedIdentityPermi.Close()
}

$changelogToolStripMenuItem_Click={
	
	# Open form
	Show-ChangelogForm_psf
}

$openLogFolderToolStripMenuItem_Click = {
	
	# Open logfile for today
	$objShell = New-Object -ComObject "Shell.Application"
	$objShell.Explore($LogPath)
	
	# Log
	Write-Log -Level INFO -Message "User opened log folder: '$LogPath'"
}

$openLogForTodayToolStripMenuItem_Click = {
	
	#OPEN CURRENT LOG FILE IN FROM FOLDER
	Write-Log -Level INFO -Message "User opened log file for today from: '$LogPath'"
	
	# Conduct filename
	$logFilePath = Join-Path -Path $LogPath -ChildPath ("$($ToolName)_Log_$($env:computername)" + "_" + (Get-Date -Format "dd/MM/yyyy") + ".log")
	
	# Test if file exists
	if (Test-Path $logFilePath)
	{
		# Open file
		Start-Process $logFilePath
		
		# Log
		Write-Log -Level INFO -Message "User opened log file for today: '$logFilePath'"
	}
	else
	{
		Show-MsgBox -Prompt "Log file not found at '$logFilePath'." -Title "Can't locate and open the log for today" -Icon Exclamation -BoxType OKOnly
		
		# Log
		Write-Log -Level INFO -Message "Log file not found at '$logFilePath' - Can't locate and open the log for today"
	}	
}

$myWebpageToolStripMenuItem_Click = {
	
	# Open webside
	Start-Process "https://sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://sonnes.cloud"
}

$myBlogToolStripMenuItem_Click = {
	
	# Open blog
	Start-Process "https://blog.sonnes.cloud"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://blog.sonnes.cloud"
}

$button_ServiceAccounts_About_Click = {
	
	# Show about box
	$yyyy = Get-Date -Format yyyy
	Show-MsgBox -Title "About $ToolName v. $FormVersion" -Prompt "Created by: $Author`r`n`r`nCopyright $yyyy © All rights reserved`r`n`r`nWebsite: sonnes.cloud`r`nBlog: blog.sonnes.cloud" -Icon Information -BoxType OKOnly
}

$buttonGetAccessScopesForSe_Click = {
	
	#Get-AssignableApiPermissionScopes -ApiDisplayName "Microsoft Graph"
	
	# Get the selected service type
	$selectedServiceType = $ServiceComboBox.Text
	
	# Get data and get permissions
	Get-AssignableApiPermissionScopes -ServiceType $selectedServiceType
	
	# Call this function once to initialize the master list
	Initialize-MasterItems
	
	# Get data and get permissions
	#Get-AssignableApiPermissionScopes -ServiceType "$($ServiceComboBox.Text)"
	
	# Call this function once to initialize the master list
	#Initialize-MasterItems
}

$buttonAddSelectedAccessSco_Click = {
	
	# Initialize selected scopes array
	$selectedScopes = @()
	
	# Loop selected scopes - add to tool for process
	foreach ($item in $checkedlistboxPermissionsToAssign.CheckedItems)
	{
		# Extract the scope value from the selected item
		if ($item -match "Role scope: '([^']+)'")
		{
			$selectedScopes += $matches[1]
			
			#Write-Log -Level INFO -Message $matches[1]
		}
		<#
		elseif ($item -match "ScopeValue: ([^,]+)")
		{
			$selectedScopes += $matches[1]
			
			Write-Log -Level INFO -Message $matches[1]
		}
		#>
	}
	
	# Check if any scopes are selected
	if ($selectedScopes.Count -gt 0)
	{
		# Log
		Write-Log -Level INFO -Message "Adding access scope selected: '$($selectedScopes -join ', ')' to the list for permissions scopes to edit"
		
		# Format data
		$PermissionsTextBox.Text = $selectedScopes -join ", "
		
		# Write-Log -Level INFO -Message "Adding: $selectedScopes"
	}
	else
	{
		# Log
		Write-Log -Level INFO -Message "No access scopes selected to add"
		[System.Windows.Forms.MessageBox]::Show("No access scopes selected to add.", "Input Validation", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
	}
}

$textboxSccessScopeToAssignFilter_TextChanged={
	
	# Get data fo filter function
	$filterText = $textboxSccessScopeToAssignFilter.Text
	
	$filteredItems = @()
	
	# Filter elements
	if ($filterText -eq "" -or $null)
	{
		# If the filter text is empty, reset to all items
		$filteredItems = $global:masterItems
		
		#Write-Log -Level ERROR -Message "Filter of access scopes cleared (no filter)"
	}
	else
	{
		# Filter items based on the filter text
		foreach ($item in $global:masterItems)
		{
			if ($item -like "*$filterText*")
			{
				$filteredItems += $item
			}
		}
	}
	
	# Clear the CheckedListBox and add the filtered items
	$checkedlistboxPermissionsToAssign.Items.Clear()
	foreach ($filteredItem in $filteredItems)
	{
		$checkedlistboxPermissionsToAssign.Items.Add($filteredItem)
	}
}

$pictureboxSupportMe_Click={
	
	# Start webpage
	Start-Process "https://buymeacoffee.com/sonnes"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about on the website https://buymeacoffee.com/sonnes"
	
}

$aboutToolStripMenuItem_Click={
	
	# Open form
	Show-AboutForm_psf
}

$textboxSearch_TextChanged = {
	
	# Get data
	$searchQuery = $textboxSearch.Text
	
	# Lookup data
	Search-ManagedIdentities -searchQuery $searchQuery
}

$checkedlistboxListOfManagedIdentity_ItemCheck = [System.Windows.Forms.ItemCheckEventHandler]{
	
	param (
		[System.Object]$sender,
		[System.Windows.Forms.ItemCheckEventArgs]$e
	)
	
	# Uncheck all other items
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($i -ne $e.Index)
		{
			$checkedlistboxListOfManagedIdentity.SetItemChecked($i, $false)
		}
	}
	
	# Update the selected identity details
	if ($e.NewValue -eq [System.Windows.Forms.CheckState]::Checked)
	{
		# Uddate data
		Update-SelectedIdentity -selectedIndex $e.Index
	}
	else
	{
		# Reset form
		$textboxselectedIdentityID.Clear()
		$textboxselectedIdentityName.Clear()
		$textboxAssingedRoles.Clear()
	}
}

$csvToolStripMenuItem_Click={

}

$downloadLatestReleaseToolStripMenuItem_Click = {
	
	# Call function
	Get-LatestReleaseFromGitHub
}

$buttonLookupTenantID_Click = {
	
	$LookupInput = $textboxTenantToConnectToGraph.Text
	
	#Write-Log -Level INFO -Message "buttonLookupTenantID_Click input: $LookupInput"
	
	try
	{
		# Lookup data
		$tenantId = Get-TenantId -LookupInputData $LookupInput
		
		if ($tenantId)
		{
			# Log
			Write-Log -Level INFO -Message "Tenant ID for '$LookupInput' is: '$tenantId'"
		}
		else
		{
			# Log
			Write-Log -Level INFO -Message "Failed to retrieve tenant ID for '$LookupInput'."
		}
	}
	catch
	{
		# Log
		$errorMessage = "Error: $($_.Exception.Message)"
		[System.Windows.Forms.MessageBox]::Show($errorMessage)
		
		Write-Log -Level ERROR -Message $errorMessage
	}
}

$currentSelectedManagedIdentityToolStripMenuItem_Click={
	#TODO: Place custom script here
	
}

$exportAssignedPermissionsToolStripMenuItem_Click={
	
	$timestamp = Get-Date -Format "dd-MM-yyyy"
	
	# Get data needed for the export
	$ManagedIdentityID = $textboxselectedIdentityID.Text
	$ManagedIdentityName = $textboxselectedIdentityName.Text
	
	$selectedManagedIdentities = @()
	for ($i = 0; $i -lt $checkedlistboxListOfManagedIdentity.Items.Count; $i++)
	{
		if ($checkedlistboxListOfManagedIdentity.GetItemChecked($i))
		{
			$selectedManagedIdentities += $checkedlistboxListOfManagedIdentity.Items[$i]
		}
	}
	
	# For export for selected Managed Identity (permissions)
	if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID) -or $selectedManagedIdentities.Count -gt 0)
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for selected Managed Identity '$ManagedIdentityName'"
		$saveFileDialog.FileName = "${ManagedIdentityName}_permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			if (-not [string]::IsNullOrWhiteSpace($ManagedIdentityID))
			{
				# Call function to save data
				Export-ManagedIdentityPermissions -ManagedIdentityID $ManagedIdentityID -ManagedIdentityName $ManagedIdentityName -ExportFilePath $ExportFilePath
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for the selected Managed Identity '$ManagedIdentityName' (ID: $ManagedIdentityID) exported successfully." -Icon Information -BoxType OK
			}
			else
			{
				$exportedNames = @()
				foreach ($identity in $selectedManagedIdentities)
				{
					Export-ManagedIdentityPermissions -ManagedIdentityID $identity.Id -ManagedIdentityName $identity.Name -ExportFilePath $ExportFilePath
					$exportedNames += "$($identity.Name) (ID: $($identity.Id))"
				}
				$exportedNamesString = $exportedNames -join ", "
				
				Show-MsgBox -Title "Export" -Prompt "Permissions for all selected Managed Identities '$exportedNamesString' exported successfully." -Icon Information -BoxType OK
			}
		}
	}	
	# For export for all Managed Identity (permissions)
	else
	{
		# Set the save dialog
		$saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
		$saveFileDialog.Filter = "CSV files (*.csv)|*.csv|All files (*.*)|*.*"
		$saveFileDialog.Title = "Save Permissions Export - for all Managed Identity´s"
		$saveFileDialog.FileName = "Managed Identity Permissions_${timestamp}.csv"
		
		if ($saveFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK)
		{
			# Get the filename to save data to
			$ExportFilePath = $saveFileDialog.FileName
			
			# Call function to save data
			Export-AllManagedIdentityPermissions -ExportFilePath $ExportFilePath
			
			Show-MsgBox -Title "Export" -Prompt "Permissions for all Managed Identities exported successfully." -Icon Information -BoxType OK
		}
	}
}

$microsoftGraphToolStripMenuItem_Click = {
	
	# Start webpage
	Start-Process "https://learn.microsoft.com/en-us/graph/permissions-reference"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the Microsoft Graph permissions reference"
}

$guideToolStripMenuItem_Click={
	
	# Open blog
	Start-Process "https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
	
	# Log
	Write-Log -Level INFO -Message "The user clicked on the link for more information about the tool and guide on the website https://github.com/michaelmsonne/ManagedIdentityPermissionManager"
}

$buttonDefaultServiceToManage_Click={
	
	# Set default service in combobox
	$ServiceComboBox.SelectedIndex = 1
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>